// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-bponline/m/gen/model"
)

func newTAcaraPesertaStrategicMeeting(db *gorm.DB, opts ...gen.DOOption) tAcaraPesertaStrategicMeeting {
	_tAcaraPesertaStrategicMeeting := tAcaraPesertaStrategicMeeting{}

	_tAcaraPesertaStrategicMeeting.tAcaraPesertaStrategicMeetingDo.UseDB(db, opts...)
	_tAcaraPesertaStrategicMeeting.tAcaraPesertaStrategicMeetingDo.UseModel(&model.TAcaraPesertaStrategicMeeting{})

	tableName := _tAcaraPesertaStrategicMeeting.tAcaraPesertaStrategicMeetingDo.TableName()
	_tAcaraPesertaStrategicMeeting.ALL = field.NewAsterisk(tableName)
	_tAcaraPesertaStrategicMeeting.CIDAcara = field.NewInt32(tableName, "c_id_acara")
	_tAcaraPesertaStrategicMeeting.CJamAwal = field.NewTime(tableName, "c_jam_awal")
	_tAcaraPesertaStrategicMeeting.CJamAkhir = field.NewTime(tableName, "c_jam_akhir")
	_tAcaraPesertaStrategicMeeting.CNamaRuangan = field.NewString(tableName, "c_nama_ruangan")
	_tAcaraPesertaStrategicMeeting.CNamaAcara = field.NewString(tableName, "c_nama_acara")

	_tAcaraPesertaStrategicMeeting.fillFieldMap()

	return _tAcaraPesertaStrategicMeeting
}

type tAcaraPesertaStrategicMeeting struct {
	tAcaraPesertaStrategicMeetingDo

	ALL          field.Asterisk
	CIDAcara     field.Int32
	CJamAwal     field.Time
	CJamAkhir    field.Time
	CNamaRuangan field.String
	CNamaAcara   field.String

	fieldMap map[string]field.Expr
}

func (t tAcaraPesertaStrategicMeeting) Table(newTableName string) *tAcaraPesertaStrategicMeeting {
	t.tAcaraPesertaStrategicMeetingDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tAcaraPesertaStrategicMeeting) As(alias string) *tAcaraPesertaStrategicMeeting {
	t.tAcaraPesertaStrategicMeetingDo.DO = *(t.tAcaraPesertaStrategicMeetingDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tAcaraPesertaStrategicMeeting) updateTableName(table string) *tAcaraPesertaStrategicMeeting {
	t.ALL = field.NewAsterisk(table)
	t.CIDAcara = field.NewInt32(table, "c_id_acara")
	t.CJamAwal = field.NewTime(table, "c_jam_awal")
	t.CJamAkhir = field.NewTime(table, "c_jam_akhir")
	t.CNamaRuangan = field.NewString(table, "c_nama_ruangan")
	t.CNamaAcara = field.NewString(table, "c_nama_acara")

	t.fillFieldMap()

	return t
}

func (t *tAcaraPesertaStrategicMeeting) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tAcaraPesertaStrategicMeeting) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 5)
	t.fieldMap["c_id_acara"] = t.CIDAcara
	t.fieldMap["c_jam_awal"] = t.CJamAwal
	t.fieldMap["c_jam_akhir"] = t.CJamAkhir
	t.fieldMap["c_nama_ruangan"] = t.CNamaRuangan
	t.fieldMap["c_nama_acara"] = t.CNamaAcara
}

func (t tAcaraPesertaStrategicMeeting) clone(db *gorm.DB) tAcaraPesertaStrategicMeeting {
	t.tAcaraPesertaStrategicMeetingDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tAcaraPesertaStrategicMeeting) replaceDB(db *gorm.DB) tAcaraPesertaStrategicMeeting {
	t.tAcaraPesertaStrategicMeetingDo.ReplaceDB(db)
	return t
}

type tAcaraPesertaStrategicMeetingDo struct{ gen.DO }

type ITAcaraPesertaStrategicMeetingDo interface {
	gen.SubQuery
	Debug() ITAcaraPesertaStrategicMeetingDo
	WithContext(ctx context.Context) ITAcaraPesertaStrategicMeetingDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITAcaraPesertaStrategicMeetingDo
	WriteDB() ITAcaraPesertaStrategicMeetingDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITAcaraPesertaStrategicMeetingDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITAcaraPesertaStrategicMeetingDo
	Not(conds ...gen.Condition) ITAcaraPesertaStrategicMeetingDo
	Or(conds ...gen.Condition) ITAcaraPesertaStrategicMeetingDo
	Select(conds ...field.Expr) ITAcaraPesertaStrategicMeetingDo
	Where(conds ...gen.Condition) ITAcaraPesertaStrategicMeetingDo
	Order(conds ...field.Expr) ITAcaraPesertaStrategicMeetingDo
	Distinct(cols ...field.Expr) ITAcaraPesertaStrategicMeetingDo
	Omit(cols ...field.Expr) ITAcaraPesertaStrategicMeetingDo
	Join(table schema.Tabler, on ...field.Expr) ITAcaraPesertaStrategicMeetingDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITAcaraPesertaStrategicMeetingDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITAcaraPesertaStrategicMeetingDo
	Group(cols ...field.Expr) ITAcaraPesertaStrategicMeetingDo
	Having(conds ...gen.Condition) ITAcaraPesertaStrategicMeetingDo
	Limit(limit int) ITAcaraPesertaStrategicMeetingDo
	Offset(offset int) ITAcaraPesertaStrategicMeetingDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITAcaraPesertaStrategicMeetingDo
	Unscoped() ITAcaraPesertaStrategicMeetingDo
	Create(values ...*model.TAcaraPesertaStrategicMeeting) error
	CreateInBatches(values []*model.TAcaraPesertaStrategicMeeting, batchSize int) error
	Save(values ...*model.TAcaraPesertaStrategicMeeting) error
	First() (*model.TAcaraPesertaStrategicMeeting, error)
	Take() (*model.TAcaraPesertaStrategicMeeting, error)
	Last() (*model.TAcaraPesertaStrategicMeeting, error)
	Find() ([]*model.TAcaraPesertaStrategicMeeting, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TAcaraPesertaStrategicMeeting, err error)
	FindInBatches(result *[]*model.TAcaraPesertaStrategicMeeting, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TAcaraPesertaStrategicMeeting) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITAcaraPesertaStrategicMeetingDo
	Assign(attrs ...field.AssignExpr) ITAcaraPesertaStrategicMeetingDo
	Joins(fields ...field.RelationField) ITAcaraPesertaStrategicMeetingDo
	Preload(fields ...field.RelationField) ITAcaraPesertaStrategicMeetingDo
	FirstOrInit() (*model.TAcaraPesertaStrategicMeeting, error)
	FirstOrCreate() (*model.TAcaraPesertaStrategicMeeting, error)
	FindByPage(offset int, limit int) (result []*model.TAcaraPesertaStrategicMeeting, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITAcaraPesertaStrategicMeetingDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tAcaraPesertaStrategicMeetingDo) Debug() ITAcaraPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Debug())
}

func (t tAcaraPesertaStrategicMeetingDo) WithContext(ctx context.Context) ITAcaraPesertaStrategicMeetingDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tAcaraPesertaStrategicMeetingDo) ReadDB() ITAcaraPesertaStrategicMeetingDo {
	return t.Clauses(dbresolver.Read)
}

func (t tAcaraPesertaStrategicMeetingDo) WriteDB() ITAcaraPesertaStrategicMeetingDo {
	return t.Clauses(dbresolver.Write)
}

func (t tAcaraPesertaStrategicMeetingDo) Session(config *gorm.Session) ITAcaraPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Session(config))
}

func (t tAcaraPesertaStrategicMeetingDo) Clauses(conds ...clause.Expression) ITAcaraPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tAcaraPesertaStrategicMeetingDo) Returning(value interface{}, columns ...string) ITAcaraPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tAcaraPesertaStrategicMeetingDo) Not(conds ...gen.Condition) ITAcaraPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tAcaraPesertaStrategicMeetingDo) Or(conds ...gen.Condition) ITAcaraPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tAcaraPesertaStrategicMeetingDo) Select(conds ...field.Expr) ITAcaraPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tAcaraPesertaStrategicMeetingDo) Where(conds ...gen.Condition) ITAcaraPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tAcaraPesertaStrategicMeetingDo) Order(conds ...field.Expr) ITAcaraPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tAcaraPesertaStrategicMeetingDo) Distinct(cols ...field.Expr) ITAcaraPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tAcaraPesertaStrategicMeetingDo) Omit(cols ...field.Expr) ITAcaraPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tAcaraPesertaStrategicMeetingDo) Join(table schema.Tabler, on ...field.Expr) ITAcaraPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tAcaraPesertaStrategicMeetingDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITAcaraPesertaStrategicMeetingDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tAcaraPesertaStrategicMeetingDo) RightJoin(table schema.Tabler, on ...field.Expr) ITAcaraPesertaStrategicMeetingDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tAcaraPesertaStrategicMeetingDo) Group(cols ...field.Expr) ITAcaraPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tAcaraPesertaStrategicMeetingDo) Having(conds ...gen.Condition) ITAcaraPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tAcaraPesertaStrategicMeetingDo) Limit(limit int) ITAcaraPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tAcaraPesertaStrategicMeetingDo) Offset(offset int) ITAcaraPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tAcaraPesertaStrategicMeetingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITAcaraPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tAcaraPesertaStrategicMeetingDo) Unscoped() ITAcaraPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tAcaraPesertaStrategicMeetingDo) Create(values ...*model.TAcaraPesertaStrategicMeeting) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tAcaraPesertaStrategicMeetingDo) CreateInBatches(values []*model.TAcaraPesertaStrategicMeeting, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tAcaraPesertaStrategicMeetingDo) Save(values ...*model.TAcaraPesertaStrategicMeeting) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tAcaraPesertaStrategicMeetingDo) First() (*model.TAcaraPesertaStrategicMeeting, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TAcaraPesertaStrategicMeeting), nil
	}
}

func (t tAcaraPesertaStrategicMeetingDo) Take() (*model.TAcaraPesertaStrategicMeeting, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TAcaraPesertaStrategicMeeting), nil
	}
}

func (t tAcaraPesertaStrategicMeetingDo) Last() (*model.TAcaraPesertaStrategicMeeting, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TAcaraPesertaStrategicMeeting), nil
	}
}

func (t tAcaraPesertaStrategicMeetingDo) Find() ([]*model.TAcaraPesertaStrategicMeeting, error) {
	result, err := t.DO.Find()
	return result.([]*model.TAcaraPesertaStrategicMeeting), err
}

func (t tAcaraPesertaStrategicMeetingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TAcaraPesertaStrategicMeeting, err error) {
	buf := make([]*model.TAcaraPesertaStrategicMeeting, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tAcaraPesertaStrategicMeetingDo) FindInBatches(result *[]*model.TAcaraPesertaStrategicMeeting, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tAcaraPesertaStrategicMeetingDo) Attrs(attrs ...field.AssignExpr) ITAcaraPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tAcaraPesertaStrategicMeetingDo) Assign(attrs ...field.AssignExpr) ITAcaraPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tAcaraPesertaStrategicMeetingDo) Joins(fields ...field.RelationField) ITAcaraPesertaStrategicMeetingDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tAcaraPesertaStrategicMeetingDo) Preload(fields ...field.RelationField) ITAcaraPesertaStrategicMeetingDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tAcaraPesertaStrategicMeetingDo) FirstOrInit() (*model.TAcaraPesertaStrategicMeeting, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TAcaraPesertaStrategicMeeting), nil
	}
}

func (t tAcaraPesertaStrategicMeetingDo) FirstOrCreate() (*model.TAcaraPesertaStrategicMeeting, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TAcaraPesertaStrategicMeeting), nil
	}
}

func (t tAcaraPesertaStrategicMeetingDo) FindByPage(offset int, limit int) (result []*model.TAcaraPesertaStrategicMeeting, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tAcaraPesertaStrategicMeetingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tAcaraPesertaStrategicMeetingDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tAcaraPesertaStrategicMeetingDo) Delete(models ...*model.TAcaraPesertaStrategicMeeting) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tAcaraPesertaStrategicMeetingDo) withDO(do gen.Dao) *tAcaraPesertaStrategicMeetingDo {
	t.DO = *do.(*gen.DO)
	return t
}
