// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-bponline/m/gen/model"
)

func newTAcuanHargaAnggaran(db *gorm.DB, opts ...gen.DOOption) tAcuanHargaAnggaran {
	_tAcuanHargaAnggaran := tAcuanHargaAnggaran{}

	_tAcuanHargaAnggaran.tAcuanHargaAnggaranDo.UseDB(db, opts...)
	_tAcuanHargaAnggaran.tAcuanHargaAnggaranDo.UseModel(&model.TAcuanHargaAnggaran{})

	tableName := _tAcuanHargaAnggaran.tAcuanHargaAnggaranDo.TableName()
	_tAcuanHargaAnggaran.ALL = field.NewAsterisk(tableName)
	_tAcuanHargaAnggaran.CKodeAcuan = field.NewString(tableName, "c_kode_acuan")
	_tAcuanHargaAnggaran.CIDGedung = field.NewInt32(tableName, "c_id_gedung")
	_tAcuanHargaAnggaran.CIDSekolah = field.NewInt32(tableName, "c_id_sekolah")
	_tAcuanHargaAnggaran.CTingkatKelas = field.NewInt32(tableName, "c_tingkat_kelas")
	_tAcuanHargaAnggaran.CBulan = field.NewInt16(tableName, "c_bulan")
	_tAcuanHargaAnggaran.CAcuanHarga = field.NewFloat64(tableName, "c_acuan_harga")
	_tAcuanHargaAnggaran.CUpdater = field.NewString(tableName, "c_updater")
	_tAcuanHargaAnggaran.CLastUpdate = field.NewTime(tableName, "c_last_update")

	_tAcuanHargaAnggaran.fillFieldMap()

	return _tAcuanHargaAnggaran
}

type tAcuanHargaAnggaran struct {
	tAcuanHargaAnggaranDo

	ALL           field.Asterisk
	CKodeAcuan    field.String
	CIDGedung     field.Int32
	CIDSekolah    field.Int32
	CTingkatKelas field.Int32
	CBulan        field.Int16
	CAcuanHarga   field.Float64
	CUpdater      field.String
	CLastUpdate   field.Time

	fieldMap map[string]field.Expr
}

func (t tAcuanHargaAnggaran) Table(newTableName string) *tAcuanHargaAnggaran {
	t.tAcuanHargaAnggaranDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tAcuanHargaAnggaran) As(alias string) *tAcuanHargaAnggaran {
	t.tAcuanHargaAnggaranDo.DO = *(t.tAcuanHargaAnggaranDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tAcuanHargaAnggaran) updateTableName(table string) *tAcuanHargaAnggaran {
	t.ALL = field.NewAsterisk(table)
	t.CKodeAcuan = field.NewString(table, "c_kode_acuan")
	t.CIDGedung = field.NewInt32(table, "c_id_gedung")
	t.CIDSekolah = field.NewInt32(table, "c_id_sekolah")
	t.CTingkatKelas = field.NewInt32(table, "c_tingkat_kelas")
	t.CBulan = field.NewInt16(table, "c_bulan")
	t.CAcuanHarga = field.NewFloat64(table, "c_acuan_harga")
	t.CUpdater = field.NewString(table, "c_updater")
	t.CLastUpdate = field.NewTime(table, "c_last_update")

	t.fillFieldMap()

	return t
}

func (t *tAcuanHargaAnggaran) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tAcuanHargaAnggaran) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 8)
	t.fieldMap["c_kode_acuan"] = t.CKodeAcuan
	t.fieldMap["c_id_gedung"] = t.CIDGedung
	t.fieldMap["c_id_sekolah"] = t.CIDSekolah
	t.fieldMap["c_tingkat_kelas"] = t.CTingkatKelas
	t.fieldMap["c_bulan"] = t.CBulan
	t.fieldMap["c_acuan_harga"] = t.CAcuanHarga
	t.fieldMap["c_updater"] = t.CUpdater
	t.fieldMap["c_last_update"] = t.CLastUpdate
}

func (t tAcuanHargaAnggaran) clone(db *gorm.DB) tAcuanHargaAnggaran {
	t.tAcuanHargaAnggaranDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tAcuanHargaAnggaran) replaceDB(db *gorm.DB) tAcuanHargaAnggaran {
	t.tAcuanHargaAnggaranDo.ReplaceDB(db)
	return t
}

type tAcuanHargaAnggaranDo struct{ gen.DO }

type ITAcuanHargaAnggaranDo interface {
	gen.SubQuery
	Debug() ITAcuanHargaAnggaranDo
	WithContext(ctx context.Context) ITAcuanHargaAnggaranDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITAcuanHargaAnggaranDo
	WriteDB() ITAcuanHargaAnggaranDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITAcuanHargaAnggaranDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITAcuanHargaAnggaranDo
	Not(conds ...gen.Condition) ITAcuanHargaAnggaranDo
	Or(conds ...gen.Condition) ITAcuanHargaAnggaranDo
	Select(conds ...field.Expr) ITAcuanHargaAnggaranDo
	Where(conds ...gen.Condition) ITAcuanHargaAnggaranDo
	Order(conds ...field.Expr) ITAcuanHargaAnggaranDo
	Distinct(cols ...field.Expr) ITAcuanHargaAnggaranDo
	Omit(cols ...field.Expr) ITAcuanHargaAnggaranDo
	Join(table schema.Tabler, on ...field.Expr) ITAcuanHargaAnggaranDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITAcuanHargaAnggaranDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITAcuanHargaAnggaranDo
	Group(cols ...field.Expr) ITAcuanHargaAnggaranDo
	Having(conds ...gen.Condition) ITAcuanHargaAnggaranDo
	Limit(limit int) ITAcuanHargaAnggaranDo
	Offset(offset int) ITAcuanHargaAnggaranDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITAcuanHargaAnggaranDo
	Unscoped() ITAcuanHargaAnggaranDo
	Create(values ...*model.TAcuanHargaAnggaran) error
	CreateInBatches(values []*model.TAcuanHargaAnggaran, batchSize int) error
	Save(values ...*model.TAcuanHargaAnggaran) error
	First() (*model.TAcuanHargaAnggaran, error)
	Take() (*model.TAcuanHargaAnggaran, error)
	Last() (*model.TAcuanHargaAnggaran, error)
	Find() ([]*model.TAcuanHargaAnggaran, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TAcuanHargaAnggaran, err error)
	FindInBatches(result *[]*model.TAcuanHargaAnggaran, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TAcuanHargaAnggaran) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITAcuanHargaAnggaranDo
	Assign(attrs ...field.AssignExpr) ITAcuanHargaAnggaranDo
	Joins(fields ...field.RelationField) ITAcuanHargaAnggaranDo
	Preload(fields ...field.RelationField) ITAcuanHargaAnggaranDo
	FirstOrInit() (*model.TAcuanHargaAnggaran, error)
	FirstOrCreate() (*model.TAcuanHargaAnggaran, error)
	FindByPage(offset int, limit int) (result []*model.TAcuanHargaAnggaran, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITAcuanHargaAnggaranDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tAcuanHargaAnggaranDo) Debug() ITAcuanHargaAnggaranDo {
	return t.withDO(t.DO.Debug())
}

func (t tAcuanHargaAnggaranDo) WithContext(ctx context.Context) ITAcuanHargaAnggaranDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tAcuanHargaAnggaranDo) ReadDB() ITAcuanHargaAnggaranDo {
	return t.Clauses(dbresolver.Read)
}

func (t tAcuanHargaAnggaranDo) WriteDB() ITAcuanHargaAnggaranDo {
	return t.Clauses(dbresolver.Write)
}

func (t tAcuanHargaAnggaranDo) Session(config *gorm.Session) ITAcuanHargaAnggaranDo {
	return t.withDO(t.DO.Session(config))
}

func (t tAcuanHargaAnggaranDo) Clauses(conds ...clause.Expression) ITAcuanHargaAnggaranDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tAcuanHargaAnggaranDo) Returning(value interface{}, columns ...string) ITAcuanHargaAnggaranDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tAcuanHargaAnggaranDo) Not(conds ...gen.Condition) ITAcuanHargaAnggaranDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tAcuanHargaAnggaranDo) Or(conds ...gen.Condition) ITAcuanHargaAnggaranDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tAcuanHargaAnggaranDo) Select(conds ...field.Expr) ITAcuanHargaAnggaranDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tAcuanHargaAnggaranDo) Where(conds ...gen.Condition) ITAcuanHargaAnggaranDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tAcuanHargaAnggaranDo) Order(conds ...field.Expr) ITAcuanHargaAnggaranDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tAcuanHargaAnggaranDo) Distinct(cols ...field.Expr) ITAcuanHargaAnggaranDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tAcuanHargaAnggaranDo) Omit(cols ...field.Expr) ITAcuanHargaAnggaranDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tAcuanHargaAnggaranDo) Join(table schema.Tabler, on ...field.Expr) ITAcuanHargaAnggaranDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tAcuanHargaAnggaranDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITAcuanHargaAnggaranDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tAcuanHargaAnggaranDo) RightJoin(table schema.Tabler, on ...field.Expr) ITAcuanHargaAnggaranDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tAcuanHargaAnggaranDo) Group(cols ...field.Expr) ITAcuanHargaAnggaranDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tAcuanHargaAnggaranDo) Having(conds ...gen.Condition) ITAcuanHargaAnggaranDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tAcuanHargaAnggaranDo) Limit(limit int) ITAcuanHargaAnggaranDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tAcuanHargaAnggaranDo) Offset(offset int) ITAcuanHargaAnggaranDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tAcuanHargaAnggaranDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITAcuanHargaAnggaranDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tAcuanHargaAnggaranDo) Unscoped() ITAcuanHargaAnggaranDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tAcuanHargaAnggaranDo) Create(values ...*model.TAcuanHargaAnggaran) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tAcuanHargaAnggaranDo) CreateInBatches(values []*model.TAcuanHargaAnggaran, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tAcuanHargaAnggaranDo) Save(values ...*model.TAcuanHargaAnggaran) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tAcuanHargaAnggaranDo) First() (*model.TAcuanHargaAnggaran, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TAcuanHargaAnggaran), nil
	}
}

func (t tAcuanHargaAnggaranDo) Take() (*model.TAcuanHargaAnggaran, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TAcuanHargaAnggaran), nil
	}
}

func (t tAcuanHargaAnggaranDo) Last() (*model.TAcuanHargaAnggaran, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TAcuanHargaAnggaran), nil
	}
}

func (t tAcuanHargaAnggaranDo) Find() ([]*model.TAcuanHargaAnggaran, error) {
	result, err := t.DO.Find()
	return result.([]*model.TAcuanHargaAnggaran), err
}

func (t tAcuanHargaAnggaranDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TAcuanHargaAnggaran, err error) {
	buf := make([]*model.TAcuanHargaAnggaran, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tAcuanHargaAnggaranDo) FindInBatches(result *[]*model.TAcuanHargaAnggaran, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tAcuanHargaAnggaranDo) Attrs(attrs ...field.AssignExpr) ITAcuanHargaAnggaranDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tAcuanHargaAnggaranDo) Assign(attrs ...field.AssignExpr) ITAcuanHargaAnggaranDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tAcuanHargaAnggaranDo) Joins(fields ...field.RelationField) ITAcuanHargaAnggaranDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tAcuanHargaAnggaranDo) Preload(fields ...field.RelationField) ITAcuanHargaAnggaranDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tAcuanHargaAnggaranDo) FirstOrInit() (*model.TAcuanHargaAnggaran, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TAcuanHargaAnggaran), nil
	}
}

func (t tAcuanHargaAnggaranDo) FirstOrCreate() (*model.TAcuanHargaAnggaran, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TAcuanHargaAnggaran), nil
	}
}

func (t tAcuanHargaAnggaranDo) FindByPage(offset int, limit int) (result []*model.TAcuanHargaAnggaran, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tAcuanHargaAnggaranDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tAcuanHargaAnggaranDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tAcuanHargaAnggaranDo) Delete(models ...*model.TAcuanHargaAnggaran) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tAcuanHargaAnggaranDo) withDO(do gen.Dao) *tAcuanHargaAnggaranDo {
	t.DO = *do.(*gen.DO)
	return t
}
