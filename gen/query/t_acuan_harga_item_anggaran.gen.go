// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-bponline/m/gen/model"
)

func newTAcuanHargaItemAnggaran(db *gorm.DB, opts ...gen.DOOption) tAcuanHargaItemAnggaran {
	_tAcuanHargaItemAnggaran := tAcuanHargaItemAnggaran{}

	_tAcuanHargaItemAnggaran.tAcuanHargaItemAnggaranDo.UseDB(db, opts...)
	_tAcuanHargaItemAnggaran.tAcuanHargaItemAnggaranDo.UseModel(&model.TAcuanHargaItemAnggaran{})

	tableName := _tAcuanHargaItemAnggaran.tAcuanHargaItemAnggaranDo.TableName()
	_tAcuanHargaItemAnggaran.ALL = field.NewAsterisk(tableName)
	_tAcuanHargaItemAnggaran.CKodeItemAnggaran = field.NewString(tableName, "c_kode_item_anggaran")
	_tAcuanHargaItemAnggaran.CIDPenanda = field.NewInt32(tableName, "c_id_penanda")
	_tAcuanHargaItemAnggaran.CAcuanHarga = field.NewFloat64(tableName, "c_acuan_harga")
	_tAcuanHargaItemAnggaran.CUpdater = field.NewString(tableName, "c_updater")
	_tAcuanHargaItemAnggaran.CLastUpdate = field.NewTime(tableName, "c_last_update")

	_tAcuanHargaItemAnggaran.fillFieldMap()

	return _tAcuanHargaItemAnggaran
}

type tAcuanHargaItemAnggaran struct {
	tAcuanHargaItemAnggaranDo

	ALL               field.Asterisk
	CKodeItemAnggaran field.String
	CIDPenanda        field.Int32
	CAcuanHarga       field.Float64
	CUpdater          field.String
	CLastUpdate       field.Time

	fieldMap map[string]field.Expr
}

func (t tAcuanHargaItemAnggaran) Table(newTableName string) *tAcuanHargaItemAnggaran {
	t.tAcuanHargaItemAnggaranDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tAcuanHargaItemAnggaran) As(alias string) *tAcuanHargaItemAnggaran {
	t.tAcuanHargaItemAnggaranDo.DO = *(t.tAcuanHargaItemAnggaranDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tAcuanHargaItemAnggaran) updateTableName(table string) *tAcuanHargaItemAnggaran {
	t.ALL = field.NewAsterisk(table)
	t.CKodeItemAnggaran = field.NewString(table, "c_kode_item_anggaran")
	t.CIDPenanda = field.NewInt32(table, "c_id_penanda")
	t.CAcuanHarga = field.NewFloat64(table, "c_acuan_harga")
	t.CUpdater = field.NewString(table, "c_updater")
	t.CLastUpdate = field.NewTime(table, "c_last_update")

	t.fillFieldMap()

	return t
}

func (t *tAcuanHargaItemAnggaran) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tAcuanHargaItemAnggaran) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 5)
	t.fieldMap["c_kode_item_anggaran"] = t.CKodeItemAnggaran
	t.fieldMap["c_id_penanda"] = t.CIDPenanda
	t.fieldMap["c_acuan_harga"] = t.CAcuanHarga
	t.fieldMap["c_updater"] = t.CUpdater
	t.fieldMap["c_last_update"] = t.CLastUpdate
}

func (t tAcuanHargaItemAnggaran) clone(db *gorm.DB) tAcuanHargaItemAnggaran {
	t.tAcuanHargaItemAnggaranDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tAcuanHargaItemAnggaran) replaceDB(db *gorm.DB) tAcuanHargaItemAnggaran {
	t.tAcuanHargaItemAnggaranDo.ReplaceDB(db)
	return t
}

type tAcuanHargaItemAnggaranDo struct{ gen.DO }

type ITAcuanHargaItemAnggaranDo interface {
	gen.SubQuery
	Debug() ITAcuanHargaItemAnggaranDo
	WithContext(ctx context.Context) ITAcuanHargaItemAnggaranDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITAcuanHargaItemAnggaranDo
	WriteDB() ITAcuanHargaItemAnggaranDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITAcuanHargaItemAnggaranDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITAcuanHargaItemAnggaranDo
	Not(conds ...gen.Condition) ITAcuanHargaItemAnggaranDo
	Or(conds ...gen.Condition) ITAcuanHargaItemAnggaranDo
	Select(conds ...field.Expr) ITAcuanHargaItemAnggaranDo
	Where(conds ...gen.Condition) ITAcuanHargaItemAnggaranDo
	Order(conds ...field.Expr) ITAcuanHargaItemAnggaranDo
	Distinct(cols ...field.Expr) ITAcuanHargaItemAnggaranDo
	Omit(cols ...field.Expr) ITAcuanHargaItemAnggaranDo
	Join(table schema.Tabler, on ...field.Expr) ITAcuanHargaItemAnggaranDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITAcuanHargaItemAnggaranDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITAcuanHargaItemAnggaranDo
	Group(cols ...field.Expr) ITAcuanHargaItemAnggaranDo
	Having(conds ...gen.Condition) ITAcuanHargaItemAnggaranDo
	Limit(limit int) ITAcuanHargaItemAnggaranDo
	Offset(offset int) ITAcuanHargaItemAnggaranDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITAcuanHargaItemAnggaranDo
	Unscoped() ITAcuanHargaItemAnggaranDo
	Create(values ...*model.TAcuanHargaItemAnggaran) error
	CreateInBatches(values []*model.TAcuanHargaItemAnggaran, batchSize int) error
	Save(values ...*model.TAcuanHargaItemAnggaran) error
	First() (*model.TAcuanHargaItemAnggaran, error)
	Take() (*model.TAcuanHargaItemAnggaran, error)
	Last() (*model.TAcuanHargaItemAnggaran, error)
	Find() ([]*model.TAcuanHargaItemAnggaran, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TAcuanHargaItemAnggaran, err error)
	FindInBatches(result *[]*model.TAcuanHargaItemAnggaran, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TAcuanHargaItemAnggaran) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITAcuanHargaItemAnggaranDo
	Assign(attrs ...field.AssignExpr) ITAcuanHargaItemAnggaranDo
	Joins(fields ...field.RelationField) ITAcuanHargaItemAnggaranDo
	Preload(fields ...field.RelationField) ITAcuanHargaItemAnggaranDo
	FirstOrInit() (*model.TAcuanHargaItemAnggaran, error)
	FirstOrCreate() (*model.TAcuanHargaItemAnggaran, error)
	FindByPage(offset int, limit int) (result []*model.TAcuanHargaItemAnggaran, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITAcuanHargaItemAnggaranDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tAcuanHargaItemAnggaranDo) Debug() ITAcuanHargaItemAnggaranDo {
	return t.withDO(t.DO.Debug())
}

func (t tAcuanHargaItemAnggaranDo) WithContext(ctx context.Context) ITAcuanHargaItemAnggaranDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tAcuanHargaItemAnggaranDo) ReadDB() ITAcuanHargaItemAnggaranDo {
	return t.Clauses(dbresolver.Read)
}

func (t tAcuanHargaItemAnggaranDo) WriteDB() ITAcuanHargaItemAnggaranDo {
	return t.Clauses(dbresolver.Write)
}

func (t tAcuanHargaItemAnggaranDo) Session(config *gorm.Session) ITAcuanHargaItemAnggaranDo {
	return t.withDO(t.DO.Session(config))
}

func (t tAcuanHargaItemAnggaranDo) Clauses(conds ...clause.Expression) ITAcuanHargaItemAnggaranDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tAcuanHargaItemAnggaranDo) Returning(value interface{}, columns ...string) ITAcuanHargaItemAnggaranDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tAcuanHargaItemAnggaranDo) Not(conds ...gen.Condition) ITAcuanHargaItemAnggaranDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tAcuanHargaItemAnggaranDo) Or(conds ...gen.Condition) ITAcuanHargaItemAnggaranDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tAcuanHargaItemAnggaranDo) Select(conds ...field.Expr) ITAcuanHargaItemAnggaranDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tAcuanHargaItemAnggaranDo) Where(conds ...gen.Condition) ITAcuanHargaItemAnggaranDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tAcuanHargaItemAnggaranDo) Order(conds ...field.Expr) ITAcuanHargaItemAnggaranDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tAcuanHargaItemAnggaranDo) Distinct(cols ...field.Expr) ITAcuanHargaItemAnggaranDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tAcuanHargaItemAnggaranDo) Omit(cols ...field.Expr) ITAcuanHargaItemAnggaranDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tAcuanHargaItemAnggaranDo) Join(table schema.Tabler, on ...field.Expr) ITAcuanHargaItemAnggaranDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tAcuanHargaItemAnggaranDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITAcuanHargaItemAnggaranDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tAcuanHargaItemAnggaranDo) RightJoin(table schema.Tabler, on ...field.Expr) ITAcuanHargaItemAnggaranDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tAcuanHargaItemAnggaranDo) Group(cols ...field.Expr) ITAcuanHargaItemAnggaranDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tAcuanHargaItemAnggaranDo) Having(conds ...gen.Condition) ITAcuanHargaItemAnggaranDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tAcuanHargaItemAnggaranDo) Limit(limit int) ITAcuanHargaItemAnggaranDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tAcuanHargaItemAnggaranDo) Offset(offset int) ITAcuanHargaItemAnggaranDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tAcuanHargaItemAnggaranDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITAcuanHargaItemAnggaranDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tAcuanHargaItemAnggaranDo) Unscoped() ITAcuanHargaItemAnggaranDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tAcuanHargaItemAnggaranDo) Create(values ...*model.TAcuanHargaItemAnggaran) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tAcuanHargaItemAnggaranDo) CreateInBatches(values []*model.TAcuanHargaItemAnggaran, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tAcuanHargaItemAnggaranDo) Save(values ...*model.TAcuanHargaItemAnggaran) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tAcuanHargaItemAnggaranDo) First() (*model.TAcuanHargaItemAnggaran, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TAcuanHargaItemAnggaran), nil
	}
}

func (t tAcuanHargaItemAnggaranDo) Take() (*model.TAcuanHargaItemAnggaran, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TAcuanHargaItemAnggaran), nil
	}
}

func (t tAcuanHargaItemAnggaranDo) Last() (*model.TAcuanHargaItemAnggaran, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TAcuanHargaItemAnggaran), nil
	}
}

func (t tAcuanHargaItemAnggaranDo) Find() ([]*model.TAcuanHargaItemAnggaran, error) {
	result, err := t.DO.Find()
	return result.([]*model.TAcuanHargaItemAnggaran), err
}

func (t tAcuanHargaItemAnggaranDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TAcuanHargaItemAnggaran, err error) {
	buf := make([]*model.TAcuanHargaItemAnggaran, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tAcuanHargaItemAnggaranDo) FindInBatches(result *[]*model.TAcuanHargaItemAnggaran, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tAcuanHargaItemAnggaranDo) Attrs(attrs ...field.AssignExpr) ITAcuanHargaItemAnggaranDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tAcuanHargaItemAnggaranDo) Assign(attrs ...field.AssignExpr) ITAcuanHargaItemAnggaranDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tAcuanHargaItemAnggaranDo) Joins(fields ...field.RelationField) ITAcuanHargaItemAnggaranDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tAcuanHargaItemAnggaranDo) Preload(fields ...field.RelationField) ITAcuanHargaItemAnggaranDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tAcuanHargaItemAnggaranDo) FirstOrInit() (*model.TAcuanHargaItemAnggaran, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TAcuanHargaItemAnggaran), nil
	}
}

func (t tAcuanHargaItemAnggaranDo) FirstOrCreate() (*model.TAcuanHargaItemAnggaran, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TAcuanHargaItemAnggaran), nil
	}
}

func (t tAcuanHargaItemAnggaranDo) FindByPage(offset int, limit int) (result []*model.TAcuanHargaItemAnggaran, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tAcuanHargaItemAnggaranDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tAcuanHargaItemAnggaranDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tAcuanHargaItemAnggaranDo) Delete(models ...*model.TAcuanHargaItemAnggaran) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tAcuanHargaItemAnggaranDo) withDO(do gen.Dao) *tAcuanHargaItemAnggaranDo {
	t.DO = *do.(*gen.DO)
	return t
}
