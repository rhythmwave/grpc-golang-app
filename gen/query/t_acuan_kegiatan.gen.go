// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-bponline/m/gen/model"
)

func newTAcuanKegiatan(db *gorm.DB, opts ...gen.DOOption) tAcuanKegiatan {
	_tAcuanKegiatan := tAcuanKegiatan{}

	_tAcuanKegiatan.tAcuanKegiatanDo.UseDB(db, opts...)
	_tAcuanKegiatan.tAcuanKegiatanDo.UseModel(&model.TAcuanKegiatan{})

	tableName := _tAcuanKegiatan.tAcuanKegiatanDo.TableName()
	_tAcuanKegiatan.ALL = field.NewAsterisk(tableName)
	_tAcuanKegiatan.CKodeAcuan = field.NewString(tableName, "c_kode_acuan")
	_tAcuanKegiatan.CKodeKelBarang = field.NewString(tableName, "c_kode_kel_barang")
	_tAcuanKegiatan.CKodeKelAnggaran = field.NewString(tableName, "c_kode_kel_anggaran")
	_tAcuanKegiatan.CKodeKepanitiaan = field.NewString(tableName, "c_kode_kepanitiaan")
	_tAcuanKegiatan.CBidangPenanggungJawab = field.NewInt32(tableName, "c_bidang_penanggung_jawab")
	_tAcuanKegiatan.CBidangTerkait = field.NewString(tableName, "c_bidang_terkait")
	_tAcuanKegiatan.CNamaKegiatan = field.NewString(tableName, "c_nama_kegiatan")
	_tAcuanKegiatan.CUpline = field.NewString(tableName, "c_upline")
	_tAcuanKegiatan.CIsPromosi = field.NewInt16(tableName, "c_is_promosi")
	_tAcuanKegiatan.CIsPusat = field.NewInt16(tableName, "c_is_pusat")
	_tAcuanKegiatan.CStatus = field.NewString(tableName, "c_status")
	_tAcuanKegiatan.CUpdater = field.NewString(tableName, "c_updater")
	_tAcuanKegiatan.CLastUpdate = field.NewTime(tableName, "c_last_update")

	_tAcuanKegiatan.fillFieldMap()

	return _tAcuanKegiatan
}

type tAcuanKegiatan struct {
	tAcuanKegiatanDo

	ALL                    field.Asterisk
	CKodeAcuan             field.String
	CKodeKelBarang         field.String
	CKodeKelAnggaran       field.String
	CKodeKepanitiaan       field.String
	CBidangPenanggungJawab field.Int32
	CBidangTerkait         field.String
	CNamaKegiatan          field.String
	CUpline                field.String
	CIsPromosi             field.Int16
	CIsPusat               field.Int16
	CStatus                field.String
	CUpdater               field.String
	CLastUpdate            field.Time

	fieldMap map[string]field.Expr
}

func (t tAcuanKegiatan) Table(newTableName string) *tAcuanKegiatan {
	t.tAcuanKegiatanDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tAcuanKegiatan) As(alias string) *tAcuanKegiatan {
	t.tAcuanKegiatanDo.DO = *(t.tAcuanKegiatanDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tAcuanKegiatan) updateTableName(table string) *tAcuanKegiatan {
	t.ALL = field.NewAsterisk(table)
	t.CKodeAcuan = field.NewString(table, "c_kode_acuan")
	t.CKodeKelBarang = field.NewString(table, "c_kode_kel_barang")
	t.CKodeKelAnggaran = field.NewString(table, "c_kode_kel_anggaran")
	t.CKodeKepanitiaan = field.NewString(table, "c_kode_kepanitiaan")
	t.CBidangPenanggungJawab = field.NewInt32(table, "c_bidang_penanggung_jawab")
	t.CBidangTerkait = field.NewString(table, "c_bidang_terkait")
	t.CNamaKegiatan = field.NewString(table, "c_nama_kegiatan")
	t.CUpline = field.NewString(table, "c_upline")
	t.CIsPromosi = field.NewInt16(table, "c_is_promosi")
	t.CIsPusat = field.NewInt16(table, "c_is_pusat")
	t.CStatus = field.NewString(table, "c_status")
	t.CUpdater = field.NewString(table, "c_updater")
	t.CLastUpdate = field.NewTime(table, "c_last_update")

	t.fillFieldMap()

	return t
}

func (t *tAcuanKegiatan) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tAcuanKegiatan) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 13)
	t.fieldMap["c_kode_acuan"] = t.CKodeAcuan
	t.fieldMap["c_kode_kel_barang"] = t.CKodeKelBarang
	t.fieldMap["c_kode_kel_anggaran"] = t.CKodeKelAnggaran
	t.fieldMap["c_kode_kepanitiaan"] = t.CKodeKepanitiaan
	t.fieldMap["c_bidang_penanggung_jawab"] = t.CBidangPenanggungJawab
	t.fieldMap["c_bidang_terkait"] = t.CBidangTerkait
	t.fieldMap["c_nama_kegiatan"] = t.CNamaKegiatan
	t.fieldMap["c_upline"] = t.CUpline
	t.fieldMap["c_is_promosi"] = t.CIsPromosi
	t.fieldMap["c_is_pusat"] = t.CIsPusat
	t.fieldMap["c_status"] = t.CStatus
	t.fieldMap["c_updater"] = t.CUpdater
	t.fieldMap["c_last_update"] = t.CLastUpdate
}

func (t tAcuanKegiatan) clone(db *gorm.DB) tAcuanKegiatan {
	t.tAcuanKegiatanDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tAcuanKegiatan) replaceDB(db *gorm.DB) tAcuanKegiatan {
	t.tAcuanKegiatanDo.ReplaceDB(db)
	return t
}

type tAcuanKegiatanDo struct{ gen.DO }

type ITAcuanKegiatanDo interface {
	gen.SubQuery
	Debug() ITAcuanKegiatanDo
	WithContext(ctx context.Context) ITAcuanKegiatanDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITAcuanKegiatanDo
	WriteDB() ITAcuanKegiatanDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITAcuanKegiatanDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITAcuanKegiatanDo
	Not(conds ...gen.Condition) ITAcuanKegiatanDo
	Or(conds ...gen.Condition) ITAcuanKegiatanDo
	Select(conds ...field.Expr) ITAcuanKegiatanDo
	Where(conds ...gen.Condition) ITAcuanKegiatanDo
	Order(conds ...field.Expr) ITAcuanKegiatanDo
	Distinct(cols ...field.Expr) ITAcuanKegiatanDo
	Omit(cols ...field.Expr) ITAcuanKegiatanDo
	Join(table schema.Tabler, on ...field.Expr) ITAcuanKegiatanDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITAcuanKegiatanDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITAcuanKegiatanDo
	Group(cols ...field.Expr) ITAcuanKegiatanDo
	Having(conds ...gen.Condition) ITAcuanKegiatanDo
	Limit(limit int) ITAcuanKegiatanDo
	Offset(offset int) ITAcuanKegiatanDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITAcuanKegiatanDo
	Unscoped() ITAcuanKegiatanDo
	Create(values ...*model.TAcuanKegiatan) error
	CreateInBatches(values []*model.TAcuanKegiatan, batchSize int) error
	Save(values ...*model.TAcuanKegiatan) error
	First() (*model.TAcuanKegiatan, error)
	Take() (*model.TAcuanKegiatan, error)
	Last() (*model.TAcuanKegiatan, error)
	Find() ([]*model.TAcuanKegiatan, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TAcuanKegiatan, err error)
	FindInBatches(result *[]*model.TAcuanKegiatan, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TAcuanKegiatan) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITAcuanKegiatanDo
	Assign(attrs ...field.AssignExpr) ITAcuanKegiatanDo
	Joins(fields ...field.RelationField) ITAcuanKegiatanDo
	Preload(fields ...field.RelationField) ITAcuanKegiatanDo
	FirstOrInit() (*model.TAcuanKegiatan, error)
	FirstOrCreate() (*model.TAcuanKegiatan, error)
	FindByPage(offset int, limit int) (result []*model.TAcuanKegiatan, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITAcuanKegiatanDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tAcuanKegiatanDo) Debug() ITAcuanKegiatanDo {
	return t.withDO(t.DO.Debug())
}

func (t tAcuanKegiatanDo) WithContext(ctx context.Context) ITAcuanKegiatanDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tAcuanKegiatanDo) ReadDB() ITAcuanKegiatanDo {
	return t.Clauses(dbresolver.Read)
}

func (t tAcuanKegiatanDo) WriteDB() ITAcuanKegiatanDo {
	return t.Clauses(dbresolver.Write)
}

func (t tAcuanKegiatanDo) Session(config *gorm.Session) ITAcuanKegiatanDo {
	return t.withDO(t.DO.Session(config))
}

func (t tAcuanKegiatanDo) Clauses(conds ...clause.Expression) ITAcuanKegiatanDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tAcuanKegiatanDo) Returning(value interface{}, columns ...string) ITAcuanKegiatanDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tAcuanKegiatanDo) Not(conds ...gen.Condition) ITAcuanKegiatanDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tAcuanKegiatanDo) Or(conds ...gen.Condition) ITAcuanKegiatanDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tAcuanKegiatanDo) Select(conds ...field.Expr) ITAcuanKegiatanDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tAcuanKegiatanDo) Where(conds ...gen.Condition) ITAcuanKegiatanDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tAcuanKegiatanDo) Order(conds ...field.Expr) ITAcuanKegiatanDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tAcuanKegiatanDo) Distinct(cols ...field.Expr) ITAcuanKegiatanDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tAcuanKegiatanDo) Omit(cols ...field.Expr) ITAcuanKegiatanDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tAcuanKegiatanDo) Join(table schema.Tabler, on ...field.Expr) ITAcuanKegiatanDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tAcuanKegiatanDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITAcuanKegiatanDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tAcuanKegiatanDo) RightJoin(table schema.Tabler, on ...field.Expr) ITAcuanKegiatanDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tAcuanKegiatanDo) Group(cols ...field.Expr) ITAcuanKegiatanDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tAcuanKegiatanDo) Having(conds ...gen.Condition) ITAcuanKegiatanDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tAcuanKegiatanDo) Limit(limit int) ITAcuanKegiatanDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tAcuanKegiatanDo) Offset(offset int) ITAcuanKegiatanDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tAcuanKegiatanDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITAcuanKegiatanDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tAcuanKegiatanDo) Unscoped() ITAcuanKegiatanDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tAcuanKegiatanDo) Create(values ...*model.TAcuanKegiatan) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tAcuanKegiatanDo) CreateInBatches(values []*model.TAcuanKegiatan, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tAcuanKegiatanDo) Save(values ...*model.TAcuanKegiatan) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tAcuanKegiatanDo) First() (*model.TAcuanKegiatan, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TAcuanKegiatan), nil
	}
}

func (t tAcuanKegiatanDo) Take() (*model.TAcuanKegiatan, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TAcuanKegiatan), nil
	}
}

func (t tAcuanKegiatanDo) Last() (*model.TAcuanKegiatan, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TAcuanKegiatan), nil
	}
}

func (t tAcuanKegiatanDo) Find() ([]*model.TAcuanKegiatan, error) {
	result, err := t.DO.Find()
	return result.([]*model.TAcuanKegiatan), err
}

func (t tAcuanKegiatanDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TAcuanKegiatan, err error) {
	buf := make([]*model.TAcuanKegiatan, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tAcuanKegiatanDo) FindInBatches(result *[]*model.TAcuanKegiatan, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tAcuanKegiatanDo) Attrs(attrs ...field.AssignExpr) ITAcuanKegiatanDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tAcuanKegiatanDo) Assign(attrs ...field.AssignExpr) ITAcuanKegiatanDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tAcuanKegiatanDo) Joins(fields ...field.RelationField) ITAcuanKegiatanDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tAcuanKegiatanDo) Preload(fields ...field.RelationField) ITAcuanKegiatanDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tAcuanKegiatanDo) FirstOrInit() (*model.TAcuanKegiatan, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TAcuanKegiatan), nil
	}
}

func (t tAcuanKegiatanDo) FirstOrCreate() (*model.TAcuanKegiatan, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TAcuanKegiatan), nil
	}
}

func (t tAcuanKegiatanDo) FindByPage(offset int, limit int) (result []*model.TAcuanKegiatan, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tAcuanKegiatanDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tAcuanKegiatanDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tAcuanKegiatanDo) Delete(models ...*model.TAcuanKegiatan) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tAcuanKegiatanDo) withDO(do gen.Dao) *tAcuanKegiatanDo {
	t.DO = *do.(*gen.DO)
	return t
}
