// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-bponline/m/gen/model"
)

func newTAcuanKegiatanTahunan(db *gorm.DB, opts ...gen.DOOption) tAcuanKegiatanTahunan {
	_tAcuanKegiatanTahunan := tAcuanKegiatanTahunan{}

	_tAcuanKegiatanTahunan.tAcuanKegiatanTahunanDo.UseDB(db, opts...)
	_tAcuanKegiatanTahunan.tAcuanKegiatanTahunanDo.UseModel(&model.TAcuanKegiatanTahunan{})

	tableName := _tAcuanKegiatanTahunan.tAcuanKegiatanTahunanDo.TableName()
	_tAcuanKegiatanTahunan.ALL = field.NewAsterisk(tableName)
	_tAcuanKegiatanTahunan.CKodeAcuan = field.NewString(tableName, "c_kode_acuan")
	_tAcuanKegiatanTahunan.CTahunAjaran = field.NewString(tableName, "c_tahun_ajaran")
	_tAcuanKegiatanTahunan.CTanggalAwal = field.NewTime(tableName, "c_tanggal_awal")
	_tAcuanKegiatanTahunan.CTanggalAkhir = field.NewTime(tableName, "c_tanggal_akhir")
	_tAcuanKegiatanTahunan.CUpdater = field.NewString(tableName, "c_updater")
	_tAcuanKegiatanTahunan.CLastUpdate = field.NewTime(tableName, "c_last_update")

	_tAcuanKegiatanTahunan.fillFieldMap()

	return _tAcuanKegiatanTahunan
}

type tAcuanKegiatanTahunan struct {
	tAcuanKegiatanTahunanDo

	ALL           field.Asterisk
	CKodeAcuan    field.String
	CTahunAjaran  field.String
	CTanggalAwal  field.Time
	CTanggalAkhir field.Time
	CUpdater      field.String
	CLastUpdate   field.Time

	fieldMap map[string]field.Expr
}

func (t tAcuanKegiatanTahunan) Table(newTableName string) *tAcuanKegiatanTahunan {
	t.tAcuanKegiatanTahunanDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tAcuanKegiatanTahunan) As(alias string) *tAcuanKegiatanTahunan {
	t.tAcuanKegiatanTahunanDo.DO = *(t.tAcuanKegiatanTahunanDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tAcuanKegiatanTahunan) updateTableName(table string) *tAcuanKegiatanTahunan {
	t.ALL = field.NewAsterisk(table)
	t.CKodeAcuan = field.NewString(table, "c_kode_acuan")
	t.CTahunAjaran = field.NewString(table, "c_tahun_ajaran")
	t.CTanggalAwal = field.NewTime(table, "c_tanggal_awal")
	t.CTanggalAkhir = field.NewTime(table, "c_tanggal_akhir")
	t.CUpdater = field.NewString(table, "c_updater")
	t.CLastUpdate = field.NewTime(table, "c_last_update")

	t.fillFieldMap()

	return t
}

func (t *tAcuanKegiatanTahunan) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tAcuanKegiatanTahunan) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 6)
	t.fieldMap["c_kode_acuan"] = t.CKodeAcuan
	t.fieldMap["c_tahun_ajaran"] = t.CTahunAjaran
	t.fieldMap["c_tanggal_awal"] = t.CTanggalAwal
	t.fieldMap["c_tanggal_akhir"] = t.CTanggalAkhir
	t.fieldMap["c_updater"] = t.CUpdater
	t.fieldMap["c_last_update"] = t.CLastUpdate
}

func (t tAcuanKegiatanTahunan) clone(db *gorm.DB) tAcuanKegiatanTahunan {
	t.tAcuanKegiatanTahunanDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tAcuanKegiatanTahunan) replaceDB(db *gorm.DB) tAcuanKegiatanTahunan {
	t.tAcuanKegiatanTahunanDo.ReplaceDB(db)
	return t
}

type tAcuanKegiatanTahunanDo struct{ gen.DO }

type ITAcuanKegiatanTahunanDo interface {
	gen.SubQuery
	Debug() ITAcuanKegiatanTahunanDo
	WithContext(ctx context.Context) ITAcuanKegiatanTahunanDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITAcuanKegiatanTahunanDo
	WriteDB() ITAcuanKegiatanTahunanDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITAcuanKegiatanTahunanDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITAcuanKegiatanTahunanDo
	Not(conds ...gen.Condition) ITAcuanKegiatanTahunanDo
	Or(conds ...gen.Condition) ITAcuanKegiatanTahunanDo
	Select(conds ...field.Expr) ITAcuanKegiatanTahunanDo
	Where(conds ...gen.Condition) ITAcuanKegiatanTahunanDo
	Order(conds ...field.Expr) ITAcuanKegiatanTahunanDo
	Distinct(cols ...field.Expr) ITAcuanKegiatanTahunanDo
	Omit(cols ...field.Expr) ITAcuanKegiatanTahunanDo
	Join(table schema.Tabler, on ...field.Expr) ITAcuanKegiatanTahunanDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITAcuanKegiatanTahunanDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITAcuanKegiatanTahunanDo
	Group(cols ...field.Expr) ITAcuanKegiatanTahunanDo
	Having(conds ...gen.Condition) ITAcuanKegiatanTahunanDo
	Limit(limit int) ITAcuanKegiatanTahunanDo
	Offset(offset int) ITAcuanKegiatanTahunanDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITAcuanKegiatanTahunanDo
	Unscoped() ITAcuanKegiatanTahunanDo
	Create(values ...*model.TAcuanKegiatanTahunan) error
	CreateInBatches(values []*model.TAcuanKegiatanTahunan, batchSize int) error
	Save(values ...*model.TAcuanKegiatanTahunan) error
	First() (*model.TAcuanKegiatanTahunan, error)
	Take() (*model.TAcuanKegiatanTahunan, error)
	Last() (*model.TAcuanKegiatanTahunan, error)
	Find() ([]*model.TAcuanKegiatanTahunan, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TAcuanKegiatanTahunan, err error)
	FindInBatches(result *[]*model.TAcuanKegiatanTahunan, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TAcuanKegiatanTahunan) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITAcuanKegiatanTahunanDo
	Assign(attrs ...field.AssignExpr) ITAcuanKegiatanTahunanDo
	Joins(fields ...field.RelationField) ITAcuanKegiatanTahunanDo
	Preload(fields ...field.RelationField) ITAcuanKegiatanTahunanDo
	FirstOrInit() (*model.TAcuanKegiatanTahunan, error)
	FirstOrCreate() (*model.TAcuanKegiatanTahunan, error)
	FindByPage(offset int, limit int) (result []*model.TAcuanKegiatanTahunan, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITAcuanKegiatanTahunanDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tAcuanKegiatanTahunanDo) Debug() ITAcuanKegiatanTahunanDo {
	return t.withDO(t.DO.Debug())
}

func (t tAcuanKegiatanTahunanDo) WithContext(ctx context.Context) ITAcuanKegiatanTahunanDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tAcuanKegiatanTahunanDo) ReadDB() ITAcuanKegiatanTahunanDo {
	return t.Clauses(dbresolver.Read)
}

func (t tAcuanKegiatanTahunanDo) WriteDB() ITAcuanKegiatanTahunanDo {
	return t.Clauses(dbresolver.Write)
}

func (t tAcuanKegiatanTahunanDo) Session(config *gorm.Session) ITAcuanKegiatanTahunanDo {
	return t.withDO(t.DO.Session(config))
}

func (t tAcuanKegiatanTahunanDo) Clauses(conds ...clause.Expression) ITAcuanKegiatanTahunanDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tAcuanKegiatanTahunanDo) Returning(value interface{}, columns ...string) ITAcuanKegiatanTahunanDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tAcuanKegiatanTahunanDo) Not(conds ...gen.Condition) ITAcuanKegiatanTahunanDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tAcuanKegiatanTahunanDo) Or(conds ...gen.Condition) ITAcuanKegiatanTahunanDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tAcuanKegiatanTahunanDo) Select(conds ...field.Expr) ITAcuanKegiatanTahunanDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tAcuanKegiatanTahunanDo) Where(conds ...gen.Condition) ITAcuanKegiatanTahunanDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tAcuanKegiatanTahunanDo) Order(conds ...field.Expr) ITAcuanKegiatanTahunanDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tAcuanKegiatanTahunanDo) Distinct(cols ...field.Expr) ITAcuanKegiatanTahunanDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tAcuanKegiatanTahunanDo) Omit(cols ...field.Expr) ITAcuanKegiatanTahunanDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tAcuanKegiatanTahunanDo) Join(table schema.Tabler, on ...field.Expr) ITAcuanKegiatanTahunanDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tAcuanKegiatanTahunanDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITAcuanKegiatanTahunanDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tAcuanKegiatanTahunanDo) RightJoin(table schema.Tabler, on ...field.Expr) ITAcuanKegiatanTahunanDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tAcuanKegiatanTahunanDo) Group(cols ...field.Expr) ITAcuanKegiatanTahunanDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tAcuanKegiatanTahunanDo) Having(conds ...gen.Condition) ITAcuanKegiatanTahunanDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tAcuanKegiatanTahunanDo) Limit(limit int) ITAcuanKegiatanTahunanDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tAcuanKegiatanTahunanDo) Offset(offset int) ITAcuanKegiatanTahunanDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tAcuanKegiatanTahunanDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITAcuanKegiatanTahunanDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tAcuanKegiatanTahunanDo) Unscoped() ITAcuanKegiatanTahunanDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tAcuanKegiatanTahunanDo) Create(values ...*model.TAcuanKegiatanTahunan) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tAcuanKegiatanTahunanDo) CreateInBatches(values []*model.TAcuanKegiatanTahunan, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tAcuanKegiatanTahunanDo) Save(values ...*model.TAcuanKegiatanTahunan) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tAcuanKegiatanTahunanDo) First() (*model.TAcuanKegiatanTahunan, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TAcuanKegiatanTahunan), nil
	}
}

func (t tAcuanKegiatanTahunanDo) Take() (*model.TAcuanKegiatanTahunan, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TAcuanKegiatanTahunan), nil
	}
}

func (t tAcuanKegiatanTahunanDo) Last() (*model.TAcuanKegiatanTahunan, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TAcuanKegiatanTahunan), nil
	}
}

func (t tAcuanKegiatanTahunanDo) Find() ([]*model.TAcuanKegiatanTahunan, error) {
	result, err := t.DO.Find()
	return result.([]*model.TAcuanKegiatanTahunan), err
}

func (t tAcuanKegiatanTahunanDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TAcuanKegiatanTahunan, err error) {
	buf := make([]*model.TAcuanKegiatanTahunan, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tAcuanKegiatanTahunanDo) FindInBatches(result *[]*model.TAcuanKegiatanTahunan, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tAcuanKegiatanTahunanDo) Attrs(attrs ...field.AssignExpr) ITAcuanKegiatanTahunanDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tAcuanKegiatanTahunanDo) Assign(attrs ...field.AssignExpr) ITAcuanKegiatanTahunanDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tAcuanKegiatanTahunanDo) Joins(fields ...field.RelationField) ITAcuanKegiatanTahunanDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tAcuanKegiatanTahunanDo) Preload(fields ...field.RelationField) ITAcuanKegiatanTahunanDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tAcuanKegiatanTahunanDo) FirstOrInit() (*model.TAcuanKegiatanTahunan, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TAcuanKegiatanTahunan), nil
	}
}

func (t tAcuanKegiatanTahunanDo) FirstOrCreate() (*model.TAcuanKegiatanTahunan, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TAcuanKegiatanTahunan), nil
	}
}

func (t tAcuanKegiatanTahunanDo) FindByPage(offset int, limit int) (result []*model.TAcuanKegiatanTahunan, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tAcuanKegiatanTahunanDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tAcuanKegiatanTahunanDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tAcuanKegiatanTahunanDo) Delete(models ...*model.TAcuanKegiatanTahunan) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tAcuanKegiatanTahunanDo) withDO(do gen.Dao) *tAcuanKegiatanTahunanDo {
	t.DO = *do.(*gen.DO)
	return t
}
