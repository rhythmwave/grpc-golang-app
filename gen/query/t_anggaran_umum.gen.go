// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-bponline/m/gen/model"
)

func newTAnggaranUmum(db *gorm.DB, opts ...gen.DOOption) tAnggaranUmum {
	_tAnggaranUmum := tAnggaranUmum{}

	_tAnggaranUmum.tAnggaranUmumDo.UseDB(db, opts...)
	_tAnggaranUmum.tAnggaranUmumDo.UseModel(&model.TAnggaranUmum{})

	tableName := _tAnggaranUmum.tAnggaranUmumDo.TableName()
	_tAnggaranUmum.ALL = field.NewAsterisk(tableName)
	_tAnggaranUmum.CIDKegiatan = field.NewInt32(tableName, "c_id_kegiatan")
	_tAnggaranUmum.CJumlah = field.NewFloat64(tableName, "c_jumlah")

	_tAnggaranUmum.fillFieldMap()

	return _tAnggaranUmum
}

type tAnggaranUmum struct {
	tAnggaranUmumDo

	ALL         field.Asterisk
	CIDKegiatan field.Int32
	CJumlah     field.Float64

	fieldMap map[string]field.Expr
}

func (t tAnggaranUmum) Table(newTableName string) *tAnggaranUmum {
	t.tAnggaranUmumDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tAnggaranUmum) As(alias string) *tAnggaranUmum {
	t.tAnggaranUmumDo.DO = *(t.tAnggaranUmumDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tAnggaranUmum) updateTableName(table string) *tAnggaranUmum {
	t.ALL = field.NewAsterisk(table)
	t.CIDKegiatan = field.NewInt32(table, "c_id_kegiatan")
	t.CJumlah = field.NewFloat64(table, "c_jumlah")

	t.fillFieldMap()

	return t
}

func (t *tAnggaranUmum) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tAnggaranUmum) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 2)
	t.fieldMap["c_id_kegiatan"] = t.CIDKegiatan
	t.fieldMap["c_jumlah"] = t.CJumlah
}

func (t tAnggaranUmum) clone(db *gorm.DB) tAnggaranUmum {
	t.tAnggaranUmumDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tAnggaranUmum) replaceDB(db *gorm.DB) tAnggaranUmum {
	t.tAnggaranUmumDo.ReplaceDB(db)
	return t
}

type tAnggaranUmumDo struct{ gen.DO }

type ITAnggaranUmumDo interface {
	gen.SubQuery
	Debug() ITAnggaranUmumDo
	WithContext(ctx context.Context) ITAnggaranUmumDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITAnggaranUmumDo
	WriteDB() ITAnggaranUmumDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITAnggaranUmumDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITAnggaranUmumDo
	Not(conds ...gen.Condition) ITAnggaranUmumDo
	Or(conds ...gen.Condition) ITAnggaranUmumDo
	Select(conds ...field.Expr) ITAnggaranUmumDo
	Where(conds ...gen.Condition) ITAnggaranUmumDo
	Order(conds ...field.Expr) ITAnggaranUmumDo
	Distinct(cols ...field.Expr) ITAnggaranUmumDo
	Omit(cols ...field.Expr) ITAnggaranUmumDo
	Join(table schema.Tabler, on ...field.Expr) ITAnggaranUmumDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITAnggaranUmumDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITAnggaranUmumDo
	Group(cols ...field.Expr) ITAnggaranUmumDo
	Having(conds ...gen.Condition) ITAnggaranUmumDo
	Limit(limit int) ITAnggaranUmumDo
	Offset(offset int) ITAnggaranUmumDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITAnggaranUmumDo
	Unscoped() ITAnggaranUmumDo
	Create(values ...*model.TAnggaranUmum) error
	CreateInBatches(values []*model.TAnggaranUmum, batchSize int) error
	Save(values ...*model.TAnggaranUmum) error
	First() (*model.TAnggaranUmum, error)
	Take() (*model.TAnggaranUmum, error)
	Last() (*model.TAnggaranUmum, error)
	Find() ([]*model.TAnggaranUmum, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TAnggaranUmum, err error)
	FindInBatches(result *[]*model.TAnggaranUmum, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TAnggaranUmum) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITAnggaranUmumDo
	Assign(attrs ...field.AssignExpr) ITAnggaranUmumDo
	Joins(fields ...field.RelationField) ITAnggaranUmumDo
	Preload(fields ...field.RelationField) ITAnggaranUmumDo
	FirstOrInit() (*model.TAnggaranUmum, error)
	FirstOrCreate() (*model.TAnggaranUmum, error)
	FindByPage(offset int, limit int) (result []*model.TAnggaranUmum, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITAnggaranUmumDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tAnggaranUmumDo) Debug() ITAnggaranUmumDo {
	return t.withDO(t.DO.Debug())
}

func (t tAnggaranUmumDo) WithContext(ctx context.Context) ITAnggaranUmumDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tAnggaranUmumDo) ReadDB() ITAnggaranUmumDo {
	return t.Clauses(dbresolver.Read)
}

func (t tAnggaranUmumDo) WriteDB() ITAnggaranUmumDo {
	return t.Clauses(dbresolver.Write)
}

func (t tAnggaranUmumDo) Session(config *gorm.Session) ITAnggaranUmumDo {
	return t.withDO(t.DO.Session(config))
}

func (t tAnggaranUmumDo) Clauses(conds ...clause.Expression) ITAnggaranUmumDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tAnggaranUmumDo) Returning(value interface{}, columns ...string) ITAnggaranUmumDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tAnggaranUmumDo) Not(conds ...gen.Condition) ITAnggaranUmumDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tAnggaranUmumDo) Or(conds ...gen.Condition) ITAnggaranUmumDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tAnggaranUmumDo) Select(conds ...field.Expr) ITAnggaranUmumDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tAnggaranUmumDo) Where(conds ...gen.Condition) ITAnggaranUmumDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tAnggaranUmumDo) Order(conds ...field.Expr) ITAnggaranUmumDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tAnggaranUmumDo) Distinct(cols ...field.Expr) ITAnggaranUmumDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tAnggaranUmumDo) Omit(cols ...field.Expr) ITAnggaranUmumDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tAnggaranUmumDo) Join(table schema.Tabler, on ...field.Expr) ITAnggaranUmumDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tAnggaranUmumDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITAnggaranUmumDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tAnggaranUmumDo) RightJoin(table schema.Tabler, on ...field.Expr) ITAnggaranUmumDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tAnggaranUmumDo) Group(cols ...field.Expr) ITAnggaranUmumDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tAnggaranUmumDo) Having(conds ...gen.Condition) ITAnggaranUmumDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tAnggaranUmumDo) Limit(limit int) ITAnggaranUmumDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tAnggaranUmumDo) Offset(offset int) ITAnggaranUmumDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tAnggaranUmumDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITAnggaranUmumDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tAnggaranUmumDo) Unscoped() ITAnggaranUmumDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tAnggaranUmumDo) Create(values ...*model.TAnggaranUmum) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tAnggaranUmumDo) CreateInBatches(values []*model.TAnggaranUmum, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tAnggaranUmumDo) Save(values ...*model.TAnggaranUmum) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tAnggaranUmumDo) First() (*model.TAnggaranUmum, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TAnggaranUmum), nil
	}
}

func (t tAnggaranUmumDo) Take() (*model.TAnggaranUmum, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TAnggaranUmum), nil
	}
}

func (t tAnggaranUmumDo) Last() (*model.TAnggaranUmum, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TAnggaranUmum), nil
	}
}

func (t tAnggaranUmumDo) Find() ([]*model.TAnggaranUmum, error) {
	result, err := t.DO.Find()
	return result.([]*model.TAnggaranUmum), err
}

func (t tAnggaranUmumDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TAnggaranUmum, err error) {
	buf := make([]*model.TAnggaranUmum, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tAnggaranUmumDo) FindInBatches(result *[]*model.TAnggaranUmum, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tAnggaranUmumDo) Attrs(attrs ...field.AssignExpr) ITAnggaranUmumDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tAnggaranUmumDo) Assign(attrs ...field.AssignExpr) ITAnggaranUmumDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tAnggaranUmumDo) Joins(fields ...field.RelationField) ITAnggaranUmumDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tAnggaranUmumDo) Preload(fields ...field.RelationField) ITAnggaranUmumDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tAnggaranUmumDo) FirstOrInit() (*model.TAnggaranUmum, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TAnggaranUmum), nil
	}
}

func (t tAnggaranUmumDo) FirstOrCreate() (*model.TAnggaranUmum, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TAnggaranUmum), nil
	}
}

func (t tAnggaranUmumDo) FindByPage(offset int, limit int) (result []*model.TAnggaranUmum, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tAnggaranUmumDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tAnggaranUmumDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tAnggaranUmumDo) Delete(models ...*model.TAnggaranUmum) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tAnggaranUmumDo) withDO(do gen.Dao) *tAnggaranUmumDo {
	t.DO = *do.(*gen.DO)
	return t
}
