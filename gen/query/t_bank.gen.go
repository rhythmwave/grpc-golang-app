// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-bponline/m/gen/model"
)

func newTBank(db *gorm.DB, opts ...gen.DOOption) tBank {
	_tBank := tBank{}

	_tBank.tBankDo.UseDB(db, opts...)
	_tBank.tBankDo.UseModel(&model.TBank{})

	tableName := _tBank.tBankDo.TableName()
	_tBank.ALL = field.NewAsterisk(tableName)
	_tBank.CIDBank = field.NewInt32(tableName, "c_id_bank")
	_tBank.CNamaBank = field.NewString(tableName, "c_nama_bank")
	_tBank.CCabang = field.NewString(tableName, "c_cabang")
	_tBank.CStatus = field.NewString(tableName, "c_status")
	_tBank.CUpdater = field.NewString(tableName, "c_updater")
	_tBank.CLastUpdate = field.NewTime(tableName, "c_last_update")
	_tBank.CIDPenanda = field.NewInt32(tableName, "c_id_penanda")

	_tBank.fillFieldMap()

	return _tBank
}

type tBank struct {
	tBankDo

	ALL         field.Asterisk
	CIDBank     field.Int32
	CNamaBank   field.String
	CCabang     field.String
	CStatus     field.String
	CUpdater    field.String
	CLastUpdate field.Time
	CIDPenanda  field.Int32

	fieldMap map[string]field.Expr
}

func (t tBank) Table(newTableName string) *tBank {
	t.tBankDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tBank) As(alias string) *tBank {
	t.tBankDo.DO = *(t.tBankDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tBank) updateTableName(table string) *tBank {
	t.ALL = field.NewAsterisk(table)
	t.CIDBank = field.NewInt32(table, "c_id_bank")
	t.CNamaBank = field.NewString(table, "c_nama_bank")
	t.CCabang = field.NewString(table, "c_cabang")
	t.CStatus = field.NewString(table, "c_status")
	t.CUpdater = field.NewString(table, "c_updater")
	t.CLastUpdate = field.NewTime(table, "c_last_update")
	t.CIDPenanda = field.NewInt32(table, "c_id_penanda")

	t.fillFieldMap()

	return t
}

func (t *tBank) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tBank) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 7)
	t.fieldMap["c_id_bank"] = t.CIDBank
	t.fieldMap["c_nama_bank"] = t.CNamaBank
	t.fieldMap["c_cabang"] = t.CCabang
	t.fieldMap["c_status"] = t.CStatus
	t.fieldMap["c_updater"] = t.CUpdater
	t.fieldMap["c_last_update"] = t.CLastUpdate
	t.fieldMap["c_id_penanda"] = t.CIDPenanda
}

func (t tBank) clone(db *gorm.DB) tBank {
	t.tBankDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tBank) replaceDB(db *gorm.DB) tBank {
	t.tBankDo.ReplaceDB(db)
	return t
}

type tBankDo struct{ gen.DO }

type ITBankDo interface {
	gen.SubQuery
	Debug() ITBankDo
	WithContext(ctx context.Context) ITBankDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITBankDo
	WriteDB() ITBankDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITBankDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITBankDo
	Not(conds ...gen.Condition) ITBankDo
	Or(conds ...gen.Condition) ITBankDo
	Select(conds ...field.Expr) ITBankDo
	Where(conds ...gen.Condition) ITBankDo
	Order(conds ...field.Expr) ITBankDo
	Distinct(cols ...field.Expr) ITBankDo
	Omit(cols ...field.Expr) ITBankDo
	Join(table schema.Tabler, on ...field.Expr) ITBankDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITBankDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITBankDo
	Group(cols ...field.Expr) ITBankDo
	Having(conds ...gen.Condition) ITBankDo
	Limit(limit int) ITBankDo
	Offset(offset int) ITBankDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITBankDo
	Unscoped() ITBankDo
	Create(values ...*model.TBank) error
	CreateInBatches(values []*model.TBank, batchSize int) error
	Save(values ...*model.TBank) error
	First() (*model.TBank, error)
	Take() (*model.TBank, error)
	Last() (*model.TBank, error)
	Find() ([]*model.TBank, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TBank, err error)
	FindInBatches(result *[]*model.TBank, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TBank) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITBankDo
	Assign(attrs ...field.AssignExpr) ITBankDo
	Joins(fields ...field.RelationField) ITBankDo
	Preload(fields ...field.RelationField) ITBankDo
	FirstOrInit() (*model.TBank, error)
	FirstOrCreate() (*model.TBank, error)
	FindByPage(offset int, limit int) (result []*model.TBank, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITBankDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tBankDo) Debug() ITBankDo {
	return t.withDO(t.DO.Debug())
}

func (t tBankDo) WithContext(ctx context.Context) ITBankDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tBankDo) ReadDB() ITBankDo {
	return t.Clauses(dbresolver.Read)
}

func (t tBankDo) WriteDB() ITBankDo {
	return t.Clauses(dbresolver.Write)
}

func (t tBankDo) Session(config *gorm.Session) ITBankDo {
	return t.withDO(t.DO.Session(config))
}

func (t tBankDo) Clauses(conds ...clause.Expression) ITBankDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tBankDo) Returning(value interface{}, columns ...string) ITBankDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tBankDo) Not(conds ...gen.Condition) ITBankDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tBankDo) Or(conds ...gen.Condition) ITBankDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tBankDo) Select(conds ...field.Expr) ITBankDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tBankDo) Where(conds ...gen.Condition) ITBankDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tBankDo) Order(conds ...field.Expr) ITBankDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tBankDo) Distinct(cols ...field.Expr) ITBankDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tBankDo) Omit(cols ...field.Expr) ITBankDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tBankDo) Join(table schema.Tabler, on ...field.Expr) ITBankDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tBankDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITBankDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tBankDo) RightJoin(table schema.Tabler, on ...field.Expr) ITBankDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tBankDo) Group(cols ...field.Expr) ITBankDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tBankDo) Having(conds ...gen.Condition) ITBankDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tBankDo) Limit(limit int) ITBankDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tBankDo) Offset(offset int) ITBankDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tBankDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITBankDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tBankDo) Unscoped() ITBankDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tBankDo) Create(values ...*model.TBank) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tBankDo) CreateInBatches(values []*model.TBank, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tBankDo) Save(values ...*model.TBank) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tBankDo) First() (*model.TBank, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TBank), nil
	}
}

func (t tBankDo) Take() (*model.TBank, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TBank), nil
	}
}

func (t tBankDo) Last() (*model.TBank, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TBank), nil
	}
}

func (t tBankDo) Find() ([]*model.TBank, error) {
	result, err := t.DO.Find()
	return result.([]*model.TBank), err
}

func (t tBankDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TBank, err error) {
	buf := make([]*model.TBank, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tBankDo) FindInBatches(result *[]*model.TBank, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tBankDo) Attrs(attrs ...field.AssignExpr) ITBankDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tBankDo) Assign(attrs ...field.AssignExpr) ITBankDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tBankDo) Joins(fields ...field.RelationField) ITBankDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tBankDo) Preload(fields ...field.RelationField) ITBankDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tBankDo) FirstOrInit() (*model.TBank, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TBank), nil
	}
}

func (t tBankDo) FirstOrCreate() (*model.TBank, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TBank), nil
	}
}

func (t tBankDo) FindByPage(offset int, limit int) (result []*model.TBank, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tBankDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tBankDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tBankDo) Delete(models ...*model.TBank) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tBankDo) withDO(do gen.Dao) *tBankDo {
	t.DO = *do.(*gen.DO)
	return t
}
