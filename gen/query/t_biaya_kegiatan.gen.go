// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-bponline/m/gen/model"
)

func newTBiayaKegiatan(db *gorm.DB, opts ...gen.DOOption) tBiayaKegiatan {
	_tBiayaKegiatan := tBiayaKegiatan{}

	_tBiayaKegiatan.tBiayaKegiatanDo.UseDB(db, opts...)
	_tBiayaKegiatan.tBiayaKegiatanDo.UseModel(&model.TBiayaKegiatan{})

	tableName := _tBiayaKegiatan.tBiayaKegiatanDo.TableName()
	_tBiayaKegiatan.ALL = field.NewAsterisk(tableName)
	_tBiayaKegiatan.CIDKegiatan = field.NewInt32(tableName, "c_id_kegiatan")
	_tBiayaKegiatan.CIDJenis = field.NewInt32(tableName, "c_id_jenis")
	_tBiayaKegiatan.CBiaya = field.NewFloat64(tableName, "c_biaya")
	_tBiayaKegiatan.CKeterangan = field.NewString(tableName, "c_keterangan")
	_tBiayaKegiatan.CStatus = field.NewString(tableName, "c_status")
	_tBiayaKegiatan.CUpdater = field.NewString(tableName, "c_updater")
	_tBiayaKegiatan.CLastUpdate = field.NewTime(tableName, "c_last_update")

	_tBiayaKegiatan.fillFieldMap()

	return _tBiayaKegiatan
}

type tBiayaKegiatan struct {
	tBiayaKegiatanDo

	ALL         field.Asterisk
	CIDKegiatan field.Int32
	CIDJenis    field.Int32
	CBiaya      field.Float64
	CKeterangan field.String
	CStatus     field.String
	CUpdater    field.String
	CLastUpdate field.Time

	fieldMap map[string]field.Expr
}

func (t tBiayaKegiatan) Table(newTableName string) *tBiayaKegiatan {
	t.tBiayaKegiatanDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tBiayaKegiatan) As(alias string) *tBiayaKegiatan {
	t.tBiayaKegiatanDo.DO = *(t.tBiayaKegiatanDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tBiayaKegiatan) updateTableName(table string) *tBiayaKegiatan {
	t.ALL = field.NewAsterisk(table)
	t.CIDKegiatan = field.NewInt32(table, "c_id_kegiatan")
	t.CIDJenis = field.NewInt32(table, "c_id_jenis")
	t.CBiaya = field.NewFloat64(table, "c_biaya")
	t.CKeterangan = field.NewString(table, "c_keterangan")
	t.CStatus = field.NewString(table, "c_status")
	t.CUpdater = field.NewString(table, "c_updater")
	t.CLastUpdate = field.NewTime(table, "c_last_update")

	t.fillFieldMap()

	return t
}

func (t *tBiayaKegiatan) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tBiayaKegiatan) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 7)
	t.fieldMap["c_id_kegiatan"] = t.CIDKegiatan
	t.fieldMap["c_id_jenis"] = t.CIDJenis
	t.fieldMap["c_biaya"] = t.CBiaya
	t.fieldMap["c_keterangan"] = t.CKeterangan
	t.fieldMap["c_status"] = t.CStatus
	t.fieldMap["c_updater"] = t.CUpdater
	t.fieldMap["c_last_update"] = t.CLastUpdate
}

func (t tBiayaKegiatan) clone(db *gorm.DB) tBiayaKegiatan {
	t.tBiayaKegiatanDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tBiayaKegiatan) replaceDB(db *gorm.DB) tBiayaKegiatan {
	t.tBiayaKegiatanDo.ReplaceDB(db)
	return t
}

type tBiayaKegiatanDo struct{ gen.DO }

type ITBiayaKegiatanDo interface {
	gen.SubQuery
	Debug() ITBiayaKegiatanDo
	WithContext(ctx context.Context) ITBiayaKegiatanDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITBiayaKegiatanDo
	WriteDB() ITBiayaKegiatanDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITBiayaKegiatanDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITBiayaKegiatanDo
	Not(conds ...gen.Condition) ITBiayaKegiatanDo
	Or(conds ...gen.Condition) ITBiayaKegiatanDo
	Select(conds ...field.Expr) ITBiayaKegiatanDo
	Where(conds ...gen.Condition) ITBiayaKegiatanDo
	Order(conds ...field.Expr) ITBiayaKegiatanDo
	Distinct(cols ...field.Expr) ITBiayaKegiatanDo
	Omit(cols ...field.Expr) ITBiayaKegiatanDo
	Join(table schema.Tabler, on ...field.Expr) ITBiayaKegiatanDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITBiayaKegiatanDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITBiayaKegiatanDo
	Group(cols ...field.Expr) ITBiayaKegiatanDo
	Having(conds ...gen.Condition) ITBiayaKegiatanDo
	Limit(limit int) ITBiayaKegiatanDo
	Offset(offset int) ITBiayaKegiatanDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITBiayaKegiatanDo
	Unscoped() ITBiayaKegiatanDo
	Create(values ...*model.TBiayaKegiatan) error
	CreateInBatches(values []*model.TBiayaKegiatan, batchSize int) error
	Save(values ...*model.TBiayaKegiatan) error
	First() (*model.TBiayaKegiatan, error)
	Take() (*model.TBiayaKegiatan, error)
	Last() (*model.TBiayaKegiatan, error)
	Find() ([]*model.TBiayaKegiatan, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TBiayaKegiatan, err error)
	FindInBatches(result *[]*model.TBiayaKegiatan, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TBiayaKegiatan) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITBiayaKegiatanDo
	Assign(attrs ...field.AssignExpr) ITBiayaKegiatanDo
	Joins(fields ...field.RelationField) ITBiayaKegiatanDo
	Preload(fields ...field.RelationField) ITBiayaKegiatanDo
	FirstOrInit() (*model.TBiayaKegiatan, error)
	FirstOrCreate() (*model.TBiayaKegiatan, error)
	FindByPage(offset int, limit int) (result []*model.TBiayaKegiatan, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITBiayaKegiatanDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tBiayaKegiatanDo) Debug() ITBiayaKegiatanDo {
	return t.withDO(t.DO.Debug())
}

func (t tBiayaKegiatanDo) WithContext(ctx context.Context) ITBiayaKegiatanDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tBiayaKegiatanDo) ReadDB() ITBiayaKegiatanDo {
	return t.Clauses(dbresolver.Read)
}

func (t tBiayaKegiatanDo) WriteDB() ITBiayaKegiatanDo {
	return t.Clauses(dbresolver.Write)
}

func (t tBiayaKegiatanDo) Session(config *gorm.Session) ITBiayaKegiatanDo {
	return t.withDO(t.DO.Session(config))
}

func (t tBiayaKegiatanDo) Clauses(conds ...clause.Expression) ITBiayaKegiatanDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tBiayaKegiatanDo) Returning(value interface{}, columns ...string) ITBiayaKegiatanDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tBiayaKegiatanDo) Not(conds ...gen.Condition) ITBiayaKegiatanDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tBiayaKegiatanDo) Or(conds ...gen.Condition) ITBiayaKegiatanDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tBiayaKegiatanDo) Select(conds ...field.Expr) ITBiayaKegiatanDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tBiayaKegiatanDo) Where(conds ...gen.Condition) ITBiayaKegiatanDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tBiayaKegiatanDo) Order(conds ...field.Expr) ITBiayaKegiatanDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tBiayaKegiatanDo) Distinct(cols ...field.Expr) ITBiayaKegiatanDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tBiayaKegiatanDo) Omit(cols ...field.Expr) ITBiayaKegiatanDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tBiayaKegiatanDo) Join(table schema.Tabler, on ...field.Expr) ITBiayaKegiatanDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tBiayaKegiatanDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITBiayaKegiatanDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tBiayaKegiatanDo) RightJoin(table schema.Tabler, on ...field.Expr) ITBiayaKegiatanDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tBiayaKegiatanDo) Group(cols ...field.Expr) ITBiayaKegiatanDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tBiayaKegiatanDo) Having(conds ...gen.Condition) ITBiayaKegiatanDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tBiayaKegiatanDo) Limit(limit int) ITBiayaKegiatanDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tBiayaKegiatanDo) Offset(offset int) ITBiayaKegiatanDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tBiayaKegiatanDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITBiayaKegiatanDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tBiayaKegiatanDo) Unscoped() ITBiayaKegiatanDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tBiayaKegiatanDo) Create(values ...*model.TBiayaKegiatan) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tBiayaKegiatanDo) CreateInBatches(values []*model.TBiayaKegiatan, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tBiayaKegiatanDo) Save(values ...*model.TBiayaKegiatan) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tBiayaKegiatanDo) First() (*model.TBiayaKegiatan, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TBiayaKegiatan), nil
	}
}

func (t tBiayaKegiatanDo) Take() (*model.TBiayaKegiatan, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TBiayaKegiatan), nil
	}
}

func (t tBiayaKegiatanDo) Last() (*model.TBiayaKegiatan, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TBiayaKegiatan), nil
	}
}

func (t tBiayaKegiatanDo) Find() ([]*model.TBiayaKegiatan, error) {
	result, err := t.DO.Find()
	return result.([]*model.TBiayaKegiatan), err
}

func (t tBiayaKegiatanDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TBiayaKegiatan, err error) {
	buf := make([]*model.TBiayaKegiatan, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tBiayaKegiatanDo) FindInBatches(result *[]*model.TBiayaKegiatan, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tBiayaKegiatanDo) Attrs(attrs ...field.AssignExpr) ITBiayaKegiatanDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tBiayaKegiatanDo) Assign(attrs ...field.AssignExpr) ITBiayaKegiatanDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tBiayaKegiatanDo) Joins(fields ...field.RelationField) ITBiayaKegiatanDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tBiayaKegiatanDo) Preload(fields ...field.RelationField) ITBiayaKegiatanDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tBiayaKegiatanDo) FirstOrInit() (*model.TBiayaKegiatan, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TBiayaKegiatan), nil
	}
}

func (t tBiayaKegiatanDo) FirstOrCreate() (*model.TBiayaKegiatan, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TBiayaKegiatan), nil
	}
}

func (t tBiayaKegiatanDo) FindByPage(offset int, limit int) (result []*model.TBiayaKegiatan, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tBiayaKegiatanDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tBiayaKegiatanDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tBiayaKegiatanDo) Delete(models ...*model.TBiayaKegiatan) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tBiayaKegiatanDo) withDO(do gen.Dao) *tBiayaKegiatanDo {
	t.DO = *do.(*gen.DO)
	return t
}
