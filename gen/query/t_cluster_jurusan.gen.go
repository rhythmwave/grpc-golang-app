// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-bponline/m/gen/model"
)

func newTClusterJurusan(db *gorm.DB, opts ...gen.DOOption) tClusterJurusan {
	_tClusterJurusan := tClusterJurusan{}

	_tClusterJurusan.tClusterJurusanDo.UseDB(db, opts...)
	_tClusterJurusan.tClusterJurusanDo.UseModel(&model.TClusterJurusan{})

	tableName := _tClusterJurusan.tClusterJurusanDo.TableName()
	_tClusterJurusan.ALL = field.NewAsterisk(tableName)
	_tClusterJurusan.CKodeClusterJurusan = field.NewInt32(tableName, "c_kode_cluster_jurusan")
	_tClusterJurusan.CNamaCluster = field.NewString(tableName, "c_nama_cluster")
	_tClusterJurusan.CStatus = field.NewString(tableName, "c_status")
	_tClusterJurusan.CUpdater = field.NewString(tableName, "c_updater")
	_tClusterJurusan.CCreatedAt = field.NewTime(tableName, "c_created_at")
	_tClusterJurusan.CLastUpdate = field.NewTime(tableName, "c_last_update")

	_tClusterJurusan.fillFieldMap()

	return _tClusterJurusan
}

type tClusterJurusan struct {
	tClusterJurusanDo

	ALL                 field.Asterisk
	CKodeClusterJurusan field.Int32
	CNamaCluster        field.String
	CStatus             field.String
	CUpdater            field.String
	CCreatedAt          field.Time
	CLastUpdate         field.Time

	fieldMap map[string]field.Expr
}

func (t tClusterJurusan) Table(newTableName string) *tClusterJurusan {
	t.tClusterJurusanDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tClusterJurusan) As(alias string) *tClusterJurusan {
	t.tClusterJurusanDo.DO = *(t.tClusterJurusanDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tClusterJurusan) updateTableName(table string) *tClusterJurusan {
	t.ALL = field.NewAsterisk(table)
	t.CKodeClusterJurusan = field.NewInt32(table, "c_kode_cluster_jurusan")
	t.CNamaCluster = field.NewString(table, "c_nama_cluster")
	t.CStatus = field.NewString(table, "c_status")
	t.CUpdater = field.NewString(table, "c_updater")
	t.CCreatedAt = field.NewTime(table, "c_created_at")
	t.CLastUpdate = field.NewTime(table, "c_last_update")

	t.fillFieldMap()

	return t
}

func (t *tClusterJurusan) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tClusterJurusan) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 6)
	t.fieldMap["c_kode_cluster_jurusan"] = t.CKodeClusterJurusan
	t.fieldMap["c_nama_cluster"] = t.CNamaCluster
	t.fieldMap["c_status"] = t.CStatus
	t.fieldMap["c_updater"] = t.CUpdater
	t.fieldMap["c_created_at"] = t.CCreatedAt
	t.fieldMap["c_last_update"] = t.CLastUpdate
}

func (t tClusterJurusan) clone(db *gorm.DB) tClusterJurusan {
	t.tClusterJurusanDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tClusterJurusan) replaceDB(db *gorm.DB) tClusterJurusan {
	t.tClusterJurusanDo.ReplaceDB(db)
	return t
}

type tClusterJurusanDo struct{ gen.DO }

type ITClusterJurusanDo interface {
	gen.SubQuery
	Debug() ITClusterJurusanDo
	WithContext(ctx context.Context) ITClusterJurusanDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITClusterJurusanDo
	WriteDB() ITClusterJurusanDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITClusterJurusanDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITClusterJurusanDo
	Not(conds ...gen.Condition) ITClusterJurusanDo
	Or(conds ...gen.Condition) ITClusterJurusanDo
	Select(conds ...field.Expr) ITClusterJurusanDo
	Where(conds ...gen.Condition) ITClusterJurusanDo
	Order(conds ...field.Expr) ITClusterJurusanDo
	Distinct(cols ...field.Expr) ITClusterJurusanDo
	Omit(cols ...field.Expr) ITClusterJurusanDo
	Join(table schema.Tabler, on ...field.Expr) ITClusterJurusanDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITClusterJurusanDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITClusterJurusanDo
	Group(cols ...field.Expr) ITClusterJurusanDo
	Having(conds ...gen.Condition) ITClusterJurusanDo
	Limit(limit int) ITClusterJurusanDo
	Offset(offset int) ITClusterJurusanDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITClusterJurusanDo
	Unscoped() ITClusterJurusanDo
	Create(values ...*model.TClusterJurusan) error
	CreateInBatches(values []*model.TClusterJurusan, batchSize int) error
	Save(values ...*model.TClusterJurusan) error
	First() (*model.TClusterJurusan, error)
	Take() (*model.TClusterJurusan, error)
	Last() (*model.TClusterJurusan, error)
	Find() ([]*model.TClusterJurusan, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TClusterJurusan, err error)
	FindInBatches(result *[]*model.TClusterJurusan, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TClusterJurusan) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITClusterJurusanDo
	Assign(attrs ...field.AssignExpr) ITClusterJurusanDo
	Joins(fields ...field.RelationField) ITClusterJurusanDo
	Preload(fields ...field.RelationField) ITClusterJurusanDo
	FirstOrInit() (*model.TClusterJurusan, error)
	FirstOrCreate() (*model.TClusterJurusan, error)
	FindByPage(offset int, limit int) (result []*model.TClusterJurusan, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITClusterJurusanDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tClusterJurusanDo) Debug() ITClusterJurusanDo {
	return t.withDO(t.DO.Debug())
}

func (t tClusterJurusanDo) WithContext(ctx context.Context) ITClusterJurusanDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tClusterJurusanDo) ReadDB() ITClusterJurusanDo {
	return t.Clauses(dbresolver.Read)
}

func (t tClusterJurusanDo) WriteDB() ITClusterJurusanDo {
	return t.Clauses(dbresolver.Write)
}

func (t tClusterJurusanDo) Session(config *gorm.Session) ITClusterJurusanDo {
	return t.withDO(t.DO.Session(config))
}

func (t tClusterJurusanDo) Clauses(conds ...clause.Expression) ITClusterJurusanDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tClusterJurusanDo) Returning(value interface{}, columns ...string) ITClusterJurusanDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tClusterJurusanDo) Not(conds ...gen.Condition) ITClusterJurusanDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tClusterJurusanDo) Or(conds ...gen.Condition) ITClusterJurusanDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tClusterJurusanDo) Select(conds ...field.Expr) ITClusterJurusanDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tClusterJurusanDo) Where(conds ...gen.Condition) ITClusterJurusanDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tClusterJurusanDo) Order(conds ...field.Expr) ITClusterJurusanDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tClusterJurusanDo) Distinct(cols ...field.Expr) ITClusterJurusanDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tClusterJurusanDo) Omit(cols ...field.Expr) ITClusterJurusanDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tClusterJurusanDo) Join(table schema.Tabler, on ...field.Expr) ITClusterJurusanDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tClusterJurusanDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITClusterJurusanDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tClusterJurusanDo) RightJoin(table schema.Tabler, on ...field.Expr) ITClusterJurusanDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tClusterJurusanDo) Group(cols ...field.Expr) ITClusterJurusanDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tClusterJurusanDo) Having(conds ...gen.Condition) ITClusterJurusanDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tClusterJurusanDo) Limit(limit int) ITClusterJurusanDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tClusterJurusanDo) Offset(offset int) ITClusterJurusanDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tClusterJurusanDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITClusterJurusanDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tClusterJurusanDo) Unscoped() ITClusterJurusanDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tClusterJurusanDo) Create(values ...*model.TClusterJurusan) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tClusterJurusanDo) CreateInBatches(values []*model.TClusterJurusan, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tClusterJurusanDo) Save(values ...*model.TClusterJurusan) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tClusterJurusanDo) First() (*model.TClusterJurusan, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TClusterJurusan), nil
	}
}

func (t tClusterJurusanDo) Take() (*model.TClusterJurusan, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TClusterJurusan), nil
	}
}

func (t tClusterJurusanDo) Last() (*model.TClusterJurusan, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TClusterJurusan), nil
	}
}

func (t tClusterJurusanDo) Find() ([]*model.TClusterJurusan, error) {
	result, err := t.DO.Find()
	return result.([]*model.TClusterJurusan), err
}

func (t tClusterJurusanDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TClusterJurusan, err error) {
	buf := make([]*model.TClusterJurusan, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tClusterJurusanDo) FindInBatches(result *[]*model.TClusterJurusan, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tClusterJurusanDo) Attrs(attrs ...field.AssignExpr) ITClusterJurusanDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tClusterJurusanDo) Assign(attrs ...field.AssignExpr) ITClusterJurusanDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tClusterJurusanDo) Joins(fields ...field.RelationField) ITClusterJurusanDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tClusterJurusanDo) Preload(fields ...field.RelationField) ITClusterJurusanDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tClusterJurusanDo) FirstOrInit() (*model.TClusterJurusan, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TClusterJurusan), nil
	}
}

func (t tClusterJurusanDo) FirstOrCreate() (*model.TClusterJurusan, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TClusterJurusan), nil
	}
}

func (t tClusterJurusanDo) FindByPage(offset int, limit int) (result []*model.TClusterJurusan, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tClusterJurusanDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tClusterJurusanDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tClusterJurusanDo) Delete(models ...*model.TClusterJurusan) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tClusterJurusanDo) withDO(do gen.Dao) *tClusterJurusanDo {
	t.DO = *do.(*gen.DO)
	return t
}
