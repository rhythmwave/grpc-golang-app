// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-bponline/m/gen/model"
)

func newTDokumenTransfer(db *gorm.DB, opts ...gen.DOOption) tDokumenTransfer {
	_tDokumenTransfer := tDokumenTransfer{}

	_tDokumenTransfer.tDokumenTransferDo.UseDB(db, opts...)
	_tDokumenTransfer.tDokumenTransferDo.UseModel(&model.TDokumenTransfer{})

	tableName := _tDokumenTransfer.tDokumenTransferDo.TableName()
	_tDokumenTransfer.ALL = field.NewAsterisk(tableName)
	_tDokumenTransfer.CIDDokumenTransfer = field.NewString(tableName, "c_id_dokumen_transfer")
	_tDokumenTransfer.CMingguKe = field.NewInt16(tableName, "c_minggu_ke")
	_tDokumenTransfer.CDeskripsi = field.NewString(tableName, "c_deskripsi")
	_tDokumenTransfer.CStatus = field.NewString(tableName, "c_status")
	_tDokumenTransfer.CJumlahTransfer = field.NewFloat64(tableName, "c_jumlah_transfer")
	_tDokumenTransfer.CPetugasTransfer = field.NewString(tableName, "c_petugas_transfer")
	_tDokumenTransfer.CTanggalTransfer = field.NewTime(tableName, "c_tanggal_transfer")
	_tDokumenTransfer.CBuktiTransfer = field.NewString(tableName, "c_bukti_transfer")
	_tDokumenTransfer.CUpdater = field.NewString(tableName, "c_updater")
	_tDokumenTransfer.CInserter = field.NewString(tableName, "c_inserter")
	_tDokumenTransfer.CLastUpdate = field.NewTime(tableName, "c_last_update")

	_tDokumenTransfer.fillFieldMap()

	return _tDokumenTransfer
}

type tDokumenTransfer struct {
	tDokumenTransferDo

	ALL                field.Asterisk
	CIDDokumenTransfer field.String
	CMingguKe          field.Int16
	CDeskripsi         field.String
	CStatus            field.String
	CJumlahTransfer    field.Float64
	CPetugasTransfer   field.String
	CTanggalTransfer   field.Time
	CBuktiTransfer     field.String
	CUpdater           field.String
	CInserter          field.String
	CLastUpdate        field.Time

	fieldMap map[string]field.Expr
}

func (t tDokumenTransfer) Table(newTableName string) *tDokumenTransfer {
	t.tDokumenTransferDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tDokumenTransfer) As(alias string) *tDokumenTransfer {
	t.tDokumenTransferDo.DO = *(t.tDokumenTransferDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tDokumenTransfer) updateTableName(table string) *tDokumenTransfer {
	t.ALL = field.NewAsterisk(table)
	t.CIDDokumenTransfer = field.NewString(table, "c_id_dokumen_transfer")
	t.CMingguKe = field.NewInt16(table, "c_minggu_ke")
	t.CDeskripsi = field.NewString(table, "c_deskripsi")
	t.CStatus = field.NewString(table, "c_status")
	t.CJumlahTransfer = field.NewFloat64(table, "c_jumlah_transfer")
	t.CPetugasTransfer = field.NewString(table, "c_petugas_transfer")
	t.CTanggalTransfer = field.NewTime(table, "c_tanggal_transfer")
	t.CBuktiTransfer = field.NewString(table, "c_bukti_transfer")
	t.CUpdater = field.NewString(table, "c_updater")
	t.CInserter = field.NewString(table, "c_inserter")
	t.CLastUpdate = field.NewTime(table, "c_last_update")

	t.fillFieldMap()

	return t
}

func (t *tDokumenTransfer) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tDokumenTransfer) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 11)
	t.fieldMap["c_id_dokumen_transfer"] = t.CIDDokumenTransfer
	t.fieldMap["c_minggu_ke"] = t.CMingguKe
	t.fieldMap["c_deskripsi"] = t.CDeskripsi
	t.fieldMap["c_status"] = t.CStatus
	t.fieldMap["c_jumlah_transfer"] = t.CJumlahTransfer
	t.fieldMap["c_petugas_transfer"] = t.CPetugasTransfer
	t.fieldMap["c_tanggal_transfer"] = t.CTanggalTransfer
	t.fieldMap["c_bukti_transfer"] = t.CBuktiTransfer
	t.fieldMap["c_updater"] = t.CUpdater
	t.fieldMap["c_inserter"] = t.CInserter
	t.fieldMap["c_last_update"] = t.CLastUpdate
}

func (t tDokumenTransfer) clone(db *gorm.DB) tDokumenTransfer {
	t.tDokumenTransferDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tDokumenTransfer) replaceDB(db *gorm.DB) tDokumenTransfer {
	t.tDokumenTransferDo.ReplaceDB(db)
	return t
}

type tDokumenTransferDo struct{ gen.DO }

type ITDokumenTransferDo interface {
	gen.SubQuery
	Debug() ITDokumenTransferDo
	WithContext(ctx context.Context) ITDokumenTransferDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITDokumenTransferDo
	WriteDB() ITDokumenTransferDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITDokumenTransferDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITDokumenTransferDo
	Not(conds ...gen.Condition) ITDokumenTransferDo
	Or(conds ...gen.Condition) ITDokumenTransferDo
	Select(conds ...field.Expr) ITDokumenTransferDo
	Where(conds ...gen.Condition) ITDokumenTransferDo
	Order(conds ...field.Expr) ITDokumenTransferDo
	Distinct(cols ...field.Expr) ITDokumenTransferDo
	Omit(cols ...field.Expr) ITDokumenTransferDo
	Join(table schema.Tabler, on ...field.Expr) ITDokumenTransferDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITDokumenTransferDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITDokumenTransferDo
	Group(cols ...field.Expr) ITDokumenTransferDo
	Having(conds ...gen.Condition) ITDokumenTransferDo
	Limit(limit int) ITDokumenTransferDo
	Offset(offset int) ITDokumenTransferDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITDokumenTransferDo
	Unscoped() ITDokumenTransferDo
	Create(values ...*model.TDokumenTransfer) error
	CreateInBatches(values []*model.TDokumenTransfer, batchSize int) error
	Save(values ...*model.TDokumenTransfer) error
	First() (*model.TDokumenTransfer, error)
	Take() (*model.TDokumenTransfer, error)
	Last() (*model.TDokumenTransfer, error)
	Find() ([]*model.TDokumenTransfer, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TDokumenTransfer, err error)
	FindInBatches(result *[]*model.TDokumenTransfer, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TDokumenTransfer) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITDokumenTransferDo
	Assign(attrs ...field.AssignExpr) ITDokumenTransferDo
	Joins(fields ...field.RelationField) ITDokumenTransferDo
	Preload(fields ...field.RelationField) ITDokumenTransferDo
	FirstOrInit() (*model.TDokumenTransfer, error)
	FirstOrCreate() (*model.TDokumenTransfer, error)
	FindByPage(offset int, limit int) (result []*model.TDokumenTransfer, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITDokumenTransferDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tDokumenTransferDo) Debug() ITDokumenTransferDo {
	return t.withDO(t.DO.Debug())
}

func (t tDokumenTransferDo) WithContext(ctx context.Context) ITDokumenTransferDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tDokumenTransferDo) ReadDB() ITDokumenTransferDo {
	return t.Clauses(dbresolver.Read)
}

func (t tDokumenTransferDo) WriteDB() ITDokumenTransferDo {
	return t.Clauses(dbresolver.Write)
}

func (t tDokumenTransferDo) Session(config *gorm.Session) ITDokumenTransferDo {
	return t.withDO(t.DO.Session(config))
}

func (t tDokumenTransferDo) Clauses(conds ...clause.Expression) ITDokumenTransferDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tDokumenTransferDo) Returning(value interface{}, columns ...string) ITDokumenTransferDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tDokumenTransferDo) Not(conds ...gen.Condition) ITDokumenTransferDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tDokumenTransferDo) Or(conds ...gen.Condition) ITDokumenTransferDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tDokumenTransferDo) Select(conds ...field.Expr) ITDokumenTransferDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tDokumenTransferDo) Where(conds ...gen.Condition) ITDokumenTransferDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tDokumenTransferDo) Order(conds ...field.Expr) ITDokumenTransferDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tDokumenTransferDo) Distinct(cols ...field.Expr) ITDokumenTransferDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tDokumenTransferDo) Omit(cols ...field.Expr) ITDokumenTransferDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tDokumenTransferDo) Join(table schema.Tabler, on ...field.Expr) ITDokumenTransferDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tDokumenTransferDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITDokumenTransferDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tDokumenTransferDo) RightJoin(table schema.Tabler, on ...field.Expr) ITDokumenTransferDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tDokumenTransferDo) Group(cols ...field.Expr) ITDokumenTransferDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tDokumenTransferDo) Having(conds ...gen.Condition) ITDokumenTransferDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tDokumenTransferDo) Limit(limit int) ITDokumenTransferDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tDokumenTransferDo) Offset(offset int) ITDokumenTransferDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tDokumenTransferDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITDokumenTransferDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tDokumenTransferDo) Unscoped() ITDokumenTransferDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tDokumenTransferDo) Create(values ...*model.TDokumenTransfer) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tDokumenTransferDo) CreateInBatches(values []*model.TDokumenTransfer, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tDokumenTransferDo) Save(values ...*model.TDokumenTransfer) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tDokumenTransferDo) First() (*model.TDokumenTransfer, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TDokumenTransfer), nil
	}
}

func (t tDokumenTransferDo) Take() (*model.TDokumenTransfer, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TDokumenTransfer), nil
	}
}

func (t tDokumenTransferDo) Last() (*model.TDokumenTransfer, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TDokumenTransfer), nil
	}
}

func (t tDokumenTransferDo) Find() ([]*model.TDokumenTransfer, error) {
	result, err := t.DO.Find()
	return result.([]*model.TDokumenTransfer), err
}

func (t tDokumenTransferDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TDokumenTransfer, err error) {
	buf := make([]*model.TDokumenTransfer, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tDokumenTransferDo) FindInBatches(result *[]*model.TDokumenTransfer, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tDokumenTransferDo) Attrs(attrs ...field.AssignExpr) ITDokumenTransferDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tDokumenTransferDo) Assign(attrs ...field.AssignExpr) ITDokumenTransferDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tDokumenTransferDo) Joins(fields ...field.RelationField) ITDokumenTransferDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tDokumenTransferDo) Preload(fields ...field.RelationField) ITDokumenTransferDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tDokumenTransferDo) FirstOrInit() (*model.TDokumenTransfer, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TDokumenTransfer), nil
	}
}

func (t tDokumenTransferDo) FirstOrCreate() (*model.TDokumenTransfer, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TDokumenTransfer), nil
	}
}

func (t tDokumenTransferDo) FindByPage(offset int, limit int) (result []*model.TDokumenTransfer, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tDokumenTransferDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tDokumenTransferDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tDokumenTransferDo) Delete(models ...*model.TDokumenTransfer) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tDokumenTransferDo) withDO(do gen.Dao) *tDokumenTransferDo {
	t.DO = *do.(*gen.DO)
	return t
}
