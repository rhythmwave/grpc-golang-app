// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-bponline/m/gen/model"
)

func newTDppb(db *gorm.DB, opts ...gen.DOOption) tDppb {
	_tDppb := tDppb{}

	_tDppb.tDppbDo.UseDB(db, opts...)
	_tDppb.tDppbDo.UseModel(&model.TDppb{})

	tableName := _tDppb.tDppbDo.TableName()
	_tDppb.ALL = field.NewAsterisk(tableName)
	_tDppb.CIDDppb = field.NewString(tableName, "c_id_dppb")
	_tDppb.CTanggalKebutuhan = field.NewTime(tableName, "c_tanggal_kebutuhan")
	_tDppb.CDeskripsi = field.NewString(tableName, "c_deskripsi")
	_tDppb.CStatus = field.NewString(tableName, "c_status")
	_tDppb.CIDGedung = field.NewInt32(tableName, "c_id_gedung")
	_tDppb.CUpdater = field.NewString(tableName, "c_updater")
	_tDppb.CLastUpdate = field.NewTime(tableName, "c_last_update")
	_tDppb.CPetugasInput = field.NewString(tableName, "c_petugas_input")

	_tDppb.fillFieldMap()

	return _tDppb
}

type tDppb struct {
	tDppbDo

	ALL               field.Asterisk
	CIDDppb           field.String
	CTanggalKebutuhan field.Time
	CDeskripsi        field.String
	CStatus           field.String
	CIDGedung         field.Int32
	CUpdater          field.String
	CLastUpdate       field.Time
	CPetugasInput     field.String

	fieldMap map[string]field.Expr
}

func (t tDppb) Table(newTableName string) *tDppb {
	t.tDppbDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tDppb) As(alias string) *tDppb {
	t.tDppbDo.DO = *(t.tDppbDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tDppb) updateTableName(table string) *tDppb {
	t.ALL = field.NewAsterisk(table)
	t.CIDDppb = field.NewString(table, "c_id_dppb")
	t.CTanggalKebutuhan = field.NewTime(table, "c_tanggal_kebutuhan")
	t.CDeskripsi = field.NewString(table, "c_deskripsi")
	t.CStatus = field.NewString(table, "c_status")
	t.CIDGedung = field.NewInt32(table, "c_id_gedung")
	t.CUpdater = field.NewString(table, "c_updater")
	t.CLastUpdate = field.NewTime(table, "c_last_update")
	t.CPetugasInput = field.NewString(table, "c_petugas_input")

	t.fillFieldMap()

	return t
}

func (t *tDppb) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tDppb) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 8)
	t.fieldMap["c_id_dppb"] = t.CIDDppb
	t.fieldMap["c_tanggal_kebutuhan"] = t.CTanggalKebutuhan
	t.fieldMap["c_deskripsi"] = t.CDeskripsi
	t.fieldMap["c_status"] = t.CStatus
	t.fieldMap["c_id_gedung"] = t.CIDGedung
	t.fieldMap["c_updater"] = t.CUpdater
	t.fieldMap["c_last_update"] = t.CLastUpdate
	t.fieldMap["c_petugas_input"] = t.CPetugasInput
}

func (t tDppb) clone(db *gorm.DB) tDppb {
	t.tDppbDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tDppb) replaceDB(db *gorm.DB) tDppb {
	t.tDppbDo.ReplaceDB(db)
	return t
}

type tDppbDo struct{ gen.DO }

type ITDppbDo interface {
	gen.SubQuery
	Debug() ITDppbDo
	WithContext(ctx context.Context) ITDppbDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITDppbDo
	WriteDB() ITDppbDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITDppbDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITDppbDo
	Not(conds ...gen.Condition) ITDppbDo
	Or(conds ...gen.Condition) ITDppbDo
	Select(conds ...field.Expr) ITDppbDo
	Where(conds ...gen.Condition) ITDppbDo
	Order(conds ...field.Expr) ITDppbDo
	Distinct(cols ...field.Expr) ITDppbDo
	Omit(cols ...field.Expr) ITDppbDo
	Join(table schema.Tabler, on ...field.Expr) ITDppbDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITDppbDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITDppbDo
	Group(cols ...field.Expr) ITDppbDo
	Having(conds ...gen.Condition) ITDppbDo
	Limit(limit int) ITDppbDo
	Offset(offset int) ITDppbDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITDppbDo
	Unscoped() ITDppbDo
	Create(values ...*model.TDppb) error
	CreateInBatches(values []*model.TDppb, batchSize int) error
	Save(values ...*model.TDppb) error
	First() (*model.TDppb, error)
	Take() (*model.TDppb, error)
	Last() (*model.TDppb, error)
	Find() ([]*model.TDppb, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TDppb, err error)
	FindInBatches(result *[]*model.TDppb, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TDppb) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITDppbDo
	Assign(attrs ...field.AssignExpr) ITDppbDo
	Joins(fields ...field.RelationField) ITDppbDo
	Preload(fields ...field.RelationField) ITDppbDo
	FirstOrInit() (*model.TDppb, error)
	FirstOrCreate() (*model.TDppb, error)
	FindByPage(offset int, limit int) (result []*model.TDppb, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITDppbDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tDppbDo) Debug() ITDppbDo {
	return t.withDO(t.DO.Debug())
}

func (t tDppbDo) WithContext(ctx context.Context) ITDppbDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tDppbDo) ReadDB() ITDppbDo {
	return t.Clauses(dbresolver.Read)
}

func (t tDppbDo) WriteDB() ITDppbDo {
	return t.Clauses(dbresolver.Write)
}

func (t tDppbDo) Session(config *gorm.Session) ITDppbDo {
	return t.withDO(t.DO.Session(config))
}

func (t tDppbDo) Clauses(conds ...clause.Expression) ITDppbDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tDppbDo) Returning(value interface{}, columns ...string) ITDppbDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tDppbDo) Not(conds ...gen.Condition) ITDppbDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tDppbDo) Or(conds ...gen.Condition) ITDppbDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tDppbDo) Select(conds ...field.Expr) ITDppbDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tDppbDo) Where(conds ...gen.Condition) ITDppbDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tDppbDo) Order(conds ...field.Expr) ITDppbDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tDppbDo) Distinct(cols ...field.Expr) ITDppbDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tDppbDo) Omit(cols ...field.Expr) ITDppbDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tDppbDo) Join(table schema.Tabler, on ...field.Expr) ITDppbDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tDppbDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITDppbDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tDppbDo) RightJoin(table schema.Tabler, on ...field.Expr) ITDppbDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tDppbDo) Group(cols ...field.Expr) ITDppbDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tDppbDo) Having(conds ...gen.Condition) ITDppbDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tDppbDo) Limit(limit int) ITDppbDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tDppbDo) Offset(offset int) ITDppbDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tDppbDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITDppbDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tDppbDo) Unscoped() ITDppbDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tDppbDo) Create(values ...*model.TDppb) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tDppbDo) CreateInBatches(values []*model.TDppb, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tDppbDo) Save(values ...*model.TDppb) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tDppbDo) First() (*model.TDppb, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TDppb), nil
	}
}

func (t tDppbDo) Take() (*model.TDppb, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TDppb), nil
	}
}

func (t tDppbDo) Last() (*model.TDppb, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TDppb), nil
	}
}

func (t tDppbDo) Find() ([]*model.TDppb, error) {
	result, err := t.DO.Find()
	return result.([]*model.TDppb), err
}

func (t tDppbDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TDppb, err error) {
	buf := make([]*model.TDppb, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tDppbDo) FindInBatches(result *[]*model.TDppb, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tDppbDo) Attrs(attrs ...field.AssignExpr) ITDppbDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tDppbDo) Assign(attrs ...field.AssignExpr) ITDppbDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tDppbDo) Joins(fields ...field.RelationField) ITDppbDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tDppbDo) Preload(fields ...field.RelationField) ITDppbDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tDppbDo) FirstOrInit() (*model.TDppb, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TDppb), nil
	}
}

func (t tDppbDo) FirstOrCreate() (*model.TDppb, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TDppb), nil
	}
}

func (t tDppbDo) FindByPage(offset int, limit int) (result []*model.TDppb, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tDppbDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tDppbDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tDppbDo) Delete(models ...*model.TDppb) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tDppbDo) withDO(do gen.Dao) *tDppbDo {
	t.DO = *do.(*gen.DO)
	return t
}
