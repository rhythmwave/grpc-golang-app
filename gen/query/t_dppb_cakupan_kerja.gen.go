// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-bponline/m/gen/model"
)

func newTDppbCakupanKerja(db *gorm.DB, opts ...gen.DOOption) tDppbCakupanKerja {
	_tDppbCakupanKerja := tDppbCakupanKerja{}

	_tDppbCakupanKerja.tDppbCakupanKerjaDo.UseDB(db, opts...)
	_tDppbCakupanKerja.tDppbCakupanKerjaDo.UseModel(&model.TDppbCakupanKerja{})

	tableName := _tDppbCakupanKerja.tDppbCakupanKerjaDo.TableName()
	_tDppbCakupanKerja.ALL = field.NewAsterisk(tableName)
	_tDppbCakupanKerja.CNik = field.NewString(tableName, "c_nik")
	_tDppbCakupanKerja.CIDGedung = field.NewInt32(tableName, "c_id_gedung")
	_tDppbCakupanKerja.CUpdater = field.NewString(tableName, "c_updater")
	_tDppbCakupanKerja.CLastUpdate = field.NewTime(tableName, "c_last_update")

	_tDppbCakupanKerja.fillFieldMap()

	return _tDppbCakupanKerja
}

type tDppbCakupanKerja struct {
	tDppbCakupanKerjaDo

	ALL         field.Asterisk
	CNik        field.String
	CIDGedung   field.Int32
	CUpdater    field.String
	CLastUpdate field.Time

	fieldMap map[string]field.Expr
}

func (t tDppbCakupanKerja) Table(newTableName string) *tDppbCakupanKerja {
	t.tDppbCakupanKerjaDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tDppbCakupanKerja) As(alias string) *tDppbCakupanKerja {
	t.tDppbCakupanKerjaDo.DO = *(t.tDppbCakupanKerjaDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tDppbCakupanKerja) updateTableName(table string) *tDppbCakupanKerja {
	t.ALL = field.NewAsterisk(table)
	t.CNik = field.NewString(table, "c_nik")
	t.CIDGedung = field.NewInt32(table, "c_id_gedung")
	t.CUpdater = field.NewString(table, "c_updater")
	t.CLastUpdate = field.NewTime(table, "c_last_update")

	t.fillFieldMap()

	return t
}

func (t *tDppbCakupanKerja) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tDppbCakupanKerja) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 4)
	t.fieldMap["c_nik"] = t.CNik
	t.fieldMap["c_id_gedung"] = t.CIDGedung
	t.fieldMap["c_updater"] = t.CUpdater
	t.fieldMap["c_last_update"] = t.CLastUpdate
}

func (t tDppbCakupanKerja) clone(db *gorm.DB) tDppbCakupanKerja {
	t.tDppbCakupanKerjaDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tDppbCakupanKerja) replaceDB(db *gorm.DB) tDppbCakupanKerja {
	t.tDppbCakupanKerjaDo.ReplaceDB(db)
	return t
}

type tDppbCakupanKerjaDo struct{ gen.DO }

type ITDppbCakupanKerjaDo interface {
	gen.SubQuery
	Debug() ITDppbCakupanKerjaDo
	WithContext(ctx context.Context) ITDppbCakupanKerjaDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITDppbCakupanKerjaDo
	WriteDB() ITDppbCakupanKerjaDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITDppbCakupanKerjaDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITDppbCakupanKerjaDo
	Not(conds ...gen.Condition) ITDppbCakupanKerjaDo
	Or(conds ...gen.Condition) ITDppbCakupanKerjaDo
	Select(conds ...field.Expr) ITDppbCakupanKerjaDo
	Where(conds ...gen.Condition) ITDppbCakupanKerjaDo
	Order(conds ...field.Expr) ITDppbCakupanKerjaDo
	Distinct(cols ...field.Expr) ITDppbCakupanKerjaDo
	Omit(cols ...field.Expr) ITDppbCakupanKerjaDo
	Join(table schema.Tabler, on ...field.Expr) ITDppbCakupanKerjaDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITDppbCakupanKerjaDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITDppbCakupanKerjaDo
	Group(cols ...field.Expr) ITDppbCakupanKerjaDo
	Having(conds ...gen.Condition) ITDppbCakupanKerjaDo
	Limit(limit int) ITDppbCakupanKerjaDo
	Offset(offset int) ITDppbCakupanKerjaDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITDppbCakupanKerjaDo
	Unscoped() ITDppbCakupanKerjaDo
	Create(values ...*model.TDppbCakupanKerja) error
	CreateInBatches(values []*model.TDppbCakupanKerja, batchSize int) error
	Save(values ...*model.TDppbCakupanKerja) error
	First() (*model.TDppbCakupanKerja, error)
	Take() (*model.TDppbCakupanKerja, error)
	Last() (*model.TDppbCakupanKerja, error)
	Find() ([]*model.TDppbCakupanKerja, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TDppbCakupanKerja, err error)
	FindInBatches(result *[]*model.TDppbCakupanKerja, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TDppbCakupanKerja) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITDppbCakupanKerjaDo
	Assign(attrs ...field.AssignExpr) ITDppbCakupanKerjaDo
	Joins(fields ...field.RelationField) ITDppbCakupanKerjaDo
	Preload(fields ...field.RelationField) ITDppbCakupanKerjaDo
	FirstOrInit() (*model.TDppbCakupanKerja, error)
	FirstOrCreate() (*model.TDppbCakupanKerja, error)
	FindByPage(offset int, limit int) (result []*model.TDppbCakupanKerja, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITDppbCakupanKerjaDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tDppbCakupanKerjaDo) Debug() ITDppbCakupanKerjaDo {
	return t.withDO(t.DO.Debug())
}

func (t tDppbCakupanKerjaDo) WithContext(ctx context.Context) ITDppbCakupanKerjaDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tDppbCakupanKerjaDo) ReadDB() ITDppbCakupanKerjaDo {
	return t.Clauses(dbresolver.Read)
}

func (t tDppbCakupanKerjaDo) WriteDB() ITDppbCakupanKerjaDo {
	return t.Clauses(dbresolver.Write)
}

func (t tDppbCakupanKerjaDo) Session(config *gorm.Session) ITDppbCakupanKerjaDo {
	return t.withDO(t.DO.Session(config))
}

func (t tDppbCakupanKerjaDo) Clauses(conds ...clause.Expression) ITDppbCakupanKerjaDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tDppbCakupanKerjaDo) Returning(value interface{}, columns ...string) ITDppbCakupanKerjaDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tDppbCakupanKerjaDo) Not(conds ...gen.Condition) ITDppbCakupanKerjaDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tDppbCakupanKerjaDo) Or(conds ...gen.Condition) ITDppbCakupanKerjaDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tDppbCakupanKerjaDo) Select(conds ...field.Expr) ITDppbCakupanKerjaDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tDppbCakupanKerjaDo) Where(conds ...gen.Condition) ITDppbCakupanKerjaDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tDppbCakupanKerjaDo) Order(conds ...field.Expr) ITDppbCakupanKerjaDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tDppbCakupanKerjaDo) Distinct(cols ...field.Expr) ITDppbCakupanKerjaDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tDppbCakupanKerjaDo) Omit(cols ...field.Expr) ITDppbCakupanKerjaDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tDppbCakupanKerjaDo) Join(table schema.Tabler, on ...field.Expr) ITDppbCakupanKerjaDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tDppbCakupanKerjaDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITDppbCakupanKerjaDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tDppbCakupanKerjaDo) RightJoin(table schema.Tabler, on ...field.Expr) ITDppbCakupanKerjaDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tDppbCakupanKerjaDo) Group(cols ...field.Expr) ITDppbCakupanKerjaDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tDppbCakupanKerjaDo) Having(conds ...gen.Condition) ITDppbCakupanKerjaDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tDppbCakupanKerjaDo) Limit(limit int) ITDppbCakupanKerjaDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tDppbCakupanKerjaDo) Offset(offset int) ITDppbCakupanKerjaDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tDppbCakupanKerjaDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITDppbCakupanKerjaDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tDppbCakupanKerjaDo) Unscoped() ITDppbCakupanKerjaDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tDppbCakupanKerjaDo) Create(values ...*model.TDppbCakupanKerja) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tDppbCakupanKerjaDo) CreateInBatches(values []*model.TDppbCakupanKerja, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tDppbCakupanKerjaDo) Save(values ...*model.TDppbCakupanKerja) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tDppbCakupanKerjaDo) First() (*model.TDppbCakupanKerja, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TDppbCakupanKerja), nil
	}
}

func (t tDppbCakupanKerjaDo) Take() (*model.TDppbCakupanKerja, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TDppbCakupanKerja), nil
	}
}

func (t tDppbCakupanKerjaDo) Last() (*model.TDppbCakupanKerja, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TDppbCakupanKerja), nil
	}
}

func (t tDppbCakupanKerjaDo) Find() ([]*model.TDppbCakupanKerja, error) {
	result, err := t.DO.Find()
	return result.([]*model.TDppbCakupanKerja), err
}

func (t tDppbCakupanKerjaDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TDppbCakupanKerja, err error) {
	buf := make([]*model.TDppbCakupanKerja, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tDppbCakupanKerjaDo) FindInBatches(result *[]*model.TDppbCakupanKerja, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tDppbCakupanKerjaDo) Attrs(attrs ...field.AssignExpr) ITDppbCakupanKerjaDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tDppbCakupanKerjaDo) Assign(attrs ...field.AssignExpr) ITDppbCakupanKerjaDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tDppbCakupanKerjaDo) Joins(fields ...field.RelationField) ITDppbCakupanKerjaDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tDppbCakupanKerjaDo) Preload(fields ...field.RelationField) ITDppbCakupanKerjaDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tDppbCakupanKerjaDo) FirstOrInit() (*model.TDppbCakupanKerja, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TDppbCakupanKerja), nil
	}
}

func (t tDppbCakupanKerjaDo) FirstOrCreate() (*model.TDppbCakupanKerja, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TDppbCakupanKerja), nil
	}
}

func (t tDppbCakupanKerjaDo) FindByPage(offset int, limit int) (result []*model.TDppbCakupanKerja, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tDppbCakupanKerjaDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tDppbCakupanKerjaDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tDppbCakupanKerjaDo) Delete(models ...*model.TDppbCakupanKerja) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tDppbCakupanKerjaDo) withDO(do gen.Dao) *tDppbCakupanKerjaDo {
	t.DO = *do.(*gen.DO)
	return t
}
