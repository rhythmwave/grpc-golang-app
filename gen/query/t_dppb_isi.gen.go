// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-bponline/m/gen/model"
)

func newTDppbIsi(db *gorm.DB, opts ...gen.DOOption) tDppbIsi {
	_tDppbIsi := tDppbIsi{}

	_tDppbIsi.tDppbIsiDo.UseDB(db, opts...)
	_tDppbIsi.tDppbIsiDo.UseModel(&model.TDppbIsi{})

	tableName := _tDppbIsi.tDppbIsiDo.TableName()
	_tDppbIsi.ALL = field.NewAsterisk(tableName)
	_tDppbIsi.CIDDppbIsi = field.NewInt32(tableName, "c_id_dppb_isi")
	_tDppbIsi.CIDDppb = field.NewString(tableName, "c_id_dppb")
	_tDppbIsi.CIDKegiatan = field.NewInt32(tableName, "c_id_kegiatan")
	_tDppbIsi.CIDVendor = field.NewInt32(tableName, "c_id_vendor")
	_tDppbIsi.CKodeBarang = field.NewString(tableName, "c_kode_barang")
	_tDppbIsi.CNamaBarang = field.NewString(tableName, "c_nama_barang")
	_tDppbIsi.CSpesifikasi = field.NewString(tableName, "c_spesifikasi")
	_tDppbIsi.CSatuan = field.NewString(tableName, "c_satuan")
	_tDppbIsi.CJumlahUsul = field.NewFloat64(tableName, "c_jumlah_usul")
	_tDppbIsi.CJumlahSetujuBidang = field.NewFloat64(tableName, "c_jumlah_setuju_bidang")
	_tDppbIsi.CJumlahSetujuLog = field.NewFloat64(tableName, "c_jumlah_setuju_log")
	_tDppbIsi.CHargaVendor = field.NewFloat64(tableName, "c_harga_vendor")
	_tDppbIsi.CHargaDisetujui = field.NewFloat64(tableName, "c_harga_disetujui")
	_tDppbIsi.CSumberPengadaan = field.NewString(tableName, "c_sumber_pengadaan")
	_tDppbIsi.CStatus = field.NewString(tableName, "c_status")
	_tDppbIsi.CUpdater = field.NewString(tableName, "c_updater")
	_tDppbIsi.CLastUpdate = field.NewTime(tableName, "c_last_update")
	_tDppbIsi.CStatusPengajuan = field.NewString(tableName, "c_status_pengajuan")

	_tDppbIsi.fillFieldMap()

	return _tDppbIsi
}

type tDppbIsi struct {
	tDppbIsiDo

	ALL                 field.Asterisk
	CIDDppbIsi          field.Int32
	CIDDppb             field.String
	CIDKegiatan         field.Int32
	CIDVendor           field.Int32
	CKodeBarang         field.String
	CNamaBarang         field.String
	CSpesifikasi        field.String
	CSatuan             field.String
	CJumlahUsul         field.Float64
	CJumlahSetujuBidang field.Float64
	CJumlahSetujuLog    field.Float64
	CHargaVendor        field.Float64
	CHargaDisetujui     field.Float64
	CSumberPengadaan    field.String
	CStatus             field.String
	CUpdater            field.String
	CLastUpdate         field.Time
	CStatusPengajuan    field.String

	fieldMap map[string]field.Expr
}

func (t tDppbIsi) Table(newTableName string) *tDppbIsi {
	t.tDppbIsiDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tDppbIsi) As(alias string) *tDppbIsi {
	t.tDppbIsiDo.DO = *(t.tDppbIsiDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tDppbIsi) updateTableName(table string) *tDppbIsi {
	t.ALL = field.NewAsterisk(table)
	t.CIDDppbIsi = field.NewInt32(table, "c_id_dppb_isi")
	t.CIDDppb = field.NewString(table, "c_id_dppb")
	t.CIDKegiatan = field.NewInt32(table, "c_id_kegiatan")
	t.CIDVendor = field.NewInt32(table, "c_id_vendor")
	t.CKodeBarang = field.NewString(table, "c_kode_barang")
	t.CNamaBarang = field.NewString(table, "c_nama_barang")
	t.CSpesifikasi = field.NewString(table, "c_spesifikasi")
	t.CSatuan = field.NewString(table, "c_satuan")
	t.CJumlahUsul = field.NewFloat64(table, "c_jumlah_usul")
	t.CJumlahSetujuBidang = field.NewFloat64(table, "c_jumlah_setuju_bidang")
	t.CJumlahSetujuLog = field.NewFloat64(table, "c_jumlah_setuju_log")
	t.CHargaVendor = field.NewFloat64(table, "c_harga_vendor")
	t.CHargaDisetujui = field.NewFloat64(table, "c_harga_disetujui")
	t.CSumberPengadaan = field.NewString(table, "c_sumber_pengadaan")
	t.CStatus = field.NewString(table, "c_status")
	t.CUpdater = field.NewString(table, "c_updater")
	t.CLastUpdate = field.NewTime(table, "c_last_update")
	t.CStatusPengajuan = field.NewString(table, "c_status_pengajuan")

	t.fillFieldMap()

	return t
}

func (t *tDppbIsi) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tDppbIsi) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 18)
	t.fieldMap["c_id_dppb_isi"] = t.CIDDppbIsi
	t.fieldMap["c_id_dppb"] = t.CIDDppb
	t.fieldMap["c_id_kegiatan"] = t.CIDKegiatan
	t.fieldMap["c_id_vendor"] = t.CIDVendor
	t.fieldMap["c_kode_barang"] = t.CKodeBarang
	t.fieldMap["c_nama_barang"] = t.CNamaBarang
	t.fieldMap["c_spesifikasi"] = t.CSpesifikasi
	t.fieldMap["c_satuan"] = t.CSatuan
	t.fieldMap["c_jumlah_usul"] = t.CJumlahUsul
	t.fieldMap["c_jumlah_setuju_bidang"] = t.CJumlahSetujuBidang
	t.fieldMap["c_jumlah_setuju_log"] = t.CJumlahSetujuLog
	t.fieldMap["c_harga_vendor"] = t.CHargaVendor
	t.fieldMap["c_harga_disetujui"] = t.CHargaDisetujui
	t.fieldMap["c_sumber_pengadaan"] = t.CSumberPengadaan
	t.fieldMap["c_status"] = t.CStatus
	t.fieldMap["c_updater"] = t.CUpdater
	t.fieldMap["c_last_update"] = t.CLastUpdate
	t.fieldMap["c_status_pengajuan"] = t.CStatusPengajuan
}

func (t tDppbIsi) clone(db *gorm.DB) tDppbIsi {
	t.tDppbIsiDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tDppbIsi) replaceDB(db *gorm.DB) tDppbIsi {
	t.tDppbIsiDo.ReplaceDB(db)
	return t
}

type tDppbIsiDo struct{ gen.DO }

type ITDppbIsiDo interface {
	gen.SubQuery
	Debug() ITDppbIsiDo
	WithContext(ctx context.Context) ITDppbIsiDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITDppbIsiDo
	WriteDB() ITDppbIsiDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITDppbIsiDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITDppbIsiDo
	Not(conds ...gen.Condition) ITDppbIsiDo
	Or(conds ...gen.Condition) ITDppbIsiDo
	Select(conds ...field.Expr) ITDppbIsiDo
	Where(conds ...gen.Condition) ITDppbIsiDo
	Order(conds ...field.Expr) ITDppbIsiDo
	Distinct(cols ...field.Expr) ITDppbIsiDo
	Omit(cols ...field.Expr) ITDppbIsiDo
	Join(table schema.Tabler, on ...field.Expr) ITDppbIsiDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITDppbIsiDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITDppbIsiDo
	Group(cols ...field.Expr) ITDppbIsiDo
	Having(conds ...gen.Condition) ITDppbIsiDo
	Limit(limit int) ITDppbIsiDo
	Offset(offset int) ITDppbIsiDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITDppbIsiDo
	Unscoped() ITDppbIsiDo
	Create(values ...*model.TDppbIsi) error
	CreateInBatches(values []*model.TDppbIsi, batchSize int) error
	Save(values ...*model.TDppbIsi) error
	First() (*model.TDppbIsi, error)
	Take() (*model.TDppbIsi, error)
	Last() (*model.TDppbIsi, error)
	Find() ([]*model.TDppbIsi, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TDppbIsi, err error)
	FindInBatches(result *[]*model.TDppbIsi, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TDppbIsi) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITDppbIsiDo
	Assign(attrs ...field.AssignExpr) ITDppbIsiDo
	Joins(fields ...field.RelationField) ITDppbIsiDo
	Preload(fields ...field.RelationField) ITDppbIsiDo
	FirstOrInit() (*model.TDppbIsi, error)
	FirstOrCreate() (*model.TDppbIsi, error)
	FindByPage(offset int, limit int) (result []*model.TDppbIsi, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITDppbIsiDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tDppbIsiDo) Debug() ITDppbIsiDo {
	return t.withDO(t.DO.Debug())
}

func (t tDppbIsiDo) WithContext(ctx context.Context) ITDppbIsiDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tDppbIsiDo) ReadDB() ITDppbIsiDo {
	return t.Clauses(dbresolver.Read)
}

func (t tDppbIsiDo) WriteDB() ITDppbIsiDo {
	return t.Clauses(dbresolver.Write)
}

func (t tDppbIsiDo) Session(config *gorm.Session) ITDppbIsiDo {
	return t.withDO(t.DO.Session(config))
}

func (t tDppbIsiDo) Clauses(conds ...clause.Expression) ITDppbIsiDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tDppbIsiDo) Returning(value interface{}, columns ...string) ITDppbIsiDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tDppbIsiDo) Not(conds ...gen.Condition) ITDppbIsiDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tDppbIsiDo) Or(conds ...gen.Condition) ITDppbIsiDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tDppbIsiDo) Select(conds ...field.Expr) ITDppbIsiDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tDppbIsiDo) Where(conds ...gen.Condition) ITDppbIsiDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tDppbIsiDo) Order(conds ...field.Expr) ITDppbIsiDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tDppbIsiDo) Distinct(cols ...field.Expr) ITDppbIsiDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tDppbIsiDo) Omit(cols ...field.Expr) ITDppbIsiDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tDppbIsiDo) Join(table schema.Tabler, on ...field.Expr) ITDppbIsiDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tDppbIsiDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITDppbIsiDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tDppbIsiDo) RightJoin(table schema.Tabler, on ...field.Expr) ITDppbIsiDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tDppbIsiDo) Group(cols ...field.Expr) ITDppbIsiDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tDppbIsiDo) Having(conds ...gen.Condition) ITDppbIsiDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tDppbIsiDo) Limit(limit int) ITDppbIsiDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tDppbIsiDo) Offset(offset int) ITDppbIsiDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tDppbIsiDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITDppbIsiDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tDppbIsiDo) Unscoped() ITDppbIsiDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tDppbIsiDo) Create(values ...*model.TDppbIsi) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tDppbIsiDo) CreateInBatches(values []*model.TDppbIsi, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tDppbIsiDo) Save(values ...*model.TDppbIsi) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tDppbIsiDo) First() (*model.TDppbIsi, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TDppbIsi), nil
	}
}

func (t tDppbIsiDo) Take() (*model.TDppbIsi, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TDppbIsi), nil
	}
}

func (t tDppbIsiDo) Last() (*model.TDppbIsi, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TDppbIsi), nil
	}
}

func (t tDppbIsiDo) Find() ([]*model.TDppbIsi, error) {
	result, err := t.DO.Find()
	return result.([]*model.TDppbIsi), err
}

func (t tDppbIsiDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TDppbIsi, err error) {
	buf := make([]*model.TDppbIsi, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tDppbIsiDo) FindInBatches(result *[]*model.TDppbIsi, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tDppbIsiDo) Attrs(attrs ...field.AssignExpr) ITDppbIsiDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tDppbIsiDo) Assign(attrs ...field.AssignExpr) ITDppbIsiDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tDppbIsiDo) Joins(fields ...field.RelationField) ITDppbIsiDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tDppbIsiDo) Preload(fields ...field.RelationField) ITDppbIsiDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tDppbIsiDo) FirstOrInit() (*model.TDppbIsi, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TDppbIsi), nil
	}
}

func (t tDppbIsiDo) FirstOrCreate() (*model.TDppbIsi, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TDppbIsi), nil
	}
}

func (t tDppbIsiDo) FindByPage(offset int, limit int) (result []*model.TDppbIsi, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tDppbIsiDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tDppbIsiDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tDppbIsiDo) Delete(models ...*model.TDppbIsi) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tDppbIsiDo) withDO(do gen.Dao) *tDppbIsiDo {
	t.DO = *do.(*gen.DO)
	return t
}
