// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-bponline/m/gen/model"
)

func newTDppbLog(db *gorm.DB, opts ...gen.DOOption) tDppbLog {
	_tDppbLog := tDppbLog{}

	_tDppbLog.tDppbLogDo.UseDB(db, opts...)
	_tDppbLog.tDppbLogDo.UseModel(&model.TDppbLog{})

	tableName := _tDppbLog.tDppbLogDo.TableName()
	_tDppbLog.ALL = field.NewAsterisk(tableName)
	_tDppbLog.CIDDppb = field.NewString(tableName, "c_id_dppb")
	_tDppbLog.CLogDppb = field.NewString(tableName, "c_log_dppb")
	_tDppbLog.CLastUpdate = field.NewTime(tableName, "c_last_update")

	_tDppbLog.fillFieldMap()

	return _tDppbLog
}

type tDppbLog struct {
	tDppbLogDo

	ALL         field.Asterisk
	CIDDppb     field.String
	CLogDppb    field.String
	CLastUpdate field.Time

	fieldMap map[string]field.Expr
}

func (t tDppbLog) Table(newTableName string) *tDppbLog {
	t.tDppbLogDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tDppbLog) As(alias string) *tDppbLog {
	t.tDppbLogDo.DO = *(t.tDppbLogDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tDppbLog) updateTableName(table string) *tDppbLog {
	t.ALL = field.NewAsterisk(table)
	t.CIDDppb = field.NewString(table, "c_id_dppb")
	t.CLogDppb = field.NewString(table, "c_log_dppb")
	t.CLastUpdate = field.NewTime(table, "c_last_update")

	t.fillFieldMap()

	return t
}

func (t *tDppbLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tDppbLog) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 3)
	t.fieldMap["c_id_dppb"] = t.CIDDppb
	t.fieldMap["c_log_dppb"] = t.CLogDppb
	t.fieldMap["c_last_update"] = t.CLastUpdate
}

func (t tDppbLog) clone(db *gorm.DB) tDppbLog {
	t.tDppbLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tDppbLog) replaceDB(db *gorm.DB) tDppbLog {
	t.tDppbLogDo.ReplaceDB(db)
	return t
}

type tDppbLogDo struct{ gen.DO }

type ITDppbLogDo interface {
	gen.SubQuery
	Debug() ITDppbLogDo
	WithContext(ctx context.Context) ITDppbLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITDppbLogDo
	WriteDB() ITDppbLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITDppbLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITDppbLogDo
	Not(conds ...gen.Condition) ITDppbLogDo
	Or(conds ...gen.Condition) ITDppbLogDo
	Select(conds ...field.Expr) ITDppbLogDo
	Where(conds ...gen.Condition) ITDppbLogDo
	Order(conds ...field.Expr) ITDppbLogDo
	Distinct(cols ...field.Expr) ITDppbLogDo
	Omit(cols ...field.Expr) ITDppbLogDo
	Join(table schema.Tabler, on ...field.Expr) ITDppbLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITDppbLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITDppbLogDo
	Group(cols ...field.Expr) ITDppbLogDo
	Having(conds ...gen.Condition) ITDppbLogDo
	Limit(limit int) ITDppbLogDo
	Offset(offset int) ITDppbLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITDppbLogDo
	Unscoped() ITDppbLogDo
	Create(values ...*model.TDppbLog) error
	CreateInBatches(values []*model.TDppbLog, batchSize int) error
	Save(values ...*model.TDppbLog) error
	First() (*model.TDppbLog, error)
	Take() (*model.TDppbLog, error)
	Last() (*model.TDppbLog, error)
	Find() ([]*model.TDppbLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TDppbLog, err error)
	FindInBatches(result *[]*model.TDppbLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TDppbLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITDppbLogDo
	Assign(attrs ...field.AssignExpr) ITDppbLogDo
	Joins(fields ...field.RelationField) ITDppbLogDo
	Preload(fields ...field.RelationField) ITDppbLogDo
	FirstOrInit() (*model.TDppbLog, error)
	FirstOrCreate() (*model.TDppbLog, error)
	FindByPage(offset int, limit int) (result []*model.TDppbLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITDppbLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tDppbLogDo) Debug() ITDppbLogDo {
	return t.withDO(t.DO.Debug())
}

func (t tDppbLogDo) WithContext(ctx context.Context) ITDppbLogDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tDppbLogDo) ReadDB() ITDppbLogDo {
	return t.Clauses(dbresolver.Read)
}

func (t tDppbLogDo) WriteDB() ITDppbLogDo {
	return t.Clauses(dbresolver.Write)
}

func (t tDppbLogDo) Session(config *gorm.Session) ITDppbLogDo {
	return t.withDO(t.DO.Session(config))
}

func (t tDppbLogDo) Clauses(conds ...clause.Expression) ITDppbLogDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tDppbLogDo) Returning(value interface{}, columns ...string) ITDppbLogDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tDppbLogDo) Not(conds ...gen.Condition) ITDppbLogDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tDppbLogDo) Or(conds ...gen.Condition) ITDppbLogDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tDppbLogDo) Select(conds ...field.Expr) ITDppbLogDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tDppbLogDo) Where(conds ...gen.Condition) ITDppbLogDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tDppbLogDo) Order(conds ...field.Expr) ITDppbLogDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tDppbLogDo) Distinct(cols ...field.Expr) ITDppbLogDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tDppbLogDo) Omit(cols ...field.Expr) ITDppbLogDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tDppbLogDo) Join(table schema.Tabler, on ...field.Expr) ITDppbLogDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tDppbLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITDppbLogDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tDppbLogDo) RightJoin(table schema.Tabler, on ...field.Expr) ITDppbLogDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tDppbLogDo) Group(cols ...field.Expr) ITDppbLogDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tDppbLogDo) Having(conds ...gen.Condition) ITDppbLogDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tDppbLogDo) Limit(limit int) ITDppbLogDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tDppbLogDo) Offset(offset int) ITDppbLogDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tDppbLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITDppbLogDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tDppbLogDo) Unscoped() ITDppbLogDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tDppbLogDo) Create(values ...*model.TDppbLog) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tDppbLogDo) CreateInBatches(values []*model.TDppbLog, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tDppbLogDo) Save(values ...*model.TDppbLog) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tDppbLogDo) First() (*model.TDppbLog, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TDppbLog), nil
	}
}

func (t tDppbLogDo) Take() (*model.TDppbLog, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TDppbLog), nil
	}
}

func (t tDppbLogDo) Last() (*model.TDppbLog, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TDppbLog), nil
	}
}

func (t tDppbLogDo) Find() ([]*model.TDppbLog, error) {
	result, err := t.DO.Find()
	return result.([]*model.TDppbLog), err
}

func (t tDppbLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TDppbLog, err error) {
	buf := make([]*model.TDppbLog, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tDppbLogDo) FindInBatches(result *[]*model.TDppbLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tDppbLogDo) Attrs(attrs ...field.AssignExpr) ITDppbLogDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tDppbLogDo) Assign(attrs ...field.AssignExpr) ITDppbLogDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tDppbLogDo) Joins(fields ...field.RelationField) ITDppbLogDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tDppbLogDo) Preload(fields ...field.RelationField) ITDppbLogDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tDppbLogDo) FirstOrInit() (*model.TDppbLog, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TDppbLog), nil
	}
}

func (t tDppbLogDo) FirstOrCreate() (*model.TDppbLog, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TDppbLog), nil
	}
}

func (t tDppbLogDo) FindByPage(offset int, limit int) (result []*model.TDppbLog, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tDppbLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tDppbLogDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tDppbLogDo) Delete(models ...*model.TDppbLog) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tDppbLogDo) withDO(do gen.Dao) *tDppbLogDo {
	t.DO = *do.(*gen.DO)
	return t
}
