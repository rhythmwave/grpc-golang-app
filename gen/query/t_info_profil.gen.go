// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-bponline/m/gen/model"
)

func newTInfoProfil(db *gorm.DB, opts ...gen.DOOption) tInfoProfil {
	_tInfoProfil := tInfoProfil{}

	_tInfoProfil.tInfoProfilDo.UseDB(db, opts...)
	_tInfoProfil.tInfoProfilDo.UseModel(&model.TInfoProfil{})

	tableName := _tInfoProfil.tInfoProfilDo.TableName()
	_tInfoProfil.ALL = field.NewAsterisk(tableName)
	_tInfoProfil.CUpline = field.NewInt32(tableName, "c_upline")
	_tInfoProfil.CIDSekolah = field.NewInt32(tableName, "c_id_sekolah")
	_tInfoProfil.CTahunAjaran = field.NewString(tableName, "c_tahun_ajaran")
	_tInfoProfil.CInfo = field.NewString(tableName, "c_info")

	_tInfoProfil.fillFieldMap()

	return _tInfoProfil
}

type tInfoProfil struct {
	tInfoProfilDo

	ALL          field.Asterisk
	CUpline      field.Int32
	CIDSekolah   field.Int32
	CTahunAjaran field.String
	CInfo        field.String

	fieldMap map[string]field.Expr
}

func (t tInfoProfil) Table(newTableName string) *tInfoProfil {
	t.tInfoProfilDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tInfoProfil) As(alias string) *tInfoProfil {
	t.tInfoProfilDo.DO = *(t.tInfoProfilDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tInfoProfil) updateTableName(table string) *tInfoProfil {
	t.ALL = field.NewAsterisk(table)
	t.CUpline = field.NewInt32(table, "c_upline")
	t.CIDSekolah = field.NewInt32(table, "c_id_sekolah")
	t.CTahunAjaran = field.NewString(table, "c_tahun_ajaran")
	t.CInfo = field.NewString(table, "c_info")

	t.fillFieldMap()

	return t
}

func (t *tInfoProfil) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tInfoProfil) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 4)
	t.fieldMap["c_upline"] = t.CUpline
	t.fieldMap["c_id_sekolah"] = t.CIDSekolah
	t.fieldMap["c_tahun_ajaran"] = t.CTahunAjaran
	t.fieldMap["c_info"] = t.CInfo
}

func (t tInfoProfil) clone(db *gorm.DB) tInfoProfil {
	t.tInfoProfilDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tInfoProfil) replaceDB(db *gorm.DB) tInfoProfil {
	t.tInfoProfilDo.ReplaceDB(db)
	return t
}

type tInfoProfilDo struct{ gen.DO }

type ITInfoProfilDo interface {
	gen.SubQuery
	Debug() ITInfoProfilDo
	WithContext(ctx context.Context) ITInfoProfilDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITInfoProfilDo
	WriteDB() ITInfoProfilDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITInfoProfilDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITInfoProfilDo
	Not(conds ...gen.Condition) ITInfoProfilDo
	Or(conds ...gen.Condition) ITInfoProfilDo
	Select(conds ...field.Expr) ITInfoProfilDo
	Where(conds ...gen.Condition) ITInfoProfilDo
	Order(conds ...field.Expr) ITInfoProfilDo
	Distinct(cols ...field.Expr) ITInfoProfilDo
	Omit(cols ...field.Expr) ITInfoProfilDo
	Join(table schema.Tabler, on ...field.Expr) ITInfoProfilDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITInfoProfilDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITInfoProfilDo
	Group(cols ...field.Expr) ITInfoProfilDo
	Having(conds ...gen.Condition) ITInfoProfilDo
	Limit(limit int) ITInfoProfilDo
	Offset(offset int) ITInfoProfilDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITInfoProfilDo
	Unscoped() ITInfoProfilDo
	Create(values ...*model.TInfoProfil) error
	CreateInBatches(values []*model.TInfoProfil, batchSize int) error
	Save(values ...*model.TInfoProfil) error
	First() (*model.TInfoProfil, error)
	Take() (*model.TInfoProfil, error)
	Last() (*model.TInfoProfil, error)
	Find() ([]*model.TInfoProfil, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TInfoProfil, err error)
	FindInBatches(result *[]*model.TInfoProfil, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TInfoProfil) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITInfoProfilDo
	Assign(attrs ...field.AssignExpr) ITInfoProfilDo
	Joins(fields ...field.RelationField) ITInfoProfilDo
	Preload(fields ...field.RelationField) ITInfoProfilDo
	FirstOrInit() (*model.TInfoProfil, error)
	FirstOrCreate() (*model.TInfoProfil, error)
	FindByPage(offset int, limit int) (result []*model.TInfoProfil, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITInfoProfilDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tInfoProfilDo) Debug() ITInfoProfilDo {
	return t.withDO(t.DO.Debug())
}

func (t tInfoProfilDo) WithContext(ctx context.Context) ITInfoProfilDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tInfoProfilDo) ReadDB() ITInfoProfilDo {
	return t.Clauses(dbresolver.Read)
}

func (t tInfoProfilDo) WriteDB() ITInfoProfilDo {
	return t.Clauses(dbresolver.Write)
}

func (t tInfoProfilDo) Session(config *gorm.Session) ITInfoProfilDo {
	return t.withDO(t.DO.Session(config))
}

func (t tInfoProfilDo) Clauses(conds ...clause.Expression) ITInfoProfilDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tInfoProfilDo) Returning(value interface{}, columns ...string) ITInfoProfilDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tInfoProfilDo) Not(conds ...gen.Condition) ITInfoProfilDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tInfoProfilDo) Or(conds ...gen.Condition) ITInfoProfilDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tInfoProfilDo) Select(conds ...field.Expr) ITInfoProfilDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tInfoProfilDo) Where(conds ...gen.Condition) ITInfoProfilDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tInfoProfilDo) Order(conds ...field.Expr) ITInfoProfilDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tInfoProfilDo) Distinct(cols ...field.Expr) ITInfoProfilDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tInfoProfilDo) Omit(cols ...field.Expr) ITInfoProfilDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tInfoProfilDo) Join(table schema.Tabler, on ...field.Expr) ITInfoProfilDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tInfoProfilDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITInfoProfilDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tInfoProfilDo) RightJoin(table schema.Tabler, on ...field.Expr) ITInfoProfilDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tInfoProfilDo) Group(cols ...field.Expr) ITInfoProfilDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tInfoProfilDo) Having(conds ...gen.Condition) ITInfoProfilDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tInfoProfilDo) Limit(limit int) ITInfoProfilDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tInfoProfilDo) Offset(offset int) ITInfoProfilDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tInfoProfilDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITInfoProfilDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tInfoProfilDo) Unscoped() ITInfoProfilDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tInfoProfilDo) Create(values ...*model.TInfoProfil) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tInfoProfilDo) CreateInBatches(values []*model.TInfoProfil, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tInfoProfilDo) Save(values ...*model.TInfoProfil) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tInfoProfilDo) First() (*model.TInfoProfil, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TInfoProfil), nil
	}
}

func (t tInfoProfilDo) Take() (*model.TInfoProfil, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TInfoProfil), nil
	}
}

func (t tInfoProfilDo) Last() (*model.TInfoProfil, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TInfoProfil), nil
	}
}

func (t tInfoProfilDo) Find() ([]*model.TInfoProfil, error) {
	result, err := t.DO.Find()
	return result.([]*model.TInfoProfil), err
}

func (t tInfoProfilDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TInfoProfil, err error) {
	buf := make([]*model.TInfoProfil, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tInfoProfilDo) FindInBatches(result *[]*model.TInfoProfil, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tInfoProfilDo) Attrs(attrs ...field.AssignExpr) ITInfoProfilDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tInfoProfilDo) Assign(attrs ...field.AssignExpr) ITInfoProfilDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tInfoProfilDo) Joins(fields ...field.RelationField) ITInfoProfilDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tInfoProfilDo) Preload(fields ...field.RelationField) ITInfoProfilDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tInfoProfilDo) FirstOrInit() (*model.TInfoProfil, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TInfoProfil), nil
	}
}

func (t tInfoProfilDo) FirstOrCreate() (*model.TInfoProfil, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TInfoProfil), nil
	}
}

func (t tInfoProfilDo) FindByPage(offset int, limit int) (result []*model.TInfoProfil, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tInfoProfilDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tInfoProfilDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tInfoProfilDo) Delete(models ...*model.TInfoProfil) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tInfoProfilDo) withDO(do gen.Dao) *tInfoProfilDo {
	t.DO = *do.(*gen.DO)
	return t
}
