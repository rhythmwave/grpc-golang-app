// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-bponline/m/gen/model"
)

func newTIsiBe(db *gorm.DB, opts ...gen.DOOption) tIsiBe {
	_tIsiBe := tIsiBe{}

	_tIsiBe.tIsiBeDo.UseDB(db, opts...)
	_tIsiBe.tIsiBeDo.UseModel(&model.TIsiBe{})

	tableName := _tIsiBe.tIsiBeDo.TableName()
	_tIsiBe.ALL = field.NewAsterisk(tableName)
	_tIsiBe.CIDIsiBe = field.NewInt32(tableName, "c_id_isi_be")
	_tIsiBe.CUraianIsi = field.NewString(tableName, "c_uraian_isi")
	_tIsiBe.CKelompokBe = field.NewString(tableName, "c_kelompok_be")
	_tIsiBe.CStatus = field.NewString(tableName, "c_status")
	_tIsiBe.CUpdater = field.NewString(tableName, "c_updater")
	_tIsiBe.CLastUpdate = field.NewTime(tableName, "c_last_update")

	_tIsiBe.fillFieldMap()

	return _tIsiBe
}

type tIsiBe struct {
	tIsiBeDo

	ALL         field.Asterisk
	CIDIsiBe    field.Int32
	CUraianIsi  field.String
	CKelompokBe field.String
	CStatus     field.String
	CUpdater    field.String
	CLastUpdate field.Time

	fieldMap map[string]field.Expr
}

func (t tIsiBe) Table(newTableName string) *tIsiBe {
	t.tIsiBeDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tIsiBe) As(alias string) *tIsiBe {
	t.tIsiBeDo.DO = *(t.tIsiBeDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tIsiBe) updateTableName(table string) *tIsiBe {
	t.ALL = field.NewAsterisk(table)
	t.CIDIsiBe = field.NewInt32(table, "c_id_isi_be")
	t.CUraianIsi = field.NewString(table, "c_uraian_isi")
	t.CKelompokBe = field.NewString(table, "c_kelompok_be")
	t.CStatus = field.NewString(table, "c_status")
	t.CUpdater = field.NewString(table, "c_updater")
	t.CLastUpdate = field.NewTime(table, "c_last_update")

	t.fillFieldMap()

	return t
}

func (t *tIsiBe) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tIsiBe) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 6)
	t.fieldMap["c_id_isi_be"] = t.CIDIsiBe
	t.fieldMap["c_uraian_isi"] = t.CUraianIsi
	t.fieldMap["c_kelompok_be"] = t.CKelompokBe
	t.fieldMap["c_status"] = t.CStatus
	t.fieldMap["c_updater"] = t.CUpdater
	t.fieldMap["c_last_update"] = t.CLastUpdate
}

func (t tIsiBe) clone(db *gorm.DB) tIsiBe {
	t.tIsiBeDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tIsiBe) replaceDB(db *gorm.DB) tIsiBe {
	t.tIsiBeDo.ReplaceDB(db)
	return t
}

type tIsiBeDo struct{ gen.DO }

type ITIsiBeDo interface {
	gen.SubQuery
	Debug() ITIsiBeDo
	WithContext(ctx context.Context) ITIsiBeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITIsiBeDo
	WriteDB() ITIsiBeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITIsiBeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITIsiBeDo
	Not(conds ...gen.Condition) ITIsiBeDo
	Or(conds ...gen.Condition) ITIsiBeDo
	Select(conds ...field.Expr) ITIsiBeDo
	Where(conds ...gen.Condition) ITIsiBeDo
	Order(conds ...field.Expr) ITIsiBeDo
	Distinct(cols ...field.Expr) ITIsiBeDo
	Omit(cols ...field.Expr) ITIsiBeDo
	Join(table schema.Tabler, on ...field.Expr) ITIsiBeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITIsiBeDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITIsiBeDo
	Group(cols ...field.Expr) ITIsiBeDo
	Having(conds ...gen.Condition) ITIsiBeDo
	Limit(limit int) ITIsiBeDo
	Offset(offset int) ITIsiBeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITIsiBeDo
	Unscoped() ITIsiBeDo
	Create(values ...*model.TIsiBe) error
	CreateInBatches(values []*model.TIsiBe, batchSize int) error
	Save(values ...*model.TIsiBe) error
	First() (*model.TIsiBe, error)
	Take() (*model.TIsiBe, error)
	Last() (*model.TIsiBe, error)
	Find() ([]*model.TIsiBe, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TIsiBe, err error)
	FindInBatches(result *[]*model.TIsiBe, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TIsiBe) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITIsiBeDo
	Assign(attrs ...field.AssignExpr) ITIsiBeDo
	Joins(fields ...field.RelationField) ITIsiBeDo
	Preload(fields ...field.RelationField) ITIsiBeDo
	FirstOrInit() (*model.TIsiBe, error)
	FirstOrCreate() (*model.TIsiBe, error)
	FindByPage(offset int, limit int) (result []*model.TIsiBe, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITIsiBeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tIsiBeDo) Debug() ITIsiBeDo {
	return t.withDO(t.DO.Debug())
}

func (t tIsiBeDo) WithContext(ctx context.Context) ITIsiBeDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tIsiBeDo) ReadDB() ITIsiBeDo {
	return t.Clauses(dbresolver.Read)
}

func (t tIsiBeDo) WriteDB() ITIsiBeDo {
	return t.Clauses(dbresolver.Write)
}

func (t tIsiBeDo) Session(config *gorm.Session) ITIsiBeDo {
	return t.withDO(t.DO.Session(config))
}

func (t tIsiBeDo) Clauses(conds ...clause.Expression) ITIsiBeDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tIsiBeDo) Returning(value interface{}, columns ...string) ITIsiBeDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tIsiBeDo) Not(conds ...gen.Condition) ITIsiBeDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tIsiBeDo) Or(conds ...gen.Condition) ITIsiBeDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tIsiBeDo) Select(conds ...field.Expr) ITIsiBeDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tIsiBeDo) Where(conds ...gen.Condition) ITIsiBeDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tIsiBeDo) Order(conds ...field.Expr) ITIsiBeDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tIsiBeDo) Distinct(cols ...field.Expr) ITIsiBeDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tIsiBeDo) Omit(cols ...field.Expr) ITIsiBeDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tIsiBeDo) Join(table schema.Tabler, on ...field.Expr) ITIsiBeDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tIsiBeDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITIsiBeDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tIsiBeDo) RightJoin(table schema.Tabler, on ...field.Expr) ITIsiBeDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tIsiBeDo) Group(cols ...field.Expr) ITIsiBeDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tIsiBeDo) Having(conds ...gen.Condition) ITIsiBeDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tIsiBeDo) Limit(limit int) ITIsiBeDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tIsiBeDo) Offset(offset int) ITIsiBeDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tIsiBeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITIsiBeDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tIsiBeDo) Unscoped() ITIsiBeDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tIsiBeDo) Create(values ...*model.TIsiBe) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tIsiBeDo) CreateInBatches(values []*model.TIsiBe, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tIsiBeDo) Save(values ...*model.TIsiBe) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tIsiBeDo) First() (*model.TIsiBe, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TIsiBe), nil
	}
}

func (t tIsiBeDo) Take() (*model.TIsiBe, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TIsiBe), nil
	}
}

func (t tIsiBeDo) Last() (*model.TIsiBe, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TIsiBe), nil
	}
}

func (t tIsiBeDo) Find() ([]*model.TIsiBe, error) {
	result, err := t.DO.Find()
	return result.([]*model.TIsiBe), err
}

func (t tIsiBeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TIsiBe, err error) {
	buf := make([]*model.TIsiBe, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tIsiBeDo) FindInBatches(result *[]*model.TIsiBe, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tIsiBeDo) Attrs(attrs ...field.AssignExpr) ITIsiBeDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tIsiBeDo) Assign(attrs ...field.AssignExpr) ITIsiBeDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tIsiBeDo) Joins(fields ...field.RelationField) ITIsiBeDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tIsiBeDo) Preload(fields ...field.RelationField) ITIsiBeDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tIsiBeDo) FirstOrInit() (*model.TIsiBe, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TIsiBe), nil
	}
}

func (t tIsiBeDo) FirstOrCreate() (*model.TIsiBe, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TIsiBe), nil
	}
}

func (t tIsiBeDo) FindByPage(offset int, limit int) (result []*model.TIsiBe, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tIsiBeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tIsiBeDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tIsiBeDo) Delete(models ...*model.TIsiBe) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tIsiBeDo) withDO(do gen.Dao) *tIsiBeDo {
	t.DO = *do.(*gen.DO)
	return t
}
