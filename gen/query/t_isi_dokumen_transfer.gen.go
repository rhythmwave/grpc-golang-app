// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-bponline/m/gen/model"
)

func newTIsiDokumenTransfer(db *gorm.DB, opts ...gen.DOOption) tIsiDokumenTransfer {
	_tIsiDokumenTransfer := tIsiDokumenTransfer{}

	_tIsiDokumenTransfer.tIsiDokumenTransferDo.UseDB(db, opts...)
	_tIsiDokumenTransfer.tIsiDokumenTransferDo.UseModel(&model.TIsiDokumenTransfer{})

	tableName := _tIsiDokumenTransfer.tIsiDokumenTransferDo.TableName()
	_tIsiDokumenTransfer.ALL = field.NewAsterisk(tableName)
	_tIsiDokumenTransfer.CIDDokumenTransfer = field.NewString(tableName, "c_id_dokumen_transfer")
	_tIsiDokumenTransfer.CKodeSplit = field.NewString(tableName, "c_kode_split")
	_tIsiDokumenTransfer.CStatus = field.NewString(tableName, "c_status")
	_tIsiDokumenTransfer.CUpdater = field.NewString(tableName, "c_updater")
	_tIsiDokumenTransfer.CLastUpdate = field.NewTime(tableName, "c_last_update")

	_tIsiDokumenTransfer.fillFieldMap()

	return _tIsiDokumenTransfer
}

type tIsiDokumenTransfer struct {
	tIsiDokumenTransferDo

	ALL                field.Asterisk
	CIDDokumenTransfer field.String
	CKodeSplit         field.String
	CStatus            field.String
	CUpdater           field.String
	CLastUpdate        field.Time

	fieldMap map[string]field.Expr
}

func (t tIsiDokumenTransfer) Table(newTableName string) *tIsiDokumenTransfer {
	t.tIsiDokumenTransferDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tIsiDokumenTransfer) As(alias string) *tIsiDokumenTransfer {
	t.tIsiDokumenTransferDo.DO = *(t.tIsiDokumenTransferDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tIsiDokumenTransfer) updateTableName(table string) *tIsiDokumenTransfer {
	t.ALL = field.NewAsterisk(table)
	t.CIDDokumenTransfer = field.NewString(table, "c_id_dokumen_transfer")
	t.CKodeSplit = field.NewString(table, "c_kode_split")
	t.CStatus = field.NewString(table, "c_status")
	t.CUpdater = field.NewString(table, "c_updater")
	t.CLastUpdate = field.NewTime(table, "c_last_update")

	t.fillFieldMap()

	return t
}

func (t *tIsiDokumenTransfer) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tIsiDokumenTransfer) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 5)
	t.fieldMap["c_id_dokumen_transfer"] = t.CIDDokumenTransfer
	t.fieldMap["c_kode_split"] = t.CKodeSplit
	t.fieldMap["c_status"] = t.CStatus
	t.fieldMap["c_updater"] = t.CUpdater
	t.fieldMap["c_last_update"] = t.CLastUpdate
}

func (t tIsiDokumenTransfer) clone(db *gorm.DB) tIsiDokumenTransfer {
	t.tIsiDokumenTransferDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tIsiDokumenTransfer) replaceDB(db *gorm.DB) tIsiDokumenTransfer {
	t.tIsiDokumenTransferDo.ReplaceDB(db)
	return t
}

type tIsiDokumenTransferDo struct{ gen.DO }

type ITIsiDokumenTransferDo interface {
	gen.SubQuery
	Debug() ITIsiDokumenTransferDo
	WithContext(ctx context.Context) ITIsiDokumenTransferDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITIsiDokumenTransferDo
	WriteDB() ITIsiDokumenTransferDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITIsiDokumenTransferDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITIsiDokumenTransferDo
	Not(conds ...gen.Condition) ITIsiDokumenTransferDo
	Or(conds ...gen.Condition) ITIsiDokumenTransferDo
	Select(conds ...field.Expr) ITIsiDokumenTransferDo
	Where(conds ...gen.Condition) ITIsiDokumenTransferDo
	Order(conds ...field.Expr) ITIsiDokumenTransferDo
	Distinct(cols ...field.Expr) ITIsiDokumenTransferDo
	Omit(cols ...field.Expr) ITIsiDokumenTransferDo
	Join(table schema.Tabler, on ...field.Expr) ITIsiDokumenTransferDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITIsiDokumenTransferDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITIsiDokumenTransferDo
	Group(cols ...field.Expr) ITIsiDokumenTransferDo
	Having(conds ...gen.Condition) ITIsiDokumenTransferDo
	Limit(limit int) ITIsiDokumenTransferDo
	Offset(offset int) ITIsiDokumenTransferDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITIsiDokumenTransferDo
	Unscoped() ITIsiDokumenTransferDo
	Create(values ...*model.TIsiDokumenTransfer) error
	CreateInBatches(values []*model.TIsiDokumenTransfer, batchSize int) error
	Save(values ...*model.TIsiDokumenTransfer) error
	First() (*model.TIsiDokumenTransfer, error)
	Take() (*model.TIsiDokumenTransfer, error)
	Last() (*model.TIsiDokumenTransfer, error)
	Find() ([]*model.TIsiDokumenTransfer, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TIsiDokumenTransfer, err error)
	FindInBatches(result *[]*model.TIsiDokumenTransfer, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TIsiDokumenTransfer) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITIsiDokumenTransferDo
	Assign(attrs ...field.AssignExpr) ITIsiDokumenTransferDo
	Joins(fields ...field.RelationField) ITIsiDokumenTransferDo
	Preload(fields ...field.RelationField) ITIsiDokumenTransferDo
	FirstOrInit() (*model.TIsiDokumenTransfer, error)
	FirstOrCreate() (*model.TIsiDokumenTransfer, error)
	FindByPage(offset int, limit int) (result []*model.TIsiDokumenTransfer, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITIsiDokumenTransferDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tIsiDokumenTransferDo) Debug() ITIsiDokumenTransferDo {
	return t.withDO(t.DO.Debug())
}

func (t tIsiDokumenTransferDo) WithContext(ctx context.Context) ITIsiDokumenTransferDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tIsiDokumenTransferDo) ReadDB() ITIsiDokumenTransferDo {
	return t.Clauses(dbresolver.Read)
}

func (t tIsiDokumenTransferDo) WriteDB() ITIsiDokumenTransferDo {
	return t.Clauses(dbresolver.Write)
}

func (t tIsiDokumenTransferDo) Session(config *gorm.Session) ITIsiDokumenTransferDo {
	return t.withDO(t.DO.Session(config))
}

func (t tIsiDokumenTransferDo) Clauses(conds ...clause.Expression) ITIsiDokumenTransferDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tIsiDokumenTransferDo) Returning(value interface{}, columns ...string) ITIsiDokumenTransferDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tIsiDokumenTransferDo) Not(conds ...gen.Condition) ITIsiDokumenTransferDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tIsiDokumenTransferDo) Or(conds ...gen.Condition) ITIsiDokumenTransferDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tIsiDokumenTransferDo) Select(conds ...field.Expr) ITIsiDokumenTransferDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tIsiDokumenTransferDo) Where(conds ...gen.Condition) ITIsiDokumenTransferDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tIsiDokumenTransferDo) Order(conds ...field.Expr) ITIsiDokumenTransferDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tIsiDokumenTransferDo) Distinct(cols ...field.Expr) ITIsiDokumenTransferDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tIsiDokumenTransferDo) Omit(cols ...field.Expr) ITIsiDokumenTransferDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tIsiDokumenTransferDo) Join(table schema.Tabler, on ...field.Expr) ITIsiDokumenTransferDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tIsiDokumenTransferDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITIsiDokumenTransferDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tIsiDokumenTransferDo) RightJoin(table schema.Tabler, on ...field.Expr) ITIsiDokumenTransferDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tIsiDokumenTransferDo) Group(cols ...field.Expr) ITIsiDokumenTransferDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tIsiDokumenTransferDo) Having(conds ...gen.Condition) ITIsiDokumenTransferDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tIsiDokumenTransferDo) Limit(limit int) ITIsiDokumenTransferDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tIsiDokumenTransferDo) Offset(offset int) ITIsiDokumenTransferDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tIsiDokumenTransferDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITIsiDokumenTransferDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tIsiDokumenTransferDo) Unscoped() ITIsiDokumenTransferDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tIsiDokumenTransferDo) Create(values ...*model.TIsiDokumenTransfer) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tIsiDokumenTransferDo) CreateInBatches(values []*model.TIsiDokumenTransfer, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tIsiDokumenTransferDo) Save(values ...*model.TIsiDokumenTransfer) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tIsiDokumenTransferDo) First() (*model.TIsiDokumenTransfer, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TIsiDokumenTransfer), nil
	}
}

func (t tIsiDokumenTransferDo) Take() (*model.TIsiDokumenTransfer, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TIsiDokumenTransfer), nil
	}
}

func (t tIsiDokumenTransferDo) Last() (*model.TIsiDokumenTransfer, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TIsiDokumenTransfer), nil
	}
}

func (t tIsiDokumenTransferDo) Find() ([]*model.TIsiDokumenTransfer, error) {
	result, err := t.DO.Find()
	return result.([]*model.TIsiDokumenTransfer), err
}

func (t tIsiDokumenTransferDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TIsiDokumenTransfer, err error) {
	buf := make([]*model.TIsiDokumenTransfer, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tIsiDokumenTransferDo) FindInBatches(result *[]*model.TIsiDokumenTransfer, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tIsiDokumenTransferDo) Attrs(attrs ...field.AssignExpr) ITIsiDokumenTransferDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tIsiDokumenTransferDo) Assign(attrs ...field.AssignExpr) ITIsiDokumenTransferDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tIsiDokumenTransferDo) Joins(fields ...field.RelationField) ITIsiDokumenTransferDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tIsiDokumenTransferDo) Preload(fields ...field.RelationField) ITIsiDokumenTransferDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tIsiDokumenTransferDo) FirstOrInit() (*model.TIsiDokumenTransfer, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TIsiDokumenTransfer), nil
	}
}

func (t tIsiDokumenTransferDo) FirstOrCreate() (*model.TIsiDokumenTransfer, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TIsiDokumenTransfer), nil
	}
}

func (t tIsiDokumenTransferDo) FindByPage(offset int, limit int) (result []*model.TIsiDokumenTransfer, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tIsiDokumenTransferDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tIsiDokumenTransferDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tIsiDokumenTransferDo) Delete(models ...*model.TIsiDokumenTransfer) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tIsiDokumenTransferDo) withDO(do gen.Dao) *tIsiDokumenTransferDo {
	t.DO = *do.(*gen.DO)
	return t
}
