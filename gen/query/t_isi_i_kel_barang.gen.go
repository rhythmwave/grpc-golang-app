// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-bponline/m/gen/model"
)

func newTIsiIKelBarang(db *gorm.DB, opts ...gen.DOOption) tIsiIKelBarang {
	_tIsiIKelBarang := tIsiIKelBarang{}

	_tIsiIKelBarang.tIsiIKelBarangDo.UseDB(db, opts...)
	_tIsiIKelBarang.tIsiIKelBarangDo.UseModel(&model.TIsiIKelBarang{})

	tableName := _tIsiIKelBarang.tIsiIKelBarangDo.TableName()
	_tIsiIKelBarang.ALL = field.NewAsterisk(tableName)
	_tIsiIKelBarang.CKodeKelBarang = field.NewString(tableName, "c_kode_kel_barang")
	_tIsiIKelBarang.CKodeBarang = field.NewString(tableName, "c_kode_barang")
	_tIsiIKelBarang.CUpdater = field.NewString(tableName, "c_updater")
	_tIsiIKelBarang.CLastUpdate = field.NewTime(tableName, "c_last_update")

	_tIsiIKelBarang.fillFieldMap()

	return _tIsiIKelBarang
}

type tIsiIKelBarang struct {
	tIsiIKelBarangDo

	ALL            field.Asterisk
	CKodeKelBarang field.String
	CKodeBarang    field.String
	CUpdater       field.String
	CLastUpdate    field.Time

	fieldMap map[string]field.Expr
}

func (t tIsiIKelBarang) Table(newTableName string) *tIsiIKelBarang {
	t.tIsiIKelBarangDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tIsiIKelBarang) As(alias string) *tIsiIKelBarang {
	t.tIsiIKelBarangDo.DO = *(t.tIsiIKelBarangDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tIsiIKelBarang) updateTableName(table string) *tIsiIKelBarang {
	t.ALL = field.NewAsterisk(table)
	t.CKodeKelBarang = field.NewString(table, "c_kode_kel_barang")
	t.CKodeBarang = field.NewString(table, "c_kode_barang")
	t.CUpdater = field.NewString(table, "c_updater")
	t.CLastUpdate = field.NewTime(table, "c_last_update")

	t.fillFieldMap()

	return t
}

func (t *tIsiIKelBarang) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tIsiIKelBarang) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 4)
	t.fieldMap["c_kode_kel_barang"] = t.CKodeKelBarang
	t.fieldMap["c_kode_barang"] = t.CKodeBarang
	t.fieldMap["c_updater"] = t.CUpdater
	t.fieldMap["c_last_update"] = t.CLastUpdate
}

func (t tIsiIKelBarang) clone(db *gorm.DB) tIsiIKelBarang {
	t.tIsiIKelBarangDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tIsiIKelBarang) replaceDB(db *gorm.DB) tIsiIKelBarang {
	t.tIsiIKelBarangDo.ReplaceDB(db)
	return t
}

type tIsiIKelBarangDo struct{ gen.DO }

type ITIsiIKelBarangDo interface {
	gen.SubQuery
	Debug() ITIsiIKelBarangDo
	WithContext(ctx context.Context) ITIsiIKelBarangDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITIsiIKelBarangDo
	WriteDB() ITIsiIKelBarangDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITIsiIKelBarangDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITIsiIKelBarangDo
	Not(conds ...gen.Condition) ITIsiIKelBarangDo
	Or(conds ...gen.Condition) ITIsiIKelBarangDo
	Select(conds ...field.Expr) ITIsiIKelBarangDo
	Where(conds ...gen.Condition) ITIsiIKelBarangDo
	Order(conds ...field.Expr) ITIsiIKelBarangDo
	Distinct(cols ...field.Expr) ITIsiIKelBarangDo
	Omit(cols ...field.Expr) ITIsiIKelBarangDo
	Join(table schema.Tabler, on ...field.Expr) ITIsiIKelBarangDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITIsiIKelBarangDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITIsiIKelBarangDo
	Group(cols ...field.Expr) ITIsiIKelBarangDo
	Having(conds ...gen.Condition) ITIsiIKelBarangDo
	Limit(limit int) ITIsiIKelBarangDo
	Offset(offset int) ITIsiIKelBarangDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITIsiIKelBarangDo
	Unscoped() ITIsiIKelBarangDo
	Create(values ...*model.TIsiIKelBarang) error
	CreateInBatches(values []*model.TIsiIKelBarang, batchSize int) error
	Save(values ...*model.TIsiIKelBarang) error
	First() (*model.TIsiIKelBarang, error)
	Take() (*model.TIsiIKelBarang, error)
	Last() (*model.TIsiIKelBarang, error)
	Find() ([]*model.TIsiIKelBarang, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TIsiIKelBarang, err error)
	FindInBatches(result *[]*model.TIsiIKelBarang, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TIsiIKelBarang) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITIsiIKelBarangDo
	Assign(attrs ...field.AssignExpr) ITIsiIKelBarangDo
	Joins(fields ...field.RelationField) ITIsiIKelBarangDo
	Preload(fields ...field.RelationField) ITIsiIKelBarangDo
	FirstOrInit() (*model.TIsiIKelBarang, error)
	FirstOrCreate() (*model.TIsiIKelBarang, error)
	FindByPage(offset int, limit int) (result []*model.TIsiIKelBarang, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITIsiIKelBarangDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tIsiIKelBarangDo) Debug() ITIsiIKelBarangDo {
	return t.withDO(t.DO.Debug())
}

func (t tIsiIKelBarangDo) WithContext(ctx context.Context) ITIsiIKelBarangDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tIsiIKelBarangDo) ReadDB() ITIsiIKelBarangDo {
	return t.Clauses(dbresolver.Read)
}

func (t tIsiIKelBarangDo) WriteDB() ITIsiIKelBarangDo {
	return t.Clauses(dbresolver.Write)
}

func (t tIsiIKelBarangDo) Session(config *gorm.Session) ITIsiIKelBarangDo {
	return t.withDO(t.DO.Session(config))
}

func (t tIsiIKelBarangDo) Clauses(conds ...clause.Expression) ITIsiIKelBarangDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tIsiIKelBarangDo) Returning(value interface{}, columns ...string) ITIsiIKelBarangDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tIsiIKelBarangDo) Not(conds ...gen.Condition) ITIsiIKelBarangDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tIsiIKelBarangDo) Or(conds ...gen.Condition) ITIsiIKelBarangDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tIsiIKelBarangDo) Select(conds ...field.Expr) ITIsiIKelBarangDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tIsiIKelBarangDo) Where(conds ...gen.Condition) ITIsiIKelBarangDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tIsiIKelBarangDo) Order(conds ...field.Expr) ITIsiIKelBarangDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tIsiIKelBarangDo) Distinct(cols ...field.Expr) ITIsiIKelBarangDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tIsiIKelBarangDo) Omit(cols ...field.Expr) ITIsiIKelBarangDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tIsiIKelBarangDo) Join(table schema.Tabler, on ...field.Expr) ITIsiIKelBarangDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tIsiIKelBarangDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITIsiIKelBarangDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tIsiIKelBarangDo) RightJoin(table schema.Tabler, on ...field.Expr) ITIsiIKelBarangDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tIsiIKelBarangDo) Group(cols ...field.Expr) ITIsiIKelBarangDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tIsiIKelBarangDo) Having(conds ...gen.Condition) ITIsiIKelBarangDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tIsiIKelBarangDo) Limit(limit int) ITIsiIKelBarangDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tIsiIKelBarangDo) Offset(offset int) ITIsiIKelBarangDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tIsiIKelBarangDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITIsiIKelBarangDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tIsiIKelBarangDo) Unscoped() ITIsiIKelBarangDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tIsiIKelBarangDo) Create(values ...*model.TIsiIKelBarang) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tIsiIKelBarangDo) CreateInBatches(values []*model.TIsiIKelBarang, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tIsiIKelBarangDo) Save(values ...*model.TIsiIKelBarang) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tIsiIKelBarangDo) First() (*model.TIsiIKelBarang, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TIsiIKelBarang), nil
	}
}

func (t tIsiIKelBarangDo) Take() (*model.TIsiIKelBarang, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TIsiIKelBarang), nil
	}
}

func (t tIsiIKelBarangDo) Last() (*model.TIsiIKelBarang, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TIsiIKelBarang), nil
	}
}

func (t tIsiIKelBarangDo) Find() ([]*model.TIsiIKelBarang, error) {
	result, err := t.DO.Find()
	return result.([]*model.TIsiIKelBarang), err
}

func (t tIsiIKelBarangDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TIsiIKelBarang, err error) {
	buf := make([]*model.TIsiIKelBarang, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tIsiIKelBarangDo) FindInBatches(result *[]*model.TIsiIKelBarang, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tIsiIKelBarangDo) Attrs(attrs ...field.AssignExpr) ITIsiIKelBarangDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tIsiIKelBarangDo) Assign(attrs ...field.AssignExpr) ITIsiIKelBarangDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tIsiIKelBarangDo) Joins(fields ...field.RelationField) ITIsiIKelBarangDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tIsiIKelBarangDo) Preload(fields ...field.RelationField) ITIsiIKelBarangDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tIsiIKelBarangDo) FirstOrInit() (*model.TIsiIKelBarang, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TIsiIKelBarang), nil
	}
}

func (t tIsiIKelBarangDo) FirstOrCreate() (*model.TIsiIKelBarang, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TIsiIKelBarang), nil
	}
}

func (t tIsiIKelBarangDo) FindByPage(offset int, limit int) (result []*model.TIsiIKelBarang, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tIsiIKelBarangDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tIsiIKelBarangDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tIsiIKelBarangDo) Delete(models ...*model.TIsiIKelBarang) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tIsiIKelBarangDo) withDO(do gen.Dao) *tIsiIKelBarangDo {
	t.DO = *do.(*gen.DO)
	return t
}
