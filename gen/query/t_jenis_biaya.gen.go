// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-bponline/m/gen/model"
)

func newTJenisBiaya(db *gorm.DB, opts ...gen.DOOption) tJenisBiaya {
	_tJenisBiaya := tJenisBiaya{}

	_tJenisBiaya.tJenisBiayaDo.UseDB(db, opts...)
	_tJenisBiaya.tJenisBiayaDo.UseModel(&model.TJenisBiaya{})

	tableName := _tJenisBiaya.tJenisBiayaDo.TableName()
	_tJenisBiaya.ALL = field.NewAsterisk(tableName)
	_tJenisBiaya.CIDJenis = field.NewInt32(tableName, "c_id_jenis")
	_tJenisBiaya.CIDKelompokKegiatan = field.NewInt32(tableName, "c_id_kelompok_kegiatan")
	_tJenisBiaya.CNamaJenis = field.NewString(tableName, "c_nama_jenis")
	_tJenisBiaya.CIsPajak = field.NewInt32(tableName, "c_is_pajak")
	_tJenisBiaya.CUpdater = field.NewString(tableName, "c_updater")
	_tJenisBiaya.CLastUpdate = field.NewTime(tableName, "c_last_update")

	_tJenisBiaya.fillFieldMap()

	return _tJenisBiaya
}

type tJenisBiaya struct {
	tJenisBiayaDo

	ALL                 field.Asterisk
	CIDJenis            field.Int32
	CIDKelompokKegiatan field.Int32
	CNamaJenis          field.String
	CIsPajak            field.Int32
	CUpdater            field.String
	CLastUpdate         field.Time

	fieldMap map[string]field.Expr
}

func (t tJenisBiaya) Table(newTableName string) *tJenisBiaya {
	t.tJenisBiayaDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tJenisBiaya) As(alias string) *tJenisBiaya {
	t.tJenisBiayaDo.DO = *(t.tJenisBiayaDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tJenisBiaya) updateTableName(table string) *tJenisBiaya {
	t.ALL = field.NewAsterisk(table)
	t.CIDJenis = field.NewInt32(table, "c_id_jenis")
	t.CIDKelompokKegiatan = field.NewInt32(table, "c_id_kelompok_kegiatan")
	t.CNamaJenis = field.NewString(table, "c_nama_jenis")
	t.CIsPajak = field.NewInt32(table, "c_is_pajak")
	t.CUpdater = field.NewString(table, "c_updater")
	t.CLastUpdate = field.NewTime(table, "c_last_update")

	t.fillFieldMap()

	return t
}

func (t *tJenisBiaya) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tJenisBiaya) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 6)
	t.fieldMap["c_id_jenis"] = t.CIDJenis
	t.fieldMap["c_id_kelompok_kegiatan"] = t.CIDKelompokKegiatan
	t.fieldMap["c_nama_jenis"] = t.CNamaJenis
	t.fieldMap["c_is_pajak"] = t.CIsPajak
	t.fieldMap["c_updater"] = t.CUpdater
	t.fieldMap["c_last_update"] = t.CLastUpdate
}

func (t tJenisBiaya) clone(db *gorm.DB) tJenisBiaya {
	t.tJenisBiayaDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tJenisBiaya) replaceDB(db *gorm.DB) tJenisBiaya {
	t.tJenisBiayaDo.ReplaceDB(db)
	return t
}

type tJenisBiayaDo struct{ gen.DO }

type ITJenisBiayaDo interface {
	gen.SubQuery
	Debug() ITJenisBiayaDo
	WithContext(ctx context.Context) ITJenisBiayaDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITJenisBiayaDo
	WriteDB() ITJenisBiayaDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITJenisBiayaDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITJenisBiayaDo
	Not(conds ...gen.Condition) ITJenisBiayaDo
	Or(conds ...gen.Condition) ITJenisBiayaDo
	Select(conds ...field.Expr) ITJenisBiayaDo
	Where(conds ...gen.Condition) ITJenisBiayaDo
	Order(conds ...field.Expr) ITJenisBiayaDo
	Distinct(cols ...field.Expr) ITJenisBiayaDo
	Omit(cols ...field.Expr) ITJenisBiayaDo
	Join(table schema.Tabler, on ...field.Expr) ITJenisBiayaDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITJenisBiayaDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITJenisBiayaDo
	Group(cols ...field.Expr) ITJenisBiayaDo
	Having(conds ...gen.Condition) ITJenisBiayaDo
	Limit(limit int) ITJenisBiayaDo
	Offset(offset int) ITJenisBiayaDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITJenisBiayaDo
	Unscoped() ITJenisBiayaDo
	Create(values ...*model.TJenisBiaya) error
	CreateInBatches(values []*model.TJenisBiaya, batchSize int) error
	Save(values ...*model.TJenisBiaya) error
	First() (*model.TJenisBiaya, error)
	Take() (*model.TJenisBiaya, error)
	Last() (*model.TJenisBiaya, error)
	Find() ([]*model.TJenisBiaya, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TJenisBiaya, err error)
	FindInBatches(result *[]*model.TJenisBiaya, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TJenisBiaya) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITJenisBiayaDo
	Assign(attrs ...field.AssignExpr) ITJenisBiayaDo
	Joins(fields ...field.RelationField) ITJenisBiayaDo
	Preload(fields ...field.RelationField) ITJenisBiayaDo
	FirstOrInit() (*model.TJenisBiaya, error)
	FirstOrCreate() (*model.TJenisBiaya, error)
	FindByPage(offset int, limit int) (result []*model.TJenisBiaya, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITJenisBiayaDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tJenisBiayaDo) Debug() ITJenisBiayaDo {
	return t.withDO(t.DO.Debug())
}

func (t tJenisBiayaDo) WithContext(ctx context.Context) ITJenisBiayaDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tJenisBiayaDo) ReadDB() ITJenisBiayaDo {
	return t.Clauses(dbresolver.Read)
}

func (t tJenisBiayaDo) WriteDB() ITJenisBiayaDo {
	return t.Clauses(dbresolver.Write)
}

func (t tJenisBiayaDo) Session(config *gorm.Session) ITJenisBiayaDo {
	return t.withDO(t.DO.Session(config))
}

func (t tJenisBiayaDo) Clauses(conds ...clause.Expression) ITJenisBiayaDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tJenisBiayaDo) Returning(value interface{}, columns ...string) ITJenisBiayaDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tJenisBiayaDo) Not(conds ...gen.Condition) ITJenisBiayaDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tJenisBiayaDo) Or(conds ...gen.Condition) ITJenisBiayaDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tJenisBiayaDo) Select(conds ...field.Expr) ITJenisBiayaDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tJenisBiayaDo) Where(conds ...gen.Condition) ITJenisBiayaDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tJenisBiayaDo) Order(conds ...field.Expr) ITJenisBiayaDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tJenisBiayaDo) Distinct(cols ...field.Expr) ITJenisBiayaDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tJenisBiayaDo) Omit(cols ...field.Expr) ITJenisBiayaDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tJenisBiayaDo) Join(table schema.Tabler, on ...field.Expr) ITJenisBiayaDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tJenisBiayaDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITJenisBiayaDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tJenisBiayaDo) RightJoin(table schema.Tabler, on ...field.Expr) ITJenisBiayaDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tJenisBiayaDo) Group(cols ...field.Expr) ITJenisBiayaDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tJenisBiayaDo) Having(conds ...gen.Condition) ITJenisBiayaDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tJenisBiayaDo) Limit(limit int) ITJenisBiayaDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tJenisBiayaDo) Offset(offset int) ITJenisBiayaDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tJenisBiayaDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITJenisBiayaDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tJenisBiayaDo) Unscoped() ITJenisBiayaDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tJenisBiayaDo) Create(values ...*model.TJenisBiaya) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tJenisBiayaDo) CreateInBatches(values []*model.TJenisBiaya, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tJenisBiayaDo) Save(values ...*model.TJenisBiaya) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tJenisBiayaDo) First() (*model.TJenisBiaya, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TJenisBiaya), nil
	}
}

func (t tJenisBiayaDo) Take() (*model.TJenisBiaya, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TJenisBiaya), nil
	}
}

func (t tJenisBiayaDo) Last() (*model.TJenisBiaya, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TJenisBiaya), nil
	}
}

func (t tJenisBiayaDo) Find() ([]*model.TJenisBiaya, error) {
	result, err := t.DO.Find()
	return result.([]*model.TJenisBiaya), err
}

func (t tJenisBiayaDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TJenisBiaya, err error) {
	buf := make([]*model.TJenisBiaya, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tJenisBiayaDo) FindInBatches(result *[]*model.TJenisBiaya, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tJenisBiayaDo) Attrs(attrs ...field.AssignExpr) ITJenisBiayaDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tJenisBiayaDo) Assign(attrs ...field.AssignExpr) ITJenisBiayaDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tJenisBiayaDo) Joins(fields ...field.RelationField) ITJenisBiayaDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tJenisBiayaDo) Preload(fields ...field.RelationField) ITJenisBiayaDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tJenisBiayaDo) FirstOrInit() (*model.TJenisBiaya, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TJenisBiaya), nil
	}
}

func (t tJenisBiayaDo) FirstOrCreate() (*model.TJenisBiaya, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TJenisBiaya), nil
	}
}

func (t tJenisBiayaDo) FindByPage(offset int, limit int) (result []*model.TJenisBiaya, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tJenisBiayaDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tJenisBiayaDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tJenisBiayaDo) Delete(models ...*model.TJenisBiaya) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tJenisBiayaDo) withDO(do gen.Dao) *tJenisBiayaDo {
	t.DO = *do.(*gen.DO)
	return t
}
