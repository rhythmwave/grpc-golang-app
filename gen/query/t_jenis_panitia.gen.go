// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-bponline/m/gen/model"
)

func newTJenisPanitium(db *gorm.DB, opts ...gen.DOOption) tJenisPanitium {
	_tJenisPanitium := tJenisPanitium{}

	_tJenisPanitium.tJenisPanitiumDo.UseDB(db, opts...)
	_tJenisPanitium.tJenisPanitiumDo.UseModel(&model.TJenisPanitium{})

	tableName := _tJenisPanitium.tJenisPanitiumDo.TableName()
	_tJenisPanitium.ALL = field.NewAsterisk(tableName)
	_tJenisPanitium.CIDKepanitiaan = field.NewInt32(tableName, "c_id_kepanitiaan")
	_tJenisPanitium.CIDKelompokKegiatan = field.NewInt16(tableName, "c_id_kelompok_kegiatan")
	_tJenisPanitium.CNamaKepanitiaan = field.NewString(tableName, "c_nama_kepanitiaan")

	_tJenisPanitium.fillFieldMap()

	return _tJenisPanitium
}

type tJenisPanitium struct {
	tJenisPanitiumDo

	ALL                 field.Asterisk
	CIDKepanitiaan      field.Int32
	CIDKelompokKegiatan field.Int16
	CNamaKepanitiaan    field.String

	fieldMap map[string]field.Expr
}

func (t tJenisPanitium) Table(newTableName string) *tJenisPanitium {
	t.tJenisPanitiumDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tJenisPanitium) As(alias string) *tJenisPanitium {
	t.tJenisPanitiumDo.DO = *(t.tJenisPanitiumDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tJenisPanitium) updateTableName(table string) *tJenisPanitium {
	t.ALL = field.NewAsterisk(table)
	t.CIDKepanitiaan = field.NewInt32(table, "c_id_kepanitiaan")
	t.CIDKelompokKegiatan = field.NewInt16(table, "c_id_kelompok_kegiatan")
	t.CNamaKepanitiaan = field.NewString(table, "c_nama_kepanitiaan")

	t.fillFieldMap()

	return t
}

func (t *tJenisPanitium) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tJenisPanitium) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 3)
	t.fieldMap["c_id_kepanitiaan"] = t.CIDKepanitiaan
	t.fieldMap["c_id_kelompok_kegiatan"] = t.CIDKelompokKegiatan
	t.fieldMap["c_nama_kepanitiaan"] = t.CNamaKepanitiaan
}

func (t tJenisPanitium) clone(db *gorm.DB) tJenisPanitium {
	t.tJenisPanitiumDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tJenisPanitium) replaceDB(db *gorm.DB) tJenisPanitium {
	t.tJenisPanitiumDo.ReplaceDB(db)
	return t
}

type tJenisPanitiumDo struct{ gen.DO }

type ITJenisPanitiumDo interface {
	gen.SubQuery
	Debug() ITJenisPanitiumDo
	WithContext(ctx context.Context) ITJenisPanitiumDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITJenisPanitiumDo
	WriteDB() ITJenisPanitiumDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITJenisPanitiumDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITJenisPanitiumDo
	Not(conds ...gen.Condition) ITJenisPanitiumDo
	Or(conds ...gen.Condition) ITJenisPanitiumDo
	Select(conds ...field.Expr) ITJenisPanitiumDo
	Where(conds ...gen.Condition) ITJenisPanitiumDo
	Order(conds ...field.Expr) ITJenisPanitiumDo
	Distinct(cols ...field.Expr) ITJenisPanitiumDo
	Omit(cols ...field.Expr) ITJenisPanitiumDo
	Join(table schema.Tabler, on ...field.Expr) ITJenisPanitiumDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITJenisPanitiumDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITJenisPanitiumDo
	Group(cols ...field.Expr) ITJenisPanitiumDo
	Having(conds ...gen.Condition) ITJenisPanitiumDo
	Limit(limit int) ITJenisPanitiumDo
	Offset(offset int) ITJenisPanitiumDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITJenisPanitiumDo
	Unscoped() ITJenisPanitiumDo
	Create(values ...*model.TJenisPanitium) error
	CreateInBatches(values []*model.TJenisPanitium, batchSize int) error
	Save(values ...*model.TJenisPanitium) error
	First() (*model.TJenisPanitium, error)
	Take() (*model.TJenisPanitium, error)
	Last() (*model.TJenisPanitium, error)
	Find() ([]*model.TJenisPanitium, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TJenisPanitium, err error)
	FindInBatches(result *[]*model.TJenisPanitium, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TJenisPanitium) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITJenisPanitiumDo
	Assign(attrs ...field.AssignExpr) ITJenisPanitiumDo
	Joins(fields ...field.RelationField) ITJenisPanitiumDo
	Preload(fields ...field.RelationField) ITJenisPanitiumDo
	FirstOrInit() (*model.TJenisPanitium, error)
	FirstOrCreate() (*model.TJenisPanitium, error)
	FindByPage(offset int, limit int) (result []*model.TJenisPanitium, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITJenisPanitiumDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tJenisPanitiumDo) Debug() ITJenisPanitiumDo {
	return t.withDO(t.DO.Debug())
}

func (t tJenisPanitiumDo) WithContext(ctx context.Context) ITJenisPanitiumDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tJenisPanitiumDo) ReadDB() ITJenisPanitiumDo {
	return t.Clauses(dbresolver.Read)
}

func (t tJenisPanitiumDo) WriteDB() ITJenisPanitiumDo {
	return t.Clauses(dbresolver.Write)
}

func (t tJenisPanitiumDo) Session(config *gorm.Session) ITJenisPanitiumDo {
	return t.withDO(t.DO.Session(config))
}

func (t tJenisPanitiumDo) Clauses(conds ...clause.Expression) ITJenisPanitiumDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tJenisPanitiumDo) Returning(value interface{}, columns ...string) ITJenisPanitiumDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tJenisPanitiumDo) Not(conds ...gen.Condition) ITJenisPanitiumDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tJenisPanitiumDo) Or(conds ...gen.Condition) ITJenisPanitiumDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tJenisPanitiumDo) Select(conds ...field.Expr) ITJenisPanitiumDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tJenisPanitiumDo) Where(conds ...gen.Condition) ITJenisPanitiumDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tJenisPanitiumDo) Order(conds ...field.Expr) ITJenisPanitiumDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tJenisPanitiumDo) Distinct(cols ...field.Expr) ITJenisPanitiumDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tJenisPanitiumDo) Omit(cols ...field.Expr) ITJenisPanitiumDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tJenisPanitiumDo) Join(table schema.Tabler, on ...field.Expr) ITJenisPanitiumDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tJenisPanitiumDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITJenisPanitiumDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tJenisPanitiumDo) RightJoin(table schema.Tabler, on ...field.Expr) ITJenisPanitiumDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tJenisPanitiumDo) Group(cols ...field.Expr) ITJenisPanitiumDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tJenisPanitiumDo) Having(conds ...gen.Condition) ITJenisPanitiumDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tJenisPanitiumDo) Limit(limit int) ITJenisPanitiumDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tJenisPanitiumDo) Offset(offset int) ITJenisPanitiumDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tJenisPanitiumDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITJenisPanitiumDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tJenisPanitiumDo) Unscoped() ITJenisPanitiumDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tJenisPanitiumDo) Create(values ...*model.TJenisPanitium) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tJenisPanitiumDo) CreateInBatches(values []*model.TJenisPanitium, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tJenisPanitiumDo) Save(values ...*model.TJenisPanitium) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tJenisPanitiumDo) First() (*model.TJenisPanitium, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TJenisPanitium), nil
	}
}

func (t tJenisPanitiumDo) Take() (*model.TJenisPanitium, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TJenisPanitium), nil
	}
}

func (t tJenisPanitiumDo) Last() (*model.TJenisPanitium, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TJenisPanitium), nil
	}
}

func (t tJenisPanitiumDo) Find() ([]*model.TJenisPanitium, error) {
	result, err := t.DO.Find()
	return result.([]*model.TJenisPanitium), err
}

func (t tJenisPanitiumDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TJenisPanitium, err error) {
	buf := make([]*model.TJenisPanitium, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tJenisPanitiumDo) FindInBatches(result *[]*model.TJenisPanitium, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tJenisPanitiumDo) Attrs(attrs ...field.AssignExpr) ITJenisPanitiumDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tJenisPanitiumDo) Assign(attrs ...field.AssignExpr) ITJenisPanitiumDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tJenisPanitiumDo) Joins(fields ...field.RelationField) ITJenisPanitiumDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tJenisPanitiumDo) Preload(fields ...field.RelationField) ITJenisPanitiumDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tJenisPanitiumDo) FirstOrInit() (*model.TJenisPanitium, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TJenisPanitium), nil
	}
}

func (t tJenisPanitiumDo) FirstOrCreate() (*model.TJenisPanitium, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TJenisPanitium), nil
	}
}

func (t tJenisPanitiumDo) FindByPage(offset int, limit int) (result []*model.TJenisPanitium, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tJenisPanitiumDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tJenisPanitiumDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tJenisPanitiumDo) Delete(models ...*model.TJenisPanitium) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tJenisPanitiumDo) withDO(do gen.Dao) *tJenisPanitiumDo {
	t.DO = *do.(*gen.DO)
	return t
}
