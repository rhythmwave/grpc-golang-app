// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-bponline/m/gen/model"
)

func newTJurusan(db *gorm.DB, opts ...gen.DOOption) tJurusan {
	_tJurusan := tJurusan{}

	_tJurusan.tJurusanDo.UseDB(db, opts...)
	_tJurusan.tJurusanDo.UseModel(&model.TJurusan{})

	tableName := _tJurusan.tJurusanDo.TableName()
	_tJurusan.ALL = field.NewAsterisk(tableName)
	_tJurusan.CIDJurusan = field.NewInt32(tableName, "c_id_jurusan")
	_tJurusan.CIDPerguruanTinggi = field.NewInt32(tableName, "c_id_perguruan_tinggi")
	_tJurusan.CNamaJurusan = field.NewString(tableName, "c_nama_jurusan")
	_tJurusan.CKodeKelompokJurusan = field.NewString(tableName, "c_kode_kelompok_jurusan")
	_tJurusan.CKodeRumpunJurusan = field.NewString(tableName, "c_kode_rumpun_jurusan")
	_tJurusan.CKeterangan = field.NewString(tableName, "c_keterangan")
	_tJurusan.CStatus = field.NewString(tableName, "c_status")
	_tJurusan.CPg = field.NewFloat64(tableName, "c_pg")
	_tJurusan.CPgum = field.NewFloat64(tableName, "c_pgum")
	_tJurusan.CPlum = field.NewFloat64(tableName, "c_plum")
	_tJurusan.CLintasJurusan = field.NewString(tableName, "c_lintas_jurusan")
	_tJurusan.CIsSbmptn = field.NewInt16(tableName, "c_is_sbmptn")
	_tJurusan.CIsUm = field.NewInt16(tableName, "c_is_um")
	_tJurusan.CJenjang = field.NewString(tableName, "c_jenjang")
	_tJurusan.CIsSnmptn = field.NewInt16(tableName, "c_is_snmptn")
	_tJurusan.CUpdater = field.NewString(tableName, "c_updater")
	_tJurusan.CCreatedAt = field.NewTime(tableName, "c_created_at")
	_tJurusan.CLastUpdate = field.NewTime(tableName, "c_last_update")
	_tJurusan.IsSnbp = field.NewBool(tableName, "is_snbp")
	_tJurusan.IsSnbt = field.NewBool(tableName, "is_snbt")
	_tJurusan.CKodeClusterJurusan = field.NewInt32(tableName, "c_kode_cluster_jurusan")

	_tJurusan.fillFieldMap()

	return _tJurusan
}

type tJurusan struct {
	tJurusanDo

	ALL                  field.Asterisk
	CIDJurusan           field.Int32
	CIDPerguruanTinggi   field.Int32
	CNamaJurusan         field.String
	CKodeKelompokJurusan field.String
	CKodeRumpunJurusan   field.String
	CKeterangan          field.String
	CStatus              field.String
	CPg                  field.Float64
	CPgum                field.Float64
	CPlum                field.Float64
	CLintasJurusan       field.String
	CIsSbmptn            field.Int16
	CIsUm                field.Int16
	CJenjang             field.String
	CIsSnmptn            field.Int16
	CUpdater             field.String
	CCreatedAt           field.Time
	CLastUpdate          field.Time
	IsSnbp               field.Bool
	IsSnbt               field.Bool
	CKodeClusterJurusan  field.Int32

	fieldMap map[string]field.Expr
}

func (t tJurusan) Table(newTableName string) *tJurusan {
	t.tJurusanDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tJurusan) As(alias string) *tJurusan {
	t.tJurusanDo.DO = *(t.tJurusanDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tJurusan) updateTableName(table string) *tJurusan {
	t.ALL = field.NewAsterisk(table)
	t.CIDJurusan = field.NewInt32(table, "c_id_jurusan")
	t.CIDPerguruanTinggi = field.NewInt32(table, "c_id_perguruan_tinggi")
	t.CNamaJurusan = field.NewString(table, "c_nama_jurusan")
	t.CKodeKelompokJurusan = field.NewString(table, "c_kode_kelompok_jurusan")
	t.CKodeRumpunJurusan = field.NewString(table, "c_kode_rumpun_jurusan")
	t.CKeterangan = field.NewString(table, "c_keterangan")
	t.CStatus = field.NewString(table, "c_status")
	t.CPg = field.NewFloat64(table, "c_pg")
	t.CPgum = field.NewFloat64(table, "c_pgum")
	t.CPlum = field.NewFloat64(table, "c_plum")
	t.CLintasJurusan = field.NewString(table, "c_lintas_jurusan")
	t.CIsSbmptn = field.NewInt16(table, "c_is_sbmptn")
	t.CIsUm = field.NewInt16(table, "c_is_um")
	t.CJenjang = field.NewString(table, "c_jenjang")
	t.CIsSnmptn = field.NewInt16(table, "c_is_snmptn")
	t.CUpdater = field.NewString(table, "c_updater")
	t.CCreatedAt = field.NewTime(table, "c_created_at")
	t.CLastUpdate = field.NewTime(table, "c_last_update")
	t.IsSnbp = field.NewBool(table, "is_snbp")
	t.IsSnbt = field.NewBool(table, "is_snbt")
	t.CKodeClusterJurusan = field.NewInt32(table, "c_kode_cluster_jurusan")

	t.fillFieldMap()

	return t
}

func (t *tJurusan) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tJurusan) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 21)
	t.fieldMap["c_id_jurusan"] = t.CIDJurusan
	t.fieldMap["c_id_perguruan_tinggi"] = t.CIDPerguruanTinggi
	t.fieldMap["c_nama_jurusan"] = t.CNamaJurusan
	t.fieldMap["c_kode_kelompok_jurusan"] = t.CKodeKelompokJurusan
	t.fieldMap["c_kode_rumpun_jurusan"] = t.CKodeRumpunJurusan
	t.fieldMap["c_keterangan"] = t.CKeterangan
	t.fieldMap["c_status"] = t.CStatus
	t.fieldMap["c_pg"] = t.CPg
	t.fieldMap["c_pgum"] = t.CPgum
	t.fieldMap["c_plum"] = t.CPlum
	t.fieldMap["c_lintas_jurusan"] = t.CLintasJurusan
	t.fieldMap["c_is_sbmptn"] = t.CIsSbmptn
	t.fieldMap["c_is_um"] = t.CIsUm
	t.fieldMap["c_jenjang"] = t.CJenjang
	t.fieldMap["c_is_snmptn"] = t.CIsSnmptn
	t.fieldMap["c_updater"] = t.CUpdater
	t.fieldMap["c_created_at"] = t.CCreatedAt
	t.fieldMap["c_last_update"] = t.CLastUpdate
	t.fieldMap["is_snbp"] = t.IsSnbp
	t.fieldMap["is_snbt"] = t.IsSnbt
	t.fieldMap["c_kode_cluster_jurusan"] = t.CKodeClusterJurusan
}

func (t tJurusan) clone(db *gorm.DB) tJurusan {
	t.tJurusanDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tJurusan) replaceDB(db *gorm.DB) tJurusan {
	t.tJurusanDo.ReplaceDB(db)
	return t
}

type tJurusanDo struct{ gen.DO }

type ITJurusanDo interface {
	gen.SubQuery
	Debug() ITJurusanDo
	WithContext(ctx context.Context) ITJurusanDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITJurusanDo
	WriteDB() ITJurusanDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITJurusanDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITJurusanDo
	Not(conds ...gen.Condition) ITJurusanDo
	Or(conds ...gen.Condition) ITJurusanDo
	Select(conds ...field.Expr) ITJurusanDo
	Where(conds ...gen.Condition) ITJurusanDo
	Order(conds ...field.Expr) ITJurusanDo
	Distinct(cols ...field.Expr) ITJurusanDo
	Omit(cols ...field.Expr) ITJurusanDo
	Join(table schema.Tabler, on ...field.Expr) ITJurusanDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITJurusanDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITJurusanDo
	Group(cols ...field.Expr) ITJurusanDo
	Having(conds ...gen.Condition) ITJurusanDo
	Limit(limit int) ITJurusanDo
	Offset(offset int) ITJurusanDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITJurusanDo
	Unscoped() ITJurusanDo
	Create(values ...*model.TJurusan) error
	CreateInBatches(values []*model.TJurusan, batchSize int) error
	Save(values ...*model.TJurusan) error
	First() (*model.TJurusan, error)
	Take() (*model.TJurusan, error)
	Last() (*model.TJurusan, error)
	Find() ([]*model.TJurusan, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TJurusan, err error)
	FindInBatches(result *[]*model.TJurusan, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TJurusan) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITJurusanDo
	Assign(attrs ...field.AssignExpr) ITJurusanDo
	Joins(fields ...field.RelationField) ITJurusanDo
	Preload(fields ...field.RelationField) ITJurusanDo
	FirstOrInit() (*model.TJurusan, error)
	FirstOrCreate() (*model.TJurusan, error)
	FindByPage(offset int, limit int) (result []*model.TJurusan, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITJurusanDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tJurusanDo) Debug() ITJurusanDo {
	return t.withDO(t.DO.Debug())
}

func (t tJurusanDo) WithContext(ctx context.Context) ITJurusanDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tJurusanDo) ReadDB() ITJurusanDo {
	return t.Clauses(dbresolver.Read)
}

func (t tJurusanDo) WriteDB() ITJurusanDo {
	return t.Clauses(dbresolver.Write)
}

func (t tJurusanDo) Session(config *gorm.Session) ITJurusanDo {
	return t.withDO(t.DO.Session(config))
}

func (t tJurusanDo) Clauses(conds ...clause.Expression) ITJurusanDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tJurusanDo) Returning(value interface{}, columns ...string) ITJurusanDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tJurusanDo) Not(conds ...gen.Condition) ITJurusanDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tJurusanDo) Or(conds ...gen.Condition) ITJurusanDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tJurusanDo) Select(conds ...field.Expr) ITJurusanDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tJurusanDo) Where(conds ...gen.Condition) ITJurusanDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tJurusanDo) Order(conds ...field.Expr) ITJurusanDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tJurusanDo) Distinct(cols ...field.Expr) ITJurusanDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tJurusanDo) Omit(cols ...field.Expr) ITJurusanDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tJurusanDo) Join(table schema.Tabler, on ...field.Expr) ITJurusanDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tJurusanDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITJurusanDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tJurusanDo) RightJoin(table schema.Tabler, on ...field.Expr) ITJurusanDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tJurusanDo) Group(cols ...field.Expr) ITJurusanDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tJurusanDo) Having(conds ...gen.Condition) ITJurusanDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tJurusanDo) Limit(limit int) ITJurusanDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tJurusanDo) Offset(offset int) ITJurusanDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tJurusanDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITJurusanDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tJurusanDo) Unscoped() ITJurusanDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tJurusanDo) Create(values ...*model.TJurusan) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tJurusanDo) CreateInBatches(values []*model.TJurusan, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tJurusanDo) Save(values ...*model.TJurusan) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tJurusanDo) First() (*model.TJurusan, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TJurusan), nil
	}
}

func (t tJurusanDo) Take() (*model.TJurusan, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TJurusan), nil
	}
}

func (t tJurusanDo) Last() (*model.TJurusan, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TJurusan), nil
	}
}

func (t tJurusanDo) Find() ([]*model.TJurusan, error) {
	result, err := t.DO.Find()
	return result.([]*model.TJurusan), err
}

func (t tJurusanDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TJurusan, err error) {
	buf := make([]*model.TJurusan, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tJurusanDo) FindInBatches(result *[]*model.TJurusan, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tJurusanDo) Attrs(attrs ...field.AssignExpr) ITJurusanDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tJurusanDo) Assign(attrs ...field.AssignExpr) ITJurusanDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tJurusanDo) Joins(fields ...field.RelationField) ITJurusanDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tJurusanDo) Preload(fields ...field.RelationField) ITJurusanDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tJurusanDo) FirstOrInit() (*model.TJurusan, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TJurusan), nil
	}
}

func (t tJurusanDo) FirstOrCreate() (*model.TJurusan, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TJurusan), nil
	}
}

func (t tJurusanDo) FindByPage(offset int, limit int) (result []*model.TJurusan, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tJurusanDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tJurusanDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tJurusanDo) Delete(models ...*model.TJurusan) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tJurusanDo) withDO(do gen.Dao) *tJurusanDo {
	t.DO = *do.(*gen.DO)
	return t
}
