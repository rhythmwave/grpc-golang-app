// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-bponline/m/gen/model"
)

func newTKebutuhanAlatPromosi(db *gorm.DB, opts ...gen.DOOption) tKebutuhanAlatPromosi {
	_tKebutuhanAlatPromosi := tKebutuhanAlatPromosi{}

	_tKebutuhanAlatPromosi.tKebutuhanAlatPromosiDo.UseDB(db, opts...)
	_tKebutuhanAlatPromosi.tKebutuhanAlatPromosiDo.UseModel(&model.TKebutuhanAlatPromosi{})

	tableName := _tKebutuhanAlatPromosi.tKebutuhanAlatPromosiDo.TableName()
	_tKebutuhanAlatPromosi.ALL = field.NewAsterisk(tableName)
	_tKebutuhanAlatPromosi.CIDAlat = field.NewInt32(tableName, "c_id_alat")
	_tKebutuhanAlatPromosi.CIDKegiatanPromosi = field.NewInt32(tableName, "c_id_kegiatan_promosi")
	_tKebutuhanAlatPromosi.CJumlah = field.NewFloat64(tableName, "c_jumlah")
	_tKebutuhanAlatPromosi.CJumlahAcc = field.NewInt32(tableName, "c_jumlah_acc")
	_tKebutuhanAlatPromosi.CUpdaterAcc = field.NewString(tableName, "c_updater_acc")
	_tKebutuhanAlatPromosi.CStatus = field.NewString(tableName, "c_status")
	_tKebutuhanAlatPromosi.CUpdater = field.NewString(tableName, "c_updater")
	_tKebutuhanAlatPromosi.CLastUpdate = field.NewTime(tableName, "c_last_update")

	_tKebutuhanAlatPromosi.fillFieldMap()

	return _tKebutuhanAlatPromosi
}

type tKebutuhanAlatPromosi struct {
	tKebutuhanAlatPromosiDo

	ALL                field.Asterisk
	CIDAlat            field.Int32
	CIDKegiatanPromosi field.Int32
	CJumlah            field.Float64
	CJumlahAcc         field.Int32
	CUpdaterAcc        field.String
	CStatus            field.String
	CUpdater           field.String
	CLastUpdate        field.Time

	fieldMap map[string]field.Expr
}

func (t tKebutuhanAlatPromosi) Table(newTableName string) *tKebutuhanAlatPromosi {
	t.tKebutuhanAlatPromosiDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tKebutuhanAlatPromosi) As(alias string) *tKebutuhanAlatPromosi {
	t.tKebutuhanAlatPromosiDo.DO = *(t.tKebutuhanAlatPromosiDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tKebutuhanAlatPromosi) updateTableName(table string) *tKebutuhanAlatPromosi {
	t.ALL = field.NewAsterisk(table)
	t.CIDAlat = field.NewInt32(table, "c_id_alat")
	t.CIDKegiatanPromosi = field.NewInt32(table, "c_id_kegiatan_promosi")
	t.CJumlah = field.NewFloat64(table, "c_jumlah")
	t.CJumlahAcc = field.NewInt32(table, "c_jumlah_acc")
	t.CUpdaterAcc = field.NewString(table, "c_updater_acc")
	t.CStatus = field.NewString(table, "c_status")
	t.CUpdater = field.NewString(table, "c_updater")
	t.CLastUpdate = field.NewTime(table, "c_last_update")

	t.fillFieldMap()

	return t
}

func (t *tKebutuhanAlatPromosi) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tKebutuhanAlatPromosi) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 8)
	t.fieldMap["c_id_alat"] = t.CIDAlat
	t.fieldMap["c_id_kegiatan_promosi"] = t.CIDKegiatanPromosi
	t.fieldMap["c_jumlah"] = t.CJumlah
	t.fieldMap["c_jumlah_acc"] = t.CJumlahAcc
	t.fieldMap["c_updater_acc"] = t.CUpdaterAcc
	t.fieldMap["c_status"] = t.CStatus
	t.fieldMap["c_updater"] = t.CUpdater
	t.fieldMap["c_last_update"] = t.CLastUpdate
}

func (t tKebutuhanAlatPromosi) clone(db *gorm.DB) tKebutuhanAlatPromosi {
	t.tKebutuhanAlatPromosiDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tKebutuhanAlatPromosi) replaceDB(db *gorm.DB) tKebutuhanAlatPromosi {
	t.tKebutuhanAlatPromosiDo.ReplaceDB(db)
	return t
}

type tKebutuhanAlatPromosiDo struct{ gen.DO }

type ITKebutuhanAlatPromosiDo interface {
	gen.SubQuery
	Debug() ITKebutuhanAlatPromosiDo
	WithContext(ctx context.Context) ITKebutuhanAlatPromosiDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITKebutuhanAlatPromosiDo
	WriteDB() ITKebutuhanAlatPromosiDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITKebutuhanAlatPromosiDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITKebutuhanAlatPromosiDo
	Not(conds ...gen.Condition) ITKebutuhanAlatPromosiDo
	Or(conds ...gen.Condition) ITKebutuhanAlatPromosiDo
	Select(conds ...field.Expr) ITKebutuhanAlatPromosiDo
	Where(conds ...gen.Condition) ITKebutuhanAlatPromosiDo
	Order(conds ...field.Expr) ITKebutuhanAlatPromosiDo
	Distinct(cols ...field.Expr) ITKebutuhanAlatPromosiDo
	Omit(cols ...field.Expr) ITKebutuhanAlatPromosiDo
	Join(table schema.Tabler, on ...field.Expr) ITKebutuhanAlatPromosiDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITKebutuhanAlatPromosiDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITKebutuhanAlatPromosiDo
	Group(cols ...field.Expr) ITKebutuhanAlatPromosiDo
	Having(conds ...gen.Condition) ITKebutuhanAlatPromosiDo
	Limit(limit int) ITKebutuhanAlatPromosiDo
	Offset(offset int) ITKebutuhanAlatPromosiDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITKebutuhanAlatPromosiDo
	Unscoped() ITKebutuhanAlatPromosiDo
	Create(values ...*model.TKebutuhanAlatPromosi) error
	CreateInBatches(values []*model.TKebutuhanAlatPromosi, batchSize int) error
	Save(values ...*model.TKebutuhanAlatPromosi) error
	First() (*model.TKebutuhanAlatPromosi, error)
	Take() (*model.TKebutuhanAlatPromosi, error)
	Last() (*model.TKebutuhanAlatPromosi, error)
	Find() ([]*model.TKebutuhanAlatPromosi, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TKebutuhanAlatPromosi, err error)
	FindInBatches(result *[]*model.TKebutuhanAlatPromosi, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TKebutuhanAlatPromosi) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITKebutuhanAlatPromosiDo
	Assign(attrs ...field.AssignExpr) ITKebutuhanAlatPromosiDo
	Joins(fields ...field.RelationField) ITKebutuhanAlatPromosiDo
	Preload(fields ...field.RelationField) ITKebutuhanAlatPromosiDo
	FirstOrInit() (*model.TKebutuhanAlatPromosi, error)
	FirstOrCreate() (*model.TKebutuhanAlatPromosi, error)
	FindByPage(offset int, limit int) (result []*model.TKebutuhanAlatPromosi, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITKebutuhanAlatPromosiDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tKebutuhanAlatPromosiDo) Debug() ITKebutuhanAlatPromosiDo {
	return t.withDO(t.DO.Debug())
}

func (t tKebutuhanAlatPromosiDo) WithContext(ctx context.Context) ITKebutuhanAlatPromosiDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tKebutuhanAlatPromosiDo) ReadDB() ITKebutuhanAlatPromosiDo {
	return t.Clauses(dbresolver.Read)
}

func (t tKebutuhanAlatPromosiDo) WriteDB() ITKebutuhanAlatPromosiDo {
	return t.Clauses(dbresolver.Write)
}

func (t tKebutuhanAlatPromosiDo) Session(config *gorm.Session) ITKebutuhanAlatPromosiDo {
	return t.withDO(t.DO.Session(config))
}

func (t tKebutuhanAlatPromosiDo) Clauses(conds ...clause.Expression) ITKebutuhanAlatPromosiDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tKebutuhanAlatPromosiDo) Returning(value interface{}, columns ...string) ITKebutuhanAlatPromosiDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tKebutuhanAlatPromosiDo) Not(conds ...gen.Condition) ITKebutuhanAlatPromosiDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tKebutuhanAlatPromosiDo) Or(conds ...gen.Condition) ITKebutuhanAlatPromosiDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tKebutuhanAlatPromosiDo) Select(conds ...field.Expr) ITKebutuhanAlatPromosiDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tKebutuhanAlatPromosiDo) Where(conds ...gen.Condition) ITKebutuhanAlatPromosiDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tKebutuhanAlatPromosiDo) Order(conds ...field.Expr) ITKebutuhanAlatPromosiDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tKebutuhanAlatPromosiDo) Distinct(cols ...field.Expr) ITKebutuhanAlatPromosiDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tKebutuhanAlatPromosiDo) Omit(cols ...field.Expr) ITKebutuhanAlatPromosiDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tKebutuhanAlatPromosiDo) Join(table schema.Tabler, on ...field.Expr) ITKebutuhanAlatPromosiDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tKebutuhanAlatPromosiDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITKebutuhanAlatPromosiDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tKebutuhanAlatPromosiDo) RightJoin(table schema.Tabler, on ...field.Expr) ITKebutuhanAlatPromosiDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tKebutuhanAlatPromosiDo) Group(cols ...field.Expr) ITKebutuhanAlatPromosiDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tKebutuhanAlatPromosiDo) Having(conds ...gen.Condition) ITKebutuhanAlatPromosiDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tKebutuhanAlatPromosiDo) Limit(limit int) ITKebutuhanAlatPromosiDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tKebutuhanAlatPromosiDo) Offset(offset int) ITKebutuhanAlatPromosiDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tKebutuhanAlatPromosiDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITKebutuhanAlatPromosiDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tKebutuhanAlatPromosiDo) Unscoped() ITKebutuhanAlatPromosiDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tKebutuhanAlatPromosiDo) Create(values ...*model.TKebutuhanAlatPromosi) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tKebutuhanAlatPromosiDo) CreateInBatches(values []*model.TKebutuhanAlatPromosi, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tKebutuhanAlatPromosiDo) Save(values ...*model.TKebutuhanAlatPromosi) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tKebutuhanAlatPromosiDo) First() (*model.TKebutuhanAlatPromosi, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKebutuhanAlatPromosi), nil
	}
}

func (t tKebutuhanAlatPromosiDo) Take() (*model.TKebutuhanAlatPromosi, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKebutuhanAlatPromosi), nil
	}
}

func (t tKebutuhanAlatPromosiDo) Last() (*model.TKebutuhanAlatPromosi, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKebutuhanAlatPromosi), nil
	}
}

func (t tKebutuhanAlatPromosiDo) Find() ([]*model.TKebutuhanAlatPromosi, error) {
	result, err := t.DO.Find()
	return result.([]*model.TKebutuhanAlatPromosi), err
}

func (t tKebutuhanAlatPromosiDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TKebutuhanAlatPromosi, err error) {
	buf := make([]*model.TKebutuhanAlatPromosi, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tKebutuhanAlatPromosiDo) FindInBatches(result *[]*model.TKebutuhanAlatPromosi, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tKebutuhanAlatPromosiDo) Attrs(attrs ...field.AssignExpr) ITKebutuhanAlatPromosiDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tKebutuhanAlatPromosiDo) Assign(attrs ...field.AssignExpr) ITKebutuhanAlatPromosiDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tKebutuhanAlatPromosiDo) Joins(fields ...field.RelationField) ITKebutuhanAlatPromosiDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tKebutuhanAlatPromosiDo) Preload(fields ...field.RelationField) ITKebutuhanAlatPromosiDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tKebutuhanAlatPromosiDo) FirstOrInit() (*model.TKebutuhanAlatPromosi, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKebutuhanAlatPromosi), nil
	}
}

func (t tKebutuhanAlatPromosiDo) FirstOrCreate() (*model.TKebutuhanAlatPromosi, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKebutuhanAlatPromosi), nil
	}
}

func (t tKebutuhanAlatPromosiDo) FindByPage(offset int, limit int) (result []*model.TKebutuhanAlatPromosi, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tKebutuhanAlatPromosiDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tKebutuhanAlatPromosiDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tKebutuhanAlatPromosiDo) Delete(models ...*model.TKebutuhanAlatPromosi) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tKebutuhanAlatPromosiDo) withDO(do gen.Dao) *tKebutuhanAlatPromosiDo {
	t.DO = *do.(*gen.DO)
	return t
}
