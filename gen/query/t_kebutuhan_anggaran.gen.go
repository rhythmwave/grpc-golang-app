// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-bponline/m/gen/model"
)

func newTKebutuhanAnggaran(db *gorm.DB, opts ...gen.DOOption) tKebutuhanAnggaran {
	_tKebutuhanAnggaran := tKebutuhanAnggaran{}

	_tKebutuhanAnggaran.tKebutuhanAnggaranDo.UseDB(db, opts...)
	_tKebutuhanAnggaran.tKebutuhanAnggaranDo.UseModel(&model.TKebutuhanAnggaran{})

	tableName := _tKebutuhanAnggaran.tKebutuhanAnggaranDo.TableName()
	_tKebutuhanAnggaran.ALL = field.NewAsterisk(tableName)
	_tKebutuhanAnggaran.CKodeKegiatan = field.NewString(tableName, "c_kode_kegiatan")
	_tKebutuhanAnggaran.CKodeItemAnggaran = field.NewString(tableName, "c_kode_item_anggaran")
	_tKebutuhanAnggaran.CJumlah = field.NewFloat64(tableName, "c_jumlah")
	_tKebutuhanAnggaran.CNilaiSatuan = field.NewFloat64(tableName, "c_nilai_satuan")
	_tKebutuhanAnggaran.CTotal = field.NewFloat64(tableName, "c_total")
	_tKebutuhanAnggaran.CIDVendor = field.NewInt32(tableName, "c_id_vendor")
	_tKebutuhanAnggaran.CDokumen = field.NewString(tableName, "c_dokumen")
	_tKebutuhanAnggaran.CStatus = field.NewString(tableName, "c_status")
	_tKebutuhanAnggaran.CAcc = field.NewString(tableName, "c_acc")
	_tKebutuhanAnggaran.CUpdater = field.NewString(tableName, "c_updater")
	_tKebutuhanAnggaran.CLastUpdate = field.NewTime(tableName, "c_last_update")

	_tKebutuhanAnggaran.fillFieldMap()

	return _tKebutuhanAnggaran
}

type tKebutuhanAnggaran struct {
	tKebutuhanAnggaranDo

	ALL               field.Asterisk
	CKodeKegiatan     field.String
	CKodeItemAnggaran field.String
	CJumlah           field.Float64
	CNilaiSatuan      field.Float64
	CTotal            field.Float64
	CIDVendor         field.Int32
	CDokumen          field.String
	CStatus           field.String
	CAcc              field.String
	CUpdater          field.String
	CLastUpdate       field.Time

	fieldMap map[string]field.Expr
}

func (t tKebutuhanAnggaran) Table(newTableName string) *tKebutuhanAnggaran {
	t.tKebutuhanAnggaranDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tKebutuhanAnggaran) As(alias string) *tKebutuhanAnggaran {
	t.tKebutuhanAnggaranDo.DO = *(t.tKebutuhanAnggaranDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tKebutuhanAnggaran) updateTableName(table string) *tKebutuhanAnggaran {
	t.ALL = field.NewAsterisk(table)
	t.CKodeKegiatan = field.NewString(table, "c_kode_kegiatan")
	t.CKodeItemAnggaran = field.NewString(table, "c_kode_item_anggaran")
	t.CJumlah = field.NewFloat64(table, "c_jumlah")
	t.CNilaiSatuan = field.NewFloat64(table, "c_nilai_satuan")
	t.CTotal = field.NewFloat64(table, "c_total")
	t.CIDVendor = field.NewInt32(table, "c_id_vendor")
	t.CDokumen = field.NewString(table, "c_dokumen")
	t.CStatus = field.NewString(table, "c_status")
	t.CAcc = field.NewString(table, "c_acc")
	t.CUpdater = field.NewString(table, "c_updater")
	t.CLastUpdate = field.NewTime(table, "c_last_update")

	t.fillFieldMap()

	return t
}

func (t *tKebutuhanAnggaran) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tKebutuhanAnggaran) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 11)
	t.fieldMap["c_kode_kegiatan"] = t.CKodeKegiatan
	t.fieldMap["c_kode_item_anggaran"] = t.CKodeItemAnggaran
	t.fieldMap["c_jumlah"] = t.CJumlah
	t.fieldMap["c_nilai_satuan"] = t.CNilaiSatuan
	t.fieldMap["c_total"] = t.CTotal
	t.fieldMap["c_id_vendor"] = t.CIDVendor
	t.fieldMap["c_dokumen"] = t.CDokumen
	t.fieldMap["c_status"] = t.CStatus
	t.fieldMap["c_acc"] = t.CAcc
	t.fieldMap["c_updater"] = t.CUpdater
	t.fieldMap["c_last_update"] = t.CLastUpdate
}

func (t tKebutuhanAnggaran) clone(db *gorm.DB) tKebutuhanAnggaran {
	t.tKebutuhanAnggaranDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tKebutuhanAnggaran) replaceDB(db *gorm.DB) tKebutuhanAnggaran {
	t.tKebutuhanAnggaranDo.ReplaceDB(db)
	return t
}

type tKebutuhanAnggaranDo struct{ gen.DO }

type ITKebutuhanAnggaranDo interface {
	gen.SubQuery
	Debug() ITKebutuhanAnggaranDo
	WithContext(ctx context.Context) ITKebutuhanAnggaranDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITKebutuhanAnggaranDo
	WriteDB() ITKebutuhanAnggaranDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITKebutuhanAnggaranDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITKebutuhanAnggaranDo
	Not(conds ...gen.Condition) ITKebutuhanAnggaranDo
	Or(conds ...gen.Condition) ITKebutuhanAnggaranDo
	Select(conds ...field.Expr) ITKebutuhanAnggaranDo
	Where(conds ...gen.Condition) ITKebutuhanAnggaranDo
	Order(conds ...field.Expr) ITKebutuhanAnggaranDo
	Distinct(cols ...field.Expr) ITKebutuhanAnggaranDo
	Omit(cols ...field.Expr) ITKebutuhanAnggaranDo
	Join(table schema.Tabler, on ...field.Expr) ITKebutuhanAnggaranDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITKebutuhanAnggaranDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITKebutuhanAnggaranDo
	Group(cols ...field.Expr) ITKebutuhanAnggaranDo
	Having(conds ...gen.Condition) ITKebutuhanAnggaranDo
	Limit(limit int) ITKebutuhanAnggaranDo
	Offset(offset int) ITKebutuhanAnggaranDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITKebutuhanAnggaranDo
	Unscoped() ITKebutuhanAnggaranDo
	Create(values ...*model.TKebutuhanAnggaran) error
	CreateInBatches(values []*model.TKebutuhanAnggaran, batchSize int) error
	Save(values ...*model.TKebutuhanAnggaran) error
	First() (*model.TKebutuhanAnggaran, error)
	Take() (*model.TKebutuhanAnggaran, error)
	Last() (*model.TKebutuhanAnggaran, error)
	Find() ([]*model.TKebutuhanAnggaran, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TKebutuhanAnggaran, err error)
	FindInBatches(result *[]*model.TKebutuhanAnggaran, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TKebutuhanAnggaran) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITKebutuhanAnggaranDo
	Assign(attrs ...field.AssignExpr) ITKebutuhanAnggaranDo
	Joins(fields ...field.RelationField) ITKebutuhanAnggaranDo
	Preload(fields ...field.RelationField) ITKebutuhanAnggaranDo
	FirstOrInit() (*model.TKebutuhanAnggaran, error)
	FirstOrCreate() (*model.TKebutuhanAnggaran, error)
	FindByPage(offset int, limit int) (result []*model.TKebutuhanAnggaran, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITKebutuhanAnggaranDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tKebutuhanAnggaranDo) Debug() ITKebutuhanAnggaranDo {
	return t.withDO(t.DO.Debug())
}

func (t tKebutuhanAnggaranDo) WithContext(ctx context.Context) ITKebutuhanAnggaranDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tKebutuhanAnggaranDo) ReadDB() ITKebutuhanAnggaranDo {
	return t.Clauses(dbresolver.Read)
}

func (t tKebutuhanAnggaranDo) WriteDB() ITKebutuhanAnggaranDo {
	return t.Clauses(dbresolver.Write)
}

func (t tKebutuhanAnggaranDo) Session(config *gorm.Session) ITKebutuhanAnggaranDo {
	return t.withDO(t.DO.Session(config))
}

func (t tKebutuhanAnggaranDo) Clauses(conds ...clause.Expression) ITKebutuhanAnggaranDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tKebutuhanAnggaranDo) Returning(value interface{}, columns ...string) ITKebutuhanAnggaranDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tKebutuhanAnggaranDo) Not(conds ...gen.Condition) ITKebutuhanAnggaranDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tKebutuhanAnggaranDo) Or(conds ...gen.Condition) ITKebutuhanAnggaranDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tKebutuhanAnggaranDo) Select(conds ...field.Expr) ITKebutuhanAnggaranDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tKebutuhanAnggaranDo) Where(conds ...gen.Condition) ITKebutuhanAnggaranDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tKebutuhanAnggaranDo) Order(conds ...field.Expr) ITKebutuhanAnggaranDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tKebutuhanAnggaranDo) Distinct(cols ...field.Expr) ITKebutuhanAnggaranDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tKebutuhanAnggaranDo) Omit(cols ...field.Expr) ITKebutuhanAnggaranDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tKebutuhanAnggaranDo) Join(table schema.Tabler, on ...field.Expr) ITKebutuhanAnggaranDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tKebutuhanAnggaranDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITKebutuhanAnggaranDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tKebutuhanAnggaranDo) RightJoin(table schema.Tabler, on ...field.Expr) ITKebutuhanAnggaranDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tKebutuhanAnggaranDo) Group(cols ...field.Expr) ITKebutuhanAnggaranDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tKebutuhanAnggaranDo) Having(conds ...gen.Condition) ITKebutuhanAnggaranDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tKebutuhanAnggaranDo) Limit(limit int) ITKebutuhanAnggaranDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tKebutuhanAnggaranDo) Offset(offset int) ITKebutuhanAnggaranDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tKebutuhanAnggaranDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITKebutuhanAnggaranDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tKebutuhanAnggaranDo) Unscoped() ITKebutuhanAnggaranDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tKebutuhanAnggaranDo) Create(values ...*model.TKebutuhanAnggaran) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tKebutuhanAnggaranDo) CreateInBatches(values []*model.TKebutuhanAnggaran, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tKebutuhanAnggaranDo) Save(values ...*model.TKebutuhanAnggaran) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tKebutuhanAnggaranDo) First() (*model.TKebutuhanAnggaran, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKebutuhanAnggaran), nil
	}
}

func (t tKebutuhanAnggaranDo) Take() (*model.TKebutuhanAnggaran, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKebutuhanAnggaran), nil
	}
}

func (t tKebutuhanAnggaranDo) Last() (*model.TKebutuhanAnggaran, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKebutuhanAnggaran), nil
	}
}

func (t tKebutuhanAnggaranDo) Find() ([]*model.TKebutuhanAnggaran, error) {
	result, err := t.DO.Find()
	return result.([]*model.TKebutuhanAnggaran), err
}

func (t tKebutuhanAnggaranDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TKebutuhanAnggaran, err error) {
	buf := make([]*model.TKebutuhanAnggaran, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tKebutuhanAnggaranDo) FindInBatches(result *[]*model.TKebutuhanAnggaran, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tKebutuhanAnggaranDo) Attrs(attrs ...field.AssignExpr) ITKebutuhanAnggaranDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tKebutuhanAnggaranDo) Assign(attrs ...field.AssignExpr) ITKebutuhanAnggaranDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tKebutuhanAnggaranDo) Joins(fields ...field.RelationField) ITKebutuhanAnggaranDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tKebutuhanAnggaranDo) Preload(fields ...field.RelationField) ITKebutuhanAnggaranDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tKebutuhanAnggaranDo) FirstOrInit() (*model.TKebutuhanAnggaran, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKebutuhanAnggaran), nil
	}
}

func (t tKebutuhanAnggaranDo) FirstOrCreate() (*model.TKebutuhanAnggaran, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKebutuhanAnggaran), nil
	}
}

func (t tKebutuhanAnggaranDo) FindByPage(offset int, limit int) (result []*model.TKebutuhanAnggaran, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tKebutuhanAnggaranDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tKebutuhanAnggaranDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tKebutuhanAnggaranDo) Delete(models ...*model.TKebutuhanAnggaran) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tKebutuhanAnggaranDo) withDO(do gen.Dao) *tKebutuhanAnggaranDo {
	t.DO = *do.(*gen.DO)
	return t
}
