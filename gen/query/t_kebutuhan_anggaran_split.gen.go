// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-bponline/m/gen/model"
)

func newTKebutuhanAnggaranSplit(db *gorm.DB, opts ...gen.DOOption) tKebutuhanAnggaranSplit {
	_tKebutuhanAnggaranSplit := tKebutuhanAnggaranSplit{}

	_tKebutuhanAnggaranSplit.tKebutuhanAnggaranSplitDo.UseDB(db, opts...)
	_tKebutuhanAnggaranSplit.tKebutuhanAnggaranSplitDo.UseModel(&model.TKebutuhanAnggaranSplit{})

	tableName := _tKebutuhanAnggaranSplit.tKebutuhanAnggaranSplitDo.TableName()
	_tKebutuhanAnggaranSplit.ALL = field.NewAsterisk(tableName)
	_tKebutuhanAnggaranSplit.CKodeSplitAnggaran = field.NewString(tableName, "c_kode_split_anggaran")
	_tKebutuhanAnggaranSplit.CKodeKegiatan = field.NewString(tableName, "c_kode_kegiatan")
	_tKebutuhanAnggaranSplit.CKodeItemAnggaran = field.NewString(tableName, "c_kode_item_anggaran")
	_tKebutuhanAnggaranSplit.CTanggalPakai = field.NewTime(tableName, "c_tanggal_pakai")
	_tKebutuhanAnggaranSplit.CTanggalPakaiAcc = field.NewTime(tableName, "c_tanggal_pakai_acc")
	_tKebutuhanAnggaranSplit.CPengajuan = field.NewFloat64(tableName, "c_pengajuan")
	_tKebutuhanAnggaranSplit.CSetujuKacab = field.NewFloat64(tableName, "c_setuju_kacab")
	_tKebutuhanAnggaranSplit.CSetujuBidang = field.NewFloat64(tableName, "c_setuju_bidang")
	_tKebutuhanAnggaranSplit.CSetujuLog = field.NewFloat64(tableName, "c_setuju_log")
	_tKebutuhanAnggaranSplit.CSetujuAkuntansi = field.NewFloat64(tableName, "c_setuju_akuntansi")
	_tKebutuhanAnggaranSplit.CStatus = field.NewString(tableName, "c_status")
	_tKebutuhanAnggaranSplit.CDokumen = field.NewString(tableName, "c_dokumen")
	_tKebutuhanAnggaranSplit.CIDVendor = field.NewInt32(tableName, "c_id_vendor")
	_tKebutuhanAnggaranSplit.CFlagSpta = field.NewInt16(tableName, "c_flag_spta")
	_tKebutuhanAnggaranSplit.CFlagDrt = field.NewInt16(tableName, "c_flag_drt")
	_tKebutuhanAnggaranSplit.CUpdater = field.NewString(tableName, "c_updater")
	_tKebutuhanAnggaranSplit.CLastUpdate = field.NewTime(tableName, "c_last_update")

	_tKebutuhanAnggaranSplit.fillFieldMap()

	return _tKebutuhanAnggaranSplit
}

type tKebutuhanAnggaranSplit struct {
	tKebutuhanAnggaranSplitDo

	ALL                field.Asterisk
	CKodeSplitAnggaran field.String
	CKodeKegiatan      field.String
	CKodeItemAnggaran  field.String
	CTanggalPakai      field.Time
	CTanggalPakaiAcc   field.Time
	CPengajuan         field.Float64
	CSetujuKacab       field.Float64
	CSetujuBidang      field.Float64
	CSetujuLog         field.Float64
	CSetujuAkuntansi   field.Float64
	CStatus            field.String
	CDokumen           field.String
	CIDVendor          field.Int32
	CFlagSpta          field.Int16
	CFlagDrt           field.Int16
	CUpdater           field.String
	CLastUpdate        field.Time

	fieldMap map[string]field.Expr
}

func (t tKebutuhanAnggaranSplit) Table(newTableName string) *tKebutuhanAnggaranSplit {
	t.tKebutuhanAnggaranSplitDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tKebutuhanAnggaranSplit) As(alias string) *tKebutuhanAnggaranSplit {
	t.tKebutuhanAnggaranSplitDo.DO = *(t.tKebutuhanAnggaranSplitDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tKebutuhanAnggaranSplit) updateTableName(table string) *tKebutuhanAnggaranSplit {
	t.ALL = field.NewAsterisk(table)
	t.CKodeSplitAnggaran = field.NewString(table, "c_kode_split_anggaran")
	t.CKodeKegiatan = field.NewString(table, "c_kode_kegiatan")
	t.CKodeItemAnggaran = field.NewString(table, "c_kode_item_anggaran")
	t.CTanggalPakai = field.NewTime(table, "c_tanggal_pakai")
	t.CTanggalPakaiAcc = field.NewTime(table, "c_tanggal_pakai_acc")
	t.CPengajuan = field.NewFloat64(table, "c_pengajuan")
	t.CSetujuKacab = field.NewFloat64(table, "c_setuju_kacab")
	t.CSetujuBidang = field.NewFloat64(table, "c_setuju_bidang")
	t.CSetujuLog = field.NewFloat64(table, "c_setuju_log")
	t.CSetujuAkuntansi = field.NewFloat64(table, "c_setuju_akuntansi")
	t.CStatus = field.NewString(table, "c_status")
	t.CDokumen = field.NewString(table, "c_dokumen")
	t.CIDVendor = field.NewInt32(table, "c_id_vendor")
	t.CFlagSpta = field.NewInt16(table, "c_flag_spta")
	t.CFlagDrt = field.NewInt16(table, "c_flag_drt")
	t.CUpdater = field.NewString(table, "c_updater")
	t.CLastUpdate = field.NewTime(table, "c_last_update")

	t.fillFieldMap()

	return t
}

func (t *tKebutuhanAnggaranSplit) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tKebutuhanAnggaranSplit) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 17)
	t.fieldMap["c_kode_split_anggaran"] = t.CKodeSplitAnggaran
	t.fieldMap["c_kode_kegiatan"] = t.CKodeKegiatan
	t.fieldMap["c_kode_item_anggaran"] = t.CKodeItemAnggaran
	t.fieldMap["c_tanggal_pakai"] = t.CTanggalPakai
	t.fieldMap["c_tanggal_pakai_acc"] = t.CTanggalPakaiAcc
	t.fieldMap["c_pengajuan"] = t.CPengajuan
	t.fieldMap["c_setuju_kacab"] = t.CSetujuKacab
	t.fieldMap["c_setuju_bidang"] = t.CSetujuBidang
	t.fieldMap["c_setuju_log"] = t.CSetujuLog
	t.fieldMap["c_setuju_akuntansi"] = t.CSetujuAkuntansi
	t.fieldMap["c_status"] = t.CStatus
	t.fieldMap["c_dokumen"] = t.CDokumen
	t.fieldMap["c_id_vendor"] = t.CIDVendor
	t.fieldMap["c_flag_spta"] = t.CFlagSpta
	t.fieldMap["c_flag_drt"] = t.CFlagDrt
	t.fieldMap["c_updater"] = t.CUpdater
	t.fieldMap["c_last_update"] = t.CLastUpdate
}

func (t tKebutuhanAnggaranSplit) clone(db *gorm.DB) tKebutuhanAnggaranSplit {
	t.tKebutuhanAnggaranSplitDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tKebutuhanAnggaranSplit) replaceDB(db *gorm.DB) tKebutuhanAnggaranSplit {
	t.tKebutuhanAnggaranSplitDo.ReplaceDB(db)
	return t
}

type tKebutuhanAnggaranSplitDo struct{ gen.DO }

type ITKebutuhanAnggaranSplitDo interface {
	gen.SubQuery
	Debug() ITKebutuhanAnggaranSplitDo
	WithContext(ctx context.Context) ITKebutuhanAnggaranSplitDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITKebutuhanAnggaranSplitDo
	WriteDB() ITKebutuhanAnggaranSplitDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITKebutuhanAnggaranSplitDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITKebutuhanAnggaranSplitDo
	Not(conds ...gen.Condition) ITKebutuhanAnggaranSplitDo
	Or(conds ...gen.Condition) ITKebutuhanAnggaranSplitDo
	Select(conds ...field.Expr) ITKebutuhanAnggaranSplitDo
	Where(conds ...gen.Condition) ITKebutuhanAnggaranSplitDo
	Order(conds ...field.Expr) ITKebutuhanAnggaranSplitDo
	Distinct(cols ...field.Expr) ITKebutuhanAnggaranSplitDo
	Omit(cols ...field.Expr) ITKebutuhanAnggaranSplitDo
	Join(table schema.Tabler, on ...field.Expr) ITKebutuhanAnggaranSplitDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITKebutuhanAnggaranSplitDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITKebutuhanAnggaranSplitDo
	Group(cols ...field.Expr) ITKebutuhanAnggaranSplitDo
	Having(conds ...gen.Condition) ITKebutuhanAnggaranSplitDo
	Limit(limit int) ITKebutuhanAnggaranSplitDo
	Offset(offset int) ITKebutuhanAnggaranSplitDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITKebutuhanAnggaranSplitDo
	Unscoped() ITKebutuhanAnggaranSplitDo
	Create(values ...*model.TKebutuhanAnggaranSplit) error
	CreateInBatches(values []*model.TKebutuhanAnggaranSplit, batchSize int) error
	Save(values ...*model.TKebutuhanAnggaranSplit) error
	First() (*model.TKebutuhanAnggaranSplit, error)
	Take() (*model.TKebutuhanAnggaranSplit, error)
	Last() (*model.TKebutuhanAnggaranSplit, error)
	Find() ([]*model.TKebutuhanAnggaranSplit, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TKebutuhanAnggaranSplit, err error)
	FindInBatches(result *[]*model.TKebutuhanAnggaranSplit, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TKebutuhanAnggaranSplit) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITKebutuhanAnggaranSplitDo
	Assign(attrs ...field.AssignExpr) ITKebutuhanAnggaranSplitDo
	Joins(fields ...field.RelationField) ITKebutuhanAnggaranSplitDo
	Preload(fields ...field.RelationField) ITKebutuhanAnggaranSplitDo
	FirstOrInit() (*model.TKebutuhanAnggaranSplit, error)
	FirstOrCreate() (*model.TKebutuhanAnggaranSplit, error)
	FindByPage(offset int, limit int) (result []*model.TKebutuhanAnggaranSplit, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITKebutuhanAnggaranSplitDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tKebutuhanAnggaranSplitDo) Debug() ITKebutuhanAnggaranSplitDo {
	return t.withDO(t.DO.Debug())
}

func (t tKebutuhanAnggaranSplitDo) WithContext(ctx context.Context) ITKebutuhanAnggaranSplitDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tKebutuhanAnggaranSplitDo) ReadDB() ITKebutuhanAnggaranSplitDo {
	return t.Clauses(dbresolver.Read)
}

func (t tKebutuhanAnggaranSplitDo) WriteDB() ITKebutuhanAnggaranSplitDo {
	return t.Clauses(dbresolver.Write)
}

func (t tKebutuhanAnggaranSplitDo) Session(config *gorm.Session) ITKebutuhanAnggaranSplitDo {
	return t.withDO(t.DO.Session(config))
}

func (t tKebutuhanAnggaranSplitDo) Clauses(conds ...clause.Expression) ITKebutuhanAnggaranSplitDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tKebutuhanAnggaranSplitDo) Returning(value interface{}, columns ...string) ITKebutuhanAnggaranSplitDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tKebutuhanAnggaranSplitDo) Not(conds ...gen.Condition) ITKebutuhanAnggaranSplitDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tKebutuhanAnggaranSplitDo) Or(conds ...gen.Condition) ITKebutuhanAnggaranSplitDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tKebutuhanAnggaranSplitDo) Select(conds ...field.Expr) ITKebutuhanAnggaranSplitDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tKebutuhanAnggaranSplitDo) Where(conds ...gen.Condition) ITKebutuhanAnggaranSplitDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tKebutuhanAnggaranSplitDo) Order(conds ...field.Expr) ITKebutuhanAnggaranSplitDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tKebutuhanAnggaranSplitDo) Distinct(cols ...field.Expr) ITKebutuhanAnggaranSplitDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tKebutuhanAnggaranSplitDo) Omit(cols ...field.Expr) ITKebutuhanAnggaranSplitDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tKebutuhanAnggaranSplitDo) Join(table schema.Tabler, on ...field.Expr) ITKebutuhanAnggaranSplitDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tKebutuhanAnggaranSplitDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITKebutuhanAnggaranSplitDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tKebutuhanAnggaranSplitDo) RightJoin(table schema.Tabler, on ...field.Expr) ITKebutuhanAnggaranSplitDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tKebutuhanAnggaranSplitDo) Group(cols ...field.Expr) ITKebutuhanAnggaranSplitDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tKebutuhanAnggaranSplitDo) Having(conds ...gen.Condition) ITKebutuhanAnggaranSplitDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tKebutuhanAnggaranSplitDo) Limit(limit int) ITKebutuhanAnggaranSplitDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tKebutuhanAnggaranSplitDo) Offset(offset int) ITKebutuhanAnggaranSplitDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tKebutuhanAnggaranSplitDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITKebutuhanAnggaranSplitDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tKebutuhanAnggaranSplitDo) Unscoped() ITKebutuhanAnggaranSplitDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tKebutuhanAnggaranSplitDo) Create(values ...*model.TKebutuhanAnggaranSplit) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tKebutuhanAnggaranSplitDo) CreateInBatches(values []*model.TKebutuhanAnggaranSplit, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tKebutuhanAnggaranSplitDo) Save(values ...*model.TKebutuhanAnggaranSplit) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tKebutuhanAnggaranSplitDo) First() (*model.TKebutuhanAnggaranSplit, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKebutuhanAnggaranSplit), nil
	}
}

func (t tKebutuhanAnggaranSplitDo) Take() (*model.TKebutuhanAnggaranSplit, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKebutuhanAnggaranSplit), nil
	}
}

func (t tKebutuhanAnggaranSplitDo) Last() (*model.TKebutuhanAnggaranSplit, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKebutuhanAnggaranSplit), nil
	}
}

func (t tKebutuhanAnggaranSplitDo) Find() ([]*model.TKebutuhanAnggaranSplit, error) {
	result, err := t.DO.Find()
	return result.([]*model.TKebutuhanAnggaranSplit), err
}

func (t tKebutuhanAnggaranSplitDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TKebutuhanAnggaranSplit, err error) {
	buf := make([]*model.TKebutuhanAnggaranSplit, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tKebutuhanAnggaranSplitDo) FindInBatches(result *[]*model.TKebutuhanAnggaranSplit, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tKebutuhanAnggaranSplitDo) Attrs(attrs ...field.AssignExpr) ITKebutuhanAnggaranSplitDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tKebutuhanAnggaranSplitDo) Assign(attrs ...field.AssignExpr) ITKebutuhanAnggaranSplitDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tKebutuhanAnggaranSplitDo) Joins(fields ...field.RelationField) ITKebutuhanAnggaranSplitDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tKebutuhanAnggaranSplitDo) Preload(fields ...field.RelationField) ITKebutuhanAnggaranSplitDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tKebutuhanAnggaranSplitDo) FirstOrInit() (*model.TKebutuhanAnggaranSplit, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKebutuhanAnggaranSplit), nil
	}
}

func (t tKebutuhanAnggaranSplitDo) FirstOrCreate() (*model.TKebutuhanAnggaranSplit, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKebutuhanAnggaranSplit), nil
	}
}

func (t tKebutuhanAnggaranSplitDo) FindByPage(offset int, limit int) (result []*model.TKebutuhanAnggaranSplit, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tKebutuhanAnggaranSplitDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tKebutuhanAnggaranSplitDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tKebutuhanAnggaranSplitDo) Delete(models ...*model.TKebutuhanAnggaranSplit) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tKebutuhanAnggaranSplitDo) withDO(do gen.Dao) *tKebutuhanAnggaranSplitDo {
	t.DO = *do.(*gen.DO)
	return t
}
