// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-bponline/m/gen/model"
)

func newTKebutuhanBarang(db *gorm.DB, opts ...gen.DOOption) tKebutuhanBarang {
	_tKebutuhanBarang := tKebutuhanBarang{}

	_tKebutuhanBarang.tKebutuhanBarangDo.UseDB(db, opts...)
	_tKebutuhanBarang.tKebutuhanBarangDo.UseModel(&model.TKebutuhanBarang{})

	tableName := _tKebutuhanBarang.tKebutuhanBarangDo.TableName()
	_tKebutuhanBarang.ALL = field.NewAsterisk(tableName)
	_tKebutuhanBarang.CKodeKegiatan = field.NewString(tableName, "c_kode_kegiatan")
	_tKebutuhanBarang.CKodeBarang = field.NewString(tableName, "c_kode_barang")
	_tKebutuhanBarang.CJumlah = field.NewFloat64(tableName, "c_jumlah")
	_tKebutuhanBarang.CNilaiSatuan = field.NewFloat64(tableName, "c_nilai_satuan")
	_tKebutuhanBarang.CIDSatuan = field.NewInt32(tableName, "c_id_satuan")
	_tKebutuhanBarang.CTotal = field.NewFloat64(tableName, "c_total")
	_tKebutuhanBarang.CIDVendor = field.NewInt32(tableName, "c_id_vendor")
	_tKebutuhanBarang.CDokumen = field.NewString(tableName, "c_dokumen")
	_tKebutuhanBarang.CStatus = field.NewString(tableName, "c_status")
	_tKebutuhanBarang.CAcc = field.NewString(tableName, "c_acc")
	_tKebutuhanBarang.CIsPusat = field.NewInt16(tableName, "c_is_pusat")
	_tKebutuhanBarang.CUpdater = field.NewString(tableName, "c_updater")
	_tKebutuhanBarang.CLastUpdate = field.NewTime(tableName, "c_last_update")

	_tKebutuhanBarang.fillFieldMap()

	return _tKebutuhanBarang
}

type tKebutuhanBarang struct {
	tKebutuhanBarangDo

	ALL           field.Asterisk
	CKodeKegiatan field.String
	CKodeBarang   field.String
	CJumlah       field.Float64
	CNilaiSatuan  field.Float64
	CIDSatuan     field.Int32
	CTotal        field.Float64
	CIDVendor     field.Int32
	CDokumen      field.String
	CStatus       field.String
	CAcc          field.String
	CIsPusat      field.Int16
	CUpdater      field.String
	CLastUpdate   field.Time

	fieldMap map[string]field.Expr
}

func (t tKebutuhanBarang) Table(newTableName string) *tKebutuhanBarang {
	t.tKebutuhanBarangDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tKebutuhanBarang) As(alias string) *tKebutuhanBarang {
	t.tKebutuhanBarangDo.DO = *(t.tKebutuhanBarangDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tKebutuhanBarang) updateTableName(table string) *tKebutuhanBarang {
	t.ALL = field.NewAsterisk(table)
	t.CKodeKegiatan = field.NewString(table, "c_kode_kegiatan")
	t.CKodeBarang = field.NewString(table, "c_kode_barang")
	t.CJumlah = field.NewFloat64(table, "c_jumlah")
	t.CNilaiSatuan = field.NewFloat64(table, "c_nilai_satuan")
	t.CIDSatuan = field.NewInt32(table, "c_id_satuan")
	t.CTotal = field.NewFloat64(table, "c_total")
	t.CIDVendor = field.NewInt32(table, "c_id_vendor")
	t.CDokumen = field.NewString(table, "c_dokumen")
	t.CStatus = field.NewString(table, "c_status")
	t.CAcc = field.NewString(table, "c_acc")
	t.CIsPusat = field.NewInt16(table, "c_is_pusat")
	t.CUpdater = field.NewString(table, "c_updater")
	t.CLastUpdate = field.NewTime(table, "c_last_update")

	t.fillFieldMap()

	return t
}

func (t *tKebutuhanBarang) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tKebutuhanBarang) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 13)
	t.fieldMap["c_kode_kegiatan"] = t.CKodeKegiatan
	t.fieldMap["c_kode_barang"] = t.CKodeBarang
	t.fieldMap["c_jumlah"] = t.CJumlah
	t.fieldMap["c_nilai_satuan"] = t.CNilaiSatuan
	t.fieldMap["c_id_satuan"] = t.CIDSatuan
	t.fieldMap["c_total"] = t.CTotal
	t.fieldMap["c_id_vendor"] = t.CIDVendor
	t.fieldMap["c_dokumen"] = t.CDokumen
	t.fieldMap["c_status"] = t.CStatus
	t.fieldMap["c_acc"] = t.CAcc
	t.fieldMap["c_is_pusat"] = t.CIsPusat
	t.fieldMap["c_updater"] = t.CUpdater
	t.fieldMap["c_last_update"] = t.CLastUpdate
}

func (t tKebutuhanBarang) clone(db *gorm.DB) tKebutuhanBarang {
	t.tKebutuhanBarangDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tKebutuhanBarang) replaceDB(db *gorm.DB) tKebutuhanBarang {
	t.tKebutuhanBarangDo.ReplaceDB(db)
	return t
}

type tKebutuhanBarangDo struct{ gen.DO }

type ITKebutuhanBarangDo interface {
	gen.SubQuery
	Debug() ITKebutuhanBarangDo
	WithContext(ctx context.Context) ITKebutuhanBarangDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITKebutuhanBarangDo
	WriteDB() ITKebutuhanBarangDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITKebutuhanBarangDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITKebutuhanBarangDo
	Not(conds ...gen.Condition) ITKebutuhanBarangDo
	Or(conds ...gen.Condition) ITKebutuhanBarangDo
	Select(conds ...field.Expr) ITKebutuhanBarangDo
	Where(conds ...gen.Condition) ITKebutuhanBarangDo
	Order(conds ...field.Expr) ITKebutuhanBarangDo
	Distinct(cols ...field.Expr) ITKebutuhanBarangDo
	Omit(cols ...field.Expr) ITKebutuhanBarangDo
	Join(table schema.Tabler, on ...field.Expr) ITKebutuhanBarangDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITKebutuhanBarangDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITKebutuhanBarangDo
	Group(cols ...field.Expr) ITKebutuhanBarangDo
	Having(conds ...gen.Condition) ITKebutuhanBarangDo
	Limit(limit int) ITKebutuhanBarangDo
	Offset(offset int) ITKebutuhanBarangDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITKebutuhanBarangDo
	Unscoped() ITKebutuhanBarangDo
	Create(values ...*model.TKebutuhanBarang) error
	CreateInBatches(values []*model.TKebutuhanBarang, batchSize int) error
	Save(values ...*model.TKebutuhanBarang) error
	First() (*model.TKebutuhanBarang, error)
	Take() (*model.TKebutuhanBarang, error)
	Last() (*model.TKebutuhanBarang, error)
	Find() ([]*model.TKebutuhanBarang, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TKebutuhanBarang, err error)
	FindInBatches(result *[]*model.TKebutuhanBarang, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TKebutuhanBarang) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITKebutuhanBarangDo
	Assign(attrs ...field.AssignExpr) ITKebutuhanBarangDo
	Joins(fields ...field.RelationField) ITKebutuhanBarangDo
	Preload(fields ...field.RelationField) ITKebutuhanBarangDo
	FirstOrInit() (*model.TKebutuhanBarang, error)
	FirstOrCreate() (*model.TKebutuhanBarang, error)
	FindByPage(offset int, limit int) (result []*model.TKebutuhanBarang, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITKebutuhanBarangDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tKebutuhanBarangDo) Debug() ITKebutuhanBarangDo {
	return t.withDO(t.DO.Debug())
}

func (t tKebutuhanBarangDo) WithContext(ctx context.Context) ITKebutuhanBarangDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tKebutuhanBarangDo) ReadDB() ITKebutuhanBarangDo {
	return t.Clauses(dbresolver.Read)
}

func (t tKebutuhanBarangDo) WriteDB() ITKebutuhanBarangDo {
	return t.Clauses(dbresolver.Write)
}

func (t tKebutuhanBarangDo) Session(config *gorm.Session) ITKebutuhanBarangDo {
	return t.withDO(t.DO.Session(config))
}

func (t tKebutuhanBarangDo) Clauses(conds ...clause.Expression) ITKebutuhanBarangDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tKebutuhanBarangDo) Returning(value interface{}, columns ...string) ITKebutuhanBarangDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tKebutuhanBarangDo) Not(conds ...gen.Condition) ITKebutuhanBarangDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tKebutuhanBarangDo) Or(conds ...gen.Condition) ITKebutuhanBarangDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tKebutuhanBarangDo) Select(conds ...field.Expr) ITKebutuhanBarangDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tKebutuhanBarangDo) Where(conds ...gen.Condition) ITKebutuhanBarangDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tKebutuhanBarangDo) Order(conds ...field.Expr) ITKebutuhanBarangDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tKebutuhanBarangDo) Distinct(cols ...field.Expr) ITKebutuhanBarangDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tKebutuhanBarangDo) Omit(cols ...field.Expr) ITKebutuhanBarangDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tKebutuhanBarangDo) Join(table schema.Tabler, on ...field.Expr) ITKebutuhanBarangDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tKebutuhanBarangDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITKebutuhanBarangDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tKebutuhanBarangDo) RightJoin(table schema.Tabler, on ...field.Expr) ITKebutuhanBarangDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tKebutuhanBarangDo) Group(cols ...field.Expr) ITKebutuhanBarangDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tKebutuhanBarangDo) Having(conds ...gen.Condition) ITKebutuhanBarangDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tKebutuhanBarangDo) Limit(limit int) ITKebutuhanBarangDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tKebutuhanBarangDo) Offset(offset int) ITKebutuhanBarangDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tKebutuhanBarangDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITKebutuhanBarangDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tKebutuhanBarangDo) Unscoped() ITKebutuhanBarangDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tKebutuhanBarangDo) Create(values ...*model.TKebutuhanBarang) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tKebutuhanBarangDo) CreateInBatches(values []*model.TKebutuhanBarang, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tKebutuhanBarangDo) Save(values ...*model.TKebutuhanBarang) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tKebutuhanBarangDo) First() (*model.TKebutuhanBarang, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKebutuhanBarang), nil
	}
}

func (t tKebutuhanBarangDo) Take() (*model.TKebutuhanBarang, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKebutuhanBarang), nil
	}
}

func (t tKebutuhanBarangDo) Last() (*model.TKebutuhanBarang, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKebutuhanBarang), nil
	}
}

func (t tKebutuhanBarangDo) Find() ([]*model.TKebutuhanBarang, error) {
	result, err := t.DO.Find()
	return result.([]*model.TKebutuhanBarang), err
}

func (t tKebutuhanBarangDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TKebutuhanBarang, err error) {
	buf := make([]*model.TKebutuhanBarang, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tKebutuhanBarangDo) FindInBatches(result *[]*model.TKebutuhanBarang, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tKebutuhanBarangDo) Attrs(attrs ...field.AssignExpr) ITKebutuhanBarangDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tKebutuhanBarangDo) Assign(attrs ...field.AssignExpr) ITKebutuhanBarangDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tKebutuhanBarangDo) Joins(fields ...field.RelationField) ITKebutuhanBarangDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tKebutuhanBarangDo) Preload(fields ...field.RelationField) ITKebutuhanBarangDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tKebutuhanBarangDo) FirstOrInit() (*model.TKebutuhanBarang, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKebutuhanBarang), nil
	}
}

func (t tKebutuhanBarangDo) FirstOrCreate() (*model.TKebutuhanBarang, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKebutuhanBarang), nil
	}
}

func (t tKebutuhanBarangDo) FindByPage(offset int, limit int) (result []*model.TKebutuhanBarang, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tKebutuhanBarangDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tKebutuhanBarangDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tKebutuhanBarangDo) Delete(models ...*model.TKebutuhanBarang) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tKebutuhanBarangDo) withDO(do gen.Dao) *tKebutuhanBarangDo {
	t.DO = *do.(*gen.DO)
	return t
}
