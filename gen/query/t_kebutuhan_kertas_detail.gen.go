// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-bponline/m/gen/model"
)

func newTKebutuhanKertasDetail(db *gorm.DB, opts ...gen.DOOption) tKebutuhanKertasDetail {
	_tKebutuhanKertasDetail := tKebutuhanKertasDetail{}

	_tKebutuhanKertasDetail.tKebutuhanKertasDetailDo.UseDB(db, opts...)
	_tKebutuhanKertasDetail.tKebutuhanKertasDetailDo.UseModel(&model.TKebutuhanKertasDetail{})

	tableName := _tKebutuhanKertasDetail.tKebutuhanKertasDetailDo.TableName()
	_tKebutuhanKertasDetail.ALL = field.NewAsterisk(tableName)
	_tKebutuhanKertasDetail.CIDKebutuhanKertasDetail = field.NewInt32(tableName, "c_id_kebutuhan_kertas_detail")
	_tKebutuhanKertasDetail.CIDKebutuhanKertas = field.NewInt32(tableName, "c_id_kebutuhan_kertas")
	_tKebutuhanKertasDetail.CIDKegiatan = field.NewInt32(tableName, "c_id_kegiatan")
	_tKebutuhanKertasDetail.CIDGedung = field.NewInt32(tableName, "c_id_gedung")
	_tKebutuhanKertasDetail.CJumlah = field.NewInt32(tableName, "c_jumlah")
	_tKebutuhanKertasDetail.CUpdater = field.NewString(tableName, "c_updater")
	_tKebutuhanKertasDetail.CLastUpdate = field.NewTime(tableName, "c_last_update")

	_tKebutuhanKertasDetail.fillFieldMap()

	return _tKebutuhanKertasDetail
}

type tKebutuhanKertasDetail struct {
	tKebutuhanKertasDetailDo

	ALL                      field.Asterisk
	CIDKebutuhanKertasDetail field.Int32
	CIDKebutuhanKertas       field.Int32
	CIDKegiatan              field.Int32
	CIDGedung                field.Int32
	CJumlah                  field.Int32
	CUpdater                 field.String
	CLastUpdate              field.Time

	fieldMap map[string]field.Expr
}

func (t tKebutuhanKertasDetail) Table(newTableName string) *tKebutuhanKertasDetail {
	t.tKebutuhanKertasDetailDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tKebutuhanKertasDetail) As(alias string) *tKebutuhanKertasDetail {
	t.tKebutuhanKertasDetailDo.DO = *(t.tKebutuhanKertasDetailDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tKebutuhanKertasDetail) updateTableName(table string) *tKebutuhanKertasDetail {
	t.ALL = field.NewAsterisk(table)
	t.CIDKebutuhanKertasDetail = field.NewInt32(table, "c_id_kebutuhan_kertas_detail")
	t.CIDKebutuhanKertas = field.NewInt32(table, "c_id_kebutuhan_kertas")
	t.CIDKegiatan = field.NewInt32(table, "c_id_kegiatan")
	t.CIDGedung = field.NewInt32(table, "c_id_gedung")
	t.CJumlah = field.NewInt32(table, "c_jumlah")
	t.CUpdater = field.NewString(table, "c_updater")
	t.CLastUpdate = field.NewTime(table, "c_last_update")

	t.fillFieldMap()

	return t
}

func (t *tKebutuhanKertasDetail) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tKebutuhanKertasDetail) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 7)
	t.fieldMap["c_id_kebutuhan_kertas_detail"] = t.CIDKebutuhanKertasDetail
	t.fieldMap["c_id_kebutuhan_kertas"] = t.CIDKebutuhanKertas
	t.fieldMap["c_id_kegiatan"] = t.CIDKegiatan
	t.fieldMap["c_id_gedung"] = t.CIDGedung
	t.fieldMap["c_jumlah"] = t.CJumlah
	t.fieldMap["c_updater"] = t.CUpdater
	t.fieldMap["c_last_update"] = t.CLastUpdate
}

func (t tKebutuhanKertasDetail) clone(db *gorm.DB) tKebutuhanKertasDetail {
	t.tKebutuhanKertasDetailDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tKebutuhanKertasDetail) replaceDB(db *gorm.DB) tKebutuhanKertasDetail {
	t.tKebutuhanKertasDetailDo.ReplaceDB(db)
	return t
}

type tKebutuhanKertasDetailDo struct{ gen.DO }

type ITKebutuhanKertasDetailDo interface {
	gen.SubQuery
	Debug() ITKebutuhanKertasDetailDo
	WithContext(ctx context.Context) ITKebutuhanKertasDetailDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITKebutuhanKertasDetailDo
	WriteDB() ITKebutuhanKertasDetailDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITKebutuhanKertasDetailDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITKebutuhanKertasDetailDo
	Not(conds ...gen.Condition) ITKebutuhanKertasDetailDo
	Or(conds ...gen.Condition) ITKebutuhanKertasDetailDo
	Select(conds ...field.Expr) ITKebutuhanKertasDetailDo
	Where(conds ...gen.Condition) ITKebutuhanKertasDetailDo
	Order(conds ...field.Expr) ITKebutuhanKertasDetailDo
	Distinct(cols ...field.Expr) ITKebutuhanKertasDetailDo
	Omit(cols ...field.Expr) ITKebutuhanKertasDetailDo
	Join(table schema.Tabler, on ...field.Expr) ITKebutuhanKertasDetailDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITKebutuhanKertasDetailDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITKebutuhanKertasDetailDo
	Group(cols ...field.Expr) ITKebutuhanKertasDetailDo
	Having(conds ...gen.Condition) ITKebutuhanKertasDetailDo
	Limit(limit int) ITKebutuhanKertasDetailDo
	Offset(offset int) ITKebutuhanKertasDetailDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITKebutuhanKertasDetailDo
	Unscoped() ITKebutuhanKertasDetailDo
	Create(values ...*model.TKebutuhanKertasDetail) error
	CreateInBatches(values []*model.TKebutuhanKertasDetail, batchSize int) error
	Save(values ...*model.TKebutuhanKertasDetail) error
	First() (*model.TKebutuhanKertasDetail, error)
	Take() (*model.TKebutuhanKertasDetail, error)
	Last() (*model.TKebutuhanKertasDetail, error)
	Find() ([]*model.TKebutuhanKertasDetail, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TKebutuhanKertasDetail, err error)
	FindInBatches(result *[]*model.TKebutuhanKertasDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TKebutuhanKertasDetail) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITKebutuhanKertasDetailDo
	Assign(attrs ...field.AssignExpr) ITKebutuhanKertasDetailDo
	Joins(fields ...field.RelationField) ITKebutuhanKertasDetailDo
	Preload(fields ...field.RelationField) ITKebutuhanKertasDetailDo
	FirstOrInit() (*model.TKebutuhanKertasDetail, error)
	FirstOrCreate() (*model.TKebutuhanKertasDetail, error)
	FindByPage(offset int, limit int) (result []*model.TKebutuhanKertasDetail, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITKebutuhanKertasDetailDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tKebutuhanKertasDetailDo) Debug() ITKebutuhanKertasDetailDo {
	return t.withDO(t.DO.Debug())
}

func (t tKebutuhanKertasDetailDo) WithContext(ctx context.Context) ITKebutuhanKertasDetailDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tKebutuhanKertasDetailDo) ReadDB() ITKebutuhanKertasDetailDo {
	return t.Clauses(dbresolver.Read)
}

func (t tKebutuhanKertasDetailDo) WriteDB() ITKebutuhanKertasDetailDo {
	return t.Clauses(dbresolver.Write)
}

func (t tKebutuhanKertasDetailDo) Session(config *gorm.Session) ITKebutuhanKertasDetailDo {
	return t.withDO(t.DO.Session(config))
}

func (t tKebutuhanKertasDetailDo) Clauses(conds ...clause.Expression) ITKebutuhanKertasDetailDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tKebutuhanKertasDetailDo) Returning(value interface{}, columns ...string) ITKebutuhanKertasDetailDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tKebutuhanKertasDetailDo) Not(conds ...gen.Condition) ITKebutuhanKertasDetailDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tKebutuhanKertasDetailDo) Or(conds ...gen.Condition) ITKebutuhanKertasDetailDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tKebutuhanKertasDetailDo) Select(conds ...field.Expr) ITKebutuhanKertasDetailDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tKebutuhanKertasDetailDo) Where(conds ...gen.Condition) ITKebutuhanKertasDetailDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tKebutuhanKertasDetailDo) Order(conds ...field.Expr) ITKebutuhanKertasDetailDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tKebutuhanKertasDetailDo) Distinct(cols ...field.Expr) ITKebutuhanKertasDetailDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tKebutuhanKertasDetailDo) Omit(cols ...field.Expr) ITKebutuhanKertasDetailDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tKebutuhanKertasDetailDo) Join(table schema.Tabler, on ...field.Expr) ITKebutuhanKertasDetailDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tKebutuhanKertasDetailDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITKebutuhanKertasDetailDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tKebutuhanKertasDetailDo) RightJoin(table schema.Tabler, on ...field.Expr) ITKebutuhanKertasDetailDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tKebutuhanKertasDetailDo) Group(cols ...field.Expr) ITKebutuhanKertasDetailDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tKebutuhanKertasDetailDo) Having(conds ...gen.Condition) ITKebutuhanKertasDetailDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tKebutuhanKertasDetailDo) Limit(limit int) ITKebutuhanKertasDetailDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tKebutuhanKertasDetailDo) Offset(offset int) ITKebutuhanKertasDetailDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tKebutuhanKertasDetailDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITKebutuhanKertasDetailDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tKebutuhanKertasDetailDo) Unscoped() ITKebutuhanKertasDetailDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tKebutuhanKertasDetailDo) Create(values ...*model.TKebutuhanKertasDetail) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tKebutuhanKertasDetailDo) CreateInBatches(values []*model.TKebutuhanKertasDetail, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tKebutuhanKertasDetailDo) Save(values ...*model.TKebutuhanKertasDetail) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tKebutuhanKertasDetailDo) First() (*model.TKebutuhanKertasDetail, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKebutuhanKertasDetail), nil
	}
}

func (t tKebutuhanKertasDetailDo) Take() (*model.TKebutuhanKertasDetail, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKebutuhanKertasDetail), nil
	}
}

func (t tKebutuhanKertasDetailDo) Last() (*model.TKebutuhanKertasDetail, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKebutuhanKertasDetail), nil
	}
}

func (t tKebutuhanKertasDetailDo) Find() ([]*model.TKebutuhanKertasDetail, error) {
	result, err := t.DO.Find()
	return result.([]*model.TKebutuhanKertasDetail), err
}

func (t tKebutuhanKertasDetailDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TKebutuhanKertasDetail, err error) {
	buf := make([]*model.TKebutuhanKertasDetail, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tKebutuhanKertasDetailDo) FindInBatches(result *[]*model.TKebutuhanKertasDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tKebutuhanKertasDetailDo) Attrs(attrs ...field.AssignExpr) ITKebutuhanKertasDetailDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tKebutuhanKertasDetailDo) Assign(attrs ...field.AssignExpr) ITKebutuhanKertasDetailDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tKebutuhanKertasDetailDo) Joins(fields ...field.RelationField) ITKebutuhanKertasDetailDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tKebutuhanKertasDetailDo) Preload(fields ...field.RelationField) ITKebutuhanKertasDetailDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tKebutuhanKertasDetailDo) FirstOrInit() (*model.TKebutuhanKertasDetail, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKebutuhanKertasDetail), nil
	}
}

func (t tKebutuhanKertasDetailDo) FirstOrCreate() (*model.TKebutuhanKertasDetail, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKebutuhanKertasDetail), nil
	}
}

func (t tKebutuhanKertasDetailDo) FindByPage(offset int, limit int) (result []*model.TKebutuhanKertasDetail, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tKebutuhanKertasDetailDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tKebutuhanKertasDetailDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tKebutuhanKertasDetailDo) Delete(models ...*model.TKebutuhanKertasDetail) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tKebutuhanKertasDetailDo) withDO(do gen.Dao) *tKebutuhanKertasDetailDo {
	t.DO = *do.(*gen.DO)
	return t
}
