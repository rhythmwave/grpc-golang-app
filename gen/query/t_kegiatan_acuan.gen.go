// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-bponline/m/gen/model"
)

func newTKegiatanAcuan(db *gorm.DB, opts ...gen.DOOption) tKegiatanAcuan {
	_tKegiatanAcuan := tKegiatanAcuan{}

	_tKegiatanAcuan.tKegiatanAcuanDo.UseDB(db, opts...)
	_tKegiatanAcuan.tKegiatanAcuanDo.UseModel(&model.TKegiatanAcuan{})

	tableName := _tKegiatanAcuan.tKegiatanAcuanDo.TableName()
	_tKegiatanAcuan.ALL = field.NewAsterisk(tableName)
	_tKegiatanAcuan.CIDKegiatanAcuan = field.NewInt32(tableName, "c_id_kegiatan_acuan")
	_tKegiatanAcuan.CKodeAcuan = field.NewString(tableName, "c_kode_acuan")
	_tKegiatanAcuan.CIDKelompokKegiatan = field.NewInt32(tableName, "c_id_kelompok_kegiatan")
	_tKegiatanAcuan.CBidangPenanggungJawab = field.NewInt32(tableName, "c_bidang_penanggung_jawab")
	_tKegiatanAcuan.CBidangTerkait = field.NewString(tableName, "c_bidang_terkait")
	_tKegiatanAcuan.CUpline = field.NewInt32(tableName, "c_upline")
	_tKegiatanAcuan.CNamaKegiatan = field.NewString(tableName, "c_nama_kegiatan")
	_tKegiatanAcuan.CTanggalAwal = field.NewTime(tableName, "c_tanggal_awal")
	_tKegiatanAcuan.CTanggalAkhir = field.NewTime(tableName, "c_tanggal_akhir")
	_tKegiatanAcuan.CIsPromosi = field.NewString(tableName, "c_is_promosi")
	_tKegiatanAcuan.CStatus = field.NewString(tableName, "c_status")
	_tKegiatanAcuan.CIsKontrol = field.NewInt16(tableName, "c_is_kontrol")
	_tKegiatanAcuan.CUpdater = field.NewString(tableName, "c_updater")
	_tKegiatanAcuan.CLastUpdate = field.NewTime(tableName, "c_last_update")
	_tKegiatanAcuan.CTahunAjaran = field.NewString(tableName, "c_tahun_ajaran")

	_tKegiatanAcuan.fillFieldMap()

	return _tKegiatanAcuan
}

type tKegiatanAcuan struct {
	tKegiatanAcuanDo

	ALL                    field.Asterisk
	CIDKegiatanAcuan       field.Int32
	CKodeAcuan             field.String
	CIDKelompokKegiatan    field.Int32
	CBidangPenanggungJawab field.Int32
	CBidangTerkait         field.String
	CUpline                field.Int32
	CNamaKegiatan          field.String
	CTanggalAwal           field.Time
	CTanggalAkhir          field.Time
	CIsPromosi             field.String
	CStatus                field.String
	CIsKontrol             field.Int16
	CUpdater               field.String
	CLastUpdate            field.Time
	CTahunAjaran           field.String

	fieldMap map[string]field.Expr
}

func (t tKegiatanAcuan) Table(newTableName string) *tKegiatanAcuan {
	t.tKegiatanAcuanDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tKegiatanAcuan) As(alias string) *tKegiatanAcuan {
	t.tKegiatanAcuanDo.DO = *(t.tKegiatanAcuanDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tKegiatanAcuan) updateTableName(table string) *tKegiatanAcuan {
	t.ALL = field.NewAsterisk(table)
	t.CIDKegiatanAcuan = field.NewInt32(table, "c_id_kegiatan_acuan")
	t.CKodeAcuan = field.NewString(table, "c_kode_acuan")
	t.CIDKelompokKegiatan = field.NewInt32(table, "c_id_kelompok_kegiatan")
	t.CBidangPenanggungJawab = field.NewInt32(table, "c_bidang_penanggung_jawab")
	t.CBidangTerkait = field.NewString(table, "c_bidang_terkait")
	t.CUpline = field.NewInt32(table, "c_upline")
	t.CNamaKegiatan = field.NewString(table, "c_nama_kegiatan")
	t.CTanggalAwal = field.NewTime(table, "c_tanggal_awal")
	t.CTanggalAkhir = field.NewTime(table, "c_tanggal_akhir")
	t.CIsPromosi = field.NewString(table, "c_is_promosi")
	t.CStatus = field.NewString(table, "c_status")
	t.CIsKontrol = field.NewInt16(table, "c_is_kontrol")
	t.CUpdater = field.NewString(table, "c_updater")
	t.CLastUpdate = field.NewTime(table, "c_last_update")
	t.CTahunAjaran = field.NewString(table, "c_tahun_ajaran")

	t.fillFieldMap()

	return t
}

func (t *tKegiatanAcuan) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tKegiatanAcuan) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 15)
	t.fieldMap["c_id_kegiatan_acuan"] = t.CIDKegiatanAcuan
	t.fieldMap["c_kode_acuan"] = t.CKodeAcuan
	t.fieldMap["c_id_kelompok_kegiatan"] = t.CIDKelompokKegiatan
	t.fieldMap["c_bidang_penanggung_jawab"] = t.CBidangPenanggungJawab
	t.fieldMap["c_bidang_terkait"] = t.CBidangTerkait
	t.fieldMap["c_upline"] = t.CUpline
	t.fieldMap["c_nama_kegiatan"] = t.CNamaKegiatan
	t.fieldMap["c_tanggal_awal"] = t.CTanggalAwal
	t.fieldMap["c_tanggal_akhir"] = t.CTanggalAkhir
	t.fieldMap["c_is_promosi"] = t.CIsPromosi
	t.fieldMap["c_status"] = t.CStatus
	t.fieldMap["c_is_kontrol"] = t.CIsKontrol
	t.fieldMap["c_updater"] = t.CUpdater
	t.fieldMap["c_last_update"] = t.CLastUpdate
	t.fieldMap["c_tahun_ajaran"] = t.CTahunAjaran
}

func (t tKegiatanAcuan) clone(db *gorm.DB) tKegiatanAcuan {
	t.tKegiatanAcuanDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tKegiatanAcuan) replaceDB(db *gorm.DB) tKegiatanAcuan {
	t.tKegiatanAcuanDo.ReplaceDB(db)
	return t
}

type tKegiatanAcuanDo struct{ gen.DO }

type ITKegiatanAcuanDo interface {
	gen.SubQuery
	Debug() ITKegiatanAcuanDo
	WithContext(ctx context.Context) ITKegiatanAcuanDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITKegiatanAcuanDo
	WriteDB() ITKegiatanAcuanDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITKegiatanAcuanDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITKegiatanAcuanDo
	Not(conds ...gen.Condition) ITKegiatanAcuanDo
	Or(conds ...gen.Condition) ITKegiatanAcuanDo
	Select(conds ...field.Expr) ITKegiatanAcuanDo
	Where(conds ...gen.Condition) ITKegiatanAcuanDo
	Order(conds ...field.Expr) ITKegiatanAcuanDo
	Distinct(cols ...field.Expr) ITKegiatanAcuanDo
	Omit(cols ...field.Expr) ITKegiatanAcuanDo
	Join(table schema.Tabler, on ...field.Expr) ITKegiatanAcuanDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITKegiatanAcuanDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITKegiatanAcuanDo
	Group(cols ...field.Expr) ITKegiatanAcuanDo
	Having(conds ...gen.Condition) ITKegiatanAcuanDo
	Limit(limit int) ITKegiatanAcuanDo
	Offset(offset int) ITKegiatanAcuanDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITKegiatanAcuanDo
	Unscoped() ITKegiatanAcuanDo
	Create(values ...*model.TKegiatanAcuan) error
	CreateInBatches(values []*model.TKegiatanAcuan, batchSize int) error
	Save(values ...*model.TKegiatanAcuan) error
	First() (*model.TKegiatanAcuan, error)
	Take() (*model.TKegiatanAcuan, error)
	Last() (*model.TKegiatanAcuan, error)
	Find() ([]*model.TKegiatanAcuan, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TKegiatanAcuan, err error)
	FindInBatches(result *[]*model.TKegiatanAcuan, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TKegiatanAcuan) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITKegiatanAcuanDo
	Assign(attrs ...field.AssignExpr) ITKegiatanAcuanDo
	Joins(fields ...field.RelationField) ITKegiatanAcuanDo
	Preload(fields ...field.RelationField) ITKegiatanAcuanDo
	FirstOrInit() (*model.TKegiatanAcuan, error)
	FirstOrCreate() (*model.TKegiatanAcuan, error)
	FindByPage(offset int, limit int) (result []*model.TKegiatanAcuan, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITKegiatanAcuanDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tKegiatanAcuanDo) Debug() ITKegiatanAcuanDo {
	return t.withDO(t.DO.Debug())
}

func (t tKegiatanAcuanDo) WithContext(ctx context.Context) ITKegiatanAcuanDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tKegiatanAcuanDo) ReadDB() ITKegiatanAcuanDo {
	return t.Clauses(dbresolver.Read)
}

func (t tKegiatanAcuanDo) WriteDB() ITKegiatanAcuanDo {
	return t.Clauses(dbresolver.Write)
}

func (t tKegiatanAcuanDo) Session(config *gorm.Session) ITKegiatanAcuanDo {
	return t.withDO(t.DO.Session(config))
}

func (t tKegiatanAcuanDo) Clauses(conds ...clause.Expression) ITKegiatanAcuanDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tKegiatanAcuanDo) Returning(value interface{}, columns ...string) ITKegiatanAcuanDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tKegiatanAcuanDo) Not(conds ...gen.Condition) ITKegiatanAcuanDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tKegiatanAcuanDo) Or(conds ...gen.Condition) ITKegiatanAcuanDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tKegiatanAcuanDo) Select(conds ...field.Expr) ITKegiatanAcuanDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tKegiatanAcuanDo) Where(conds ...gen.Condition) ITKegiatanAcuanDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tKegiatanAcuanDo) Order(conds ...field.Expr) ITKegiatanAcuanDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tKegiatanAcuanDo) Distinct(cols ...field.Expr) ITKegiatanAcuanDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tKegiatanAcuanDo) Omit(cols ...field.Expr) ITKegiatanAcuanDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tKegiatanAcuanDo) Join(table schema.Tabler, on ...field.Expr) ITKegiatanAcuanDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tKegiatanAcuanDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITKegiatanAcuanDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tKegiatanAcuanDo) RightJoin(table schema.Tabler, on ...field.Expr) ITKegiatanAcuanDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tKegiatanAcuanDo) Group(cols ...field.Expr) ITKegiatanAcuanDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tKegiatanAcuanDo) Having(conds ...gen.Condition) ITKegiatanAcuanDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tKegiatanAcuanDo) Limit(limit int) ITKegiatanAcuanDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tKegiatanAcuanDo) Offset(offset int) ITKegiatanAcuanDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tKegiatanAcuanDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITKegiatanAcuanDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tKegiatanAcuanDo) Unscoped() ITKegiatanAcuanDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tKegiatanAcuanDo) Create(values ...*model.TKegiatanAcuan) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tKegiatanAcuanDo) CreateInBatches(values []*model.TKegiatanAcuan, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tKegiatanAcuanDo) Save(values ...*model.TKegiatanAcuan) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tKegiatanAcuanDo) First() (*model.TKegiatanAcuan, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKegiatanAcuan), nil
	}
}

func (t tKegiatanAcuanDo) Take() (*model.TKegiatanAcuan, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKegiatanAcuan), nil
	}
}

func (t tKegiatanAcuanDo) Last() (*model.TKegiatanAcuan, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKegiatanAcuan), nil
	}
}

func (t tKegiatanAcuanDo) Find() ([]*model.TKegiatanAcuan, error) {
	result, err := t.DO.Find()
	return result.([]*model.TKegiatanAcuan), err
}

func (t tKegiatanAcuanDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TKegiatanAcuan, err error) {
	buf := make([]*model.TKegiatanAcuan, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tKegiatanAcuanDo) FindInBatches(result *[]*model.TKegiatanAcuan, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tKegiatanAcuanDo) Attrs(attrs ...field.AssignExpr) ITKegiatanAcuanDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tKegiatanAcuanDo) Assign(attrs ...field.AssignExpr) ITKegiatanAcuanDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tKegiatanAcuanDo) Joins(fields ...field.RelationField) ITKegiatanAcuanDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tKegiatanAcuanDo) Preload(fields ...field.RelationField) ITKegiatanAcuanDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tKegiatanAcuanDo) FirstOrInit() (*model.TKegiatanAcuan, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKegiatanAcuan), nil
	}
}

func (t tKegiatanAcuanDo) FirstOrCreate() (*model.TKegiatanAcuan, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKegiatanAcuan), nil
	}
}

func (t tKegiatanAcuanDo) FindByPage(offset int, limit int) (result []*model.TKegiatanAcuan, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tKegiatanAcuanDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tKegiatanAcuanDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tKegiatanAcuanDo) Delete(models ...*model.TKegiatanAcuan) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tKegiatanAcuanDo) withDO(do gen.Dao) *tKegiatanAcuanDo {
	t.DO = *do.(*gen.DO)
	return t
}
