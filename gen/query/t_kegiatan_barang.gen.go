// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-bponline/m/gen/model"
)

func newTKegiatanBarang(db *gorm.DB, opts ...gen.DOOption) tKegiatanBarang {
	_tKegiatanBarang := tKegiatanBarang{}

	_tKegiatanBarang.tKegiatanBarangDo.UseDB(db, opts...)
	_tKegiatanBarang.tKegiatanBarangDo.UseModel(&model.TKegiatanBarang{})

	tableName := _tKegiatanBarang.tKegiatanBarangDo.TableName()
	_tKegiatanBarang.ALL = field.NewAsterisk(tableName)
	_tKegiatanBarang.CIDKegiatan = field.NewInt32(tableName, "c_id_kegiatan")
	_tKegiatanBarang.CKodeBarang = field.NewString(tableName, "c_kode_barang")
	_tKegiatanBarang.CSatuan = field.NewString(tableName, "c_satuan")
	_tKegiatanBarang.CJumlah = field.NewFloat64(tableName, "c_jumlah")
	_tKegiatanBarang.CUpdater = field.NewString(tableName, "c_updater")
	_tKegiatanBarang.CLastUpdate = field.NewTime(tableName, "c_last_update")

	_tKegiatanBarang.fillFieldMap()

	return _tKegiatanBarang
}

type tKegiatanBarang struct {
	tKegiatanBarangDo

	ALL         field.Asterisk
	CIDKegiatan field.Int32
	CKodeBarang field.String
	CSatuan     field.String
	CJumlah     field.Float64
	CUpdater    field.String
	CLastUpdate field.Time

	fieldMap map[string]field.Expr
}

func (t tKegiatanBarang) Table(newTableName string) *tKegiatanBarang {
	t.tKegiatanBarangDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tKegiatanBarang) As(alias string) *tKegiatanBarang {
	t.tKegiatanBarangDo.DO = *(t.tKegiatanBarangDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tKegiatanBarang) updateTableName(table string) *tKegiatanBarang {
	t.ALL = field.NewAsterisk(table)
	t.CIDKegiatan = field.NewInt32(table, "c_id_kegiatan")
	t.CKodeBarang = field.NewString(table, "c_kode_barang")
	t.CSatuan = field.NewString(table, "c_satuan")
	t.CJumlah = field.NewFloat64(table, "c_jumlah")
	t.CUpdater = field.NewString(table, "c_updater")
	t.CLastUpdate = field.NewTime(table, "c_last_update")

	t.fillFieldMap()

	return t
}

func (t *tKegiatanBarang) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tKegiatanBarang) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 6)
	t.fieldMap["c_id_kegiatan"] = t.CIDKegiatan
	t.fieldMap["c_kode_barang"] = t.CKodeBarang
	t.fieldMap["c_satuan"] = t.CSatuan
	t.fieldMap["c_jumlah"] = t.CJumlah
	t.fieldMap["c_updater"] = t.CUpdater
	t.fieldMap["c_last_update"] = t.CLastUpdate
}

func (t tKegiatanBarang) clone(db *gorm.DB) tKegiatanBarang {
	t.tKegiatanBarangDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tKegiatanBarang) replaceDB(db *gorm.DB) tKegiatanBarang {
	t.tKegiatanBarangDo.ReplaceDB(db)
	return t
}

type tKegiatanBarangDo struct{ gen.DO }

type ITKegiatanBarangDo interface {
	gen.SubQuery
	Debug() ITKegiatanBarangDo
	WithContext(ctx context.Context) ITKegiatanBarangDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITKegiatanBarangDo
	WriteDB() ITKegiatanBarangDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITKegiatanBarangDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITKegiatanBarangDo
	Not(conds ...gen.Condition) ITKegiatanBarangDo
	Or(conds ...gen.Condition) ITKegiatanBarangDo
	Select(conds ...field.Expr) ITKegiatanBarangDo
	Where(conds ...gen.Condition) ITKegiatanBarangDo
	Order(conds ...field.Expr) ITKegiatanBarangDo
	Distinct(cols ...field.Expr) ITKegiatanBarangDo
	Omit(cols ...field.Expr) ITKegiatanBarangDo
	Join(table schema.Tabler, on ...field.Expr) ITKegiatanBarangDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITKegiatanBarangDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITKegiatanBarangDo
	Group(cols ...field.Expr) ITKegiatanBarangDo
	Having(conds ...gen.Condition) ITKegiatanBarangDo
	Limit(limit int) ITKegiatanBarangDo
	Offset(offset int) ITKegiatanBarangDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITKegiatanBarangDo
	Unscoped() ITKegiatanBarangDo
	Create(values ...*model.TKegiatanBarang) error
	CreateInBatches(values []*model.TKegiatanBarang, batchSize int) error
	Save(values ...*model.TKegiatanBarang) error
	First() (*model.TKegiatanBarang, error)
	Take() (*model.TKegiatanBarang, error)
	Last() (*model.TKegiatanBarang, error)
	Find() ([]*model.TKegiatanBarang, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TKegiatanBarang, err error)
	FindInBatches(result *[]*model.TKegiatanBarang, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TKegiatanBarang) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITKegiatanBarangDo
	Assign(attrs ...field.AssignExpr) ITKegiatanBarangDo
	Joins(fields ...field.RelationField) ITKegiatanBarangDo
	Preload(fields ...field.RelationField) ITKegiatanBarangDo
	FirstOrInit() (*model.TKegiatanBarang, error)
	FirstOrCreate() (*model.TKegiatanBarang, error)
	FindByPage(offset int, limit int) (result []*model.TKegiatanBarang, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITKegiatanBarangDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tKegiatanBarangDo) Debug() ITKegiatanBarangDo {
	return t.withDO(t.DO.Debug())
}

func (t tKegiatanBarangDo) WithContext(ctx context.Context) ITKegiatanBarangDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tKegiatanBarangDo) ReadDB() ITKegiatanBarangDo {
	return t.Clauses(dbresolver.Read)
}

func (t tKegiatanBarangDo) WriteDB() ITKegiatanBarangDo {
	return t.Clauses(dbresolver.Write)
}

func (t tKegiatanBarangDo) Session(config *gorm.Session) ITKegiatanBarangDo {
	return t.withDO(t.DO.Session(config))
}

func (t tKegiatanBarangDo) Clauses(conds ...clause.Expression) ITKegiatanBarangDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tKegiatanBarangDo) Returning(value interface{}, columns ...string) ITKegiatanBarangDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tKegiatanBarangDo) Not(conds ...gen.Condition) ITKegiatanBarangDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tKegiatanBarangDo) Or(conds ...gen.Condition) ITKegiatanBarangDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tKegiatanBarangDo) Select(conds ...field.Expr) ITKegiatanBarangDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tKegiatanBarangDo) Where(conds ...gen.Condition) ITKegiatanBarangDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tKegiatanBarangDo) Order(conds ...field.Expr) ITKegiatanBarangDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tKegiatanBarangDo) Distinct(cols ...field.Expr) ITKegiatanBarangDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tKegiatanBarangDo) Omit(cols ...field.Expr) ITKegiatanBarangDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tKegiatanBarangDo) Join(table schema.Tabler, on ...field.Expr) ITKegiatanBarangDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tKegiatanBarangDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITKegiatanBarangDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tKegiatanBarangDo) RightJoin(table schema.Tabler, on ...field.Expr) ITKegiatanBarangDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tKegiatanBarangDo) Group(cols ...field.Expr) ITKegiatanBarangDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tKegiatanBarangDo) Having(conds ...gen.Condition) ITKegiatanBarangDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tKegiatanBarangDo) Limit(limit int) ITKegiatanBarangDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tKegiatanBarangDo) Offset(offset int) ITKegiatanBarangDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tKegiatanBarangDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITKegiatanBarangDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tKegiatanBarangDo) Unscoped() ITKegiatanBarangDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tKegiatanBarangDo) Create(values ...*model.TKegiatanBarang) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tKegiatanBarangDo) CreateInBatches(values []*model.TKegiatanBarang, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tKegiatanBarangDo) Save(values ...*model.TKegiatanBarang) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tKegiatanBarangDo) First() (*model.TKegiatanBarang, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKegiatanBarang), nil
	}
}

func (t tKegiatanBarangDo) Take() (*model.TKegiatanBarang, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKegiatanBarang), nil
	}
}

func (t tKegiatanBarangDo) Last() (*model.TKegiatanBarang, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKegiatanBarang), nil
	}
}

func (t tKegiatanBarangDo) Find() ([]*model.TKegiatanBarang, error) {
	result, err := t.DO.Find()
	return result.([]*model.TKegiatanBarang), err
}

func (t tKegiatanBarangDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TKegiatanBarang, err error) {
	buf := make([]*model.TKegiatanBarang, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tKegiatanBarangDo) FindInBatches(result *[]*model.TKegiatanBarang, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tKegiatanBarangDo) Attrs(attrs ...field.AssignExpr) ITKegiatanBarangDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tKegiatanBarangDo) Assign(attrs ...field.AssignExpr) ITKegiatanBarangDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tKegiatanBarangDo) Joins(fields ...field.RelationField) ITKegiatanBarangDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tKegiatanBarangDo) Preload(fields ...field.RelationField) ITKegiatanBarangDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tKegiatanBarangDo) FirstOrInit() (*model.TKegiatanBarang, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKegiatanBarang), nil
	}
}

func (t tKegiatanBarangDo) FirstOrCreate() (*model.TKegiatanBarang, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKegiatanBarang), nil
	}
}

func (t tKegiatanBarangDo) FindByPage(offset int, limit int) (result []*model.TKegiatanBarang, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tKegiatanBarangDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tKegiatanBarangDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tKegiatanBarangDo) Delete(models ...*model.TKegiatanBarang) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tKegiatanBarangDo) withDO(do gen.Dao) *tKegiatanBarangDo {
	t.DO = *do.(*gen.DO)
	return t
}
