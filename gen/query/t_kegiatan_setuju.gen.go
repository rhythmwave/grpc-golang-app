// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-bponline/m/gen/model"
)

func newTKegiatanSetuju(db *gorm.DB, opts ...gen.DOOption) tKegiatanSetuju {
	_tKegiatanSetuju := tKegiatanSetuju{}

	_tKegiatanSetuju.tKegiatanSetujuDo.UseDB(db, opts...)
	_tKegiatanSetuju.tKegiatanSetujuDo.UseModel(&model.TKegiatanSetuju{})

	tableName := _tKegiatanSetuju.tKegiatanSetujuDo.TableName()
	_tKegiatanSetuju.ALL = field.NewAsterisk(tableName)
	_tKegiatanSetuju.CIDKegiatan = field.NewInt32(tableName, "c_id_kegiatan")
	_tKegiatanSetuju.CTanggalAwalSetuju = field.NewTime(tableName, "c_tanggal_awal_setuju")
	_tKegiatanSetuju.CTanggalAkhirSetuju = field.NewTime(tableName, "c_tanggal_akhir_setuju")
	_tKegiatanSetuju.CUpdater = field.NewString(tableName, "c_updater")
	_tKegiatanSetuju.CLastUpdate = field.NewTime(tableName, "c_last_update")

	_tKegiatanSetuju.fillFieldMap()

	return _tKegiatanSetuju
}

type tKegiatanSetuju struct {
	tKegiatanSetujuDo

	ALL                 field.Asterisk
	CIDKegiatan         field.Int32
	CTanggalAwalSetuju  field.Time
	CTanggalAkhirSetuju field.Time
	CUpdater            field.String
	CLastUpdate         field.Time

	fieldMap map[string]field.Expr
}

func (t tKegiatanSetuju) Table(newTableName string) *tKegiatanSetuju {
	t.tKegiatanSetujuDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tKegiatanSetuju) As(alias string) *tKegiatanSetuju {
	t.tKegiatanSetujuDo.DO = *(t.tKegiatanSetujuDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tKegiatanSetuju) updateTableName(table string) *tKegiatanSetuju {
	t.ALL = field.NewAsterisk(table)
	t.CIDKegiatan = field.NewInt32(table, "c_id_kegiatan")
	t.CTanggalAwalSetuju = field.NewTime(table, "c_tanggal_awal_setuju")
	t.CTanggalAkhirSetuju = field.NewTime(table, "c_tanggal_akhir_setuju")
	t.CUpdater = field.NewString(table, "c_updater")
	t.CLastUpdate = field.NewTime(table, "c_last_update")

	t.fillFieldMap()

	return t
}

func (t *tKegiatanSetuju) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tKegiatanSetuju) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 5)
	t.fieldMap["c_id_kegiatan"] = t.CIDKegiatan
	t.fieldMap["c_tanggal_awal_setuju"] = t.CTanggalAwalSetuju
	t.fieldMap["c_tanggal_akhir_setuju"] = t.CTanggalAkhirSetuju
	t.fieldMap["c_updater"] = t.CUpdater
	t.fieldMap["c_last_update"] = t.CLastUpdate
}

func (t tKegiatanSetuju) clone(db *gorm.DB) tKegiatanSetuju {
	t.tKegiatanSetujuDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tKegiatanSetuju) replaceDB(db *gorm.DB) tKegiatanSetuju {
	t.tKegiatanSetujuDo.ReplaceDB(db)
	return t
}

type tKegiatanSetujuDo struct{ gen.DO }

type ITKegiatanSetujuDo interface {
	gen.SubQuery
	Debug() ITKegiatanSetujuDo
	WithContext(ctx context.Context) ITKegiatanSetujuDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITKegiatanSetujuDo
	WriteDB() ITKegiatanSetujuDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITKegiatanSetujuDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITKegiatanSetujuDo
	Not(conds ...gen.Condition) ITKegiatanSetujuDo
	Or(conds ...gen.Condition) ITKegiatanSetujuDo
	Select(conds ...field.Expr) ITKegiatanSetujuDo
	Where(conds ...gen.Condition) ITKegiatanSetujuDo
	Order(conds ...field.Expr) ITKegiatanSetujuDo
	Distinct(cols ...field.Expr) ITKegiatanSetujuDo
	Omit(cols ...field.Expr) ITKegiatanSetujuDo
	Join(table schema.Tabler, on ...field.Expr) ITKegiatanSetujuDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITKegiatanSetujuDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITKegiatanSetujuDo
	Group(cols ...field.Expr) ITKegiatanSetujuDo
	Having(conds ...gen.Condition) ITKegiatanSetujuDo
	Limit(limit int) ITKegiatanSetujuDo
	Offset(offset int) ITKegiatanSetujuDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITKegiatanSetujuDo
	Unscoped() ITKegiatanSetujuDo
	Create(values ...*model.TKegiatanSetuju) error
	CreateInBatches(values []*model.TKegiatanSetuju, batchSize int) error
	Save(values ...*model.TKegiatanSetuju) error
	First() (*model.TKegiatanSetuju, error)
	Take() (*model.TKegiatanSetuju, error)
	Last() (*model.TKegiatanSetuju, error)
	Find() ([]*model.TKegiatanSetuju, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TKegiatanSetuju, err error)
	FindInBatches(result *[]*model.TKegiatanSetuju, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TKegiatanSetuju) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITKegiatanSetujuDo
	Assign(attrs ...field.AssignExpr) ITKegiatanSetujuDo
	Joins(fields ...field.RelationField) ITKegiatanSetujuDo
	Preload(fields ...field.RelationField) ITKegiatanSetujuDo
	FirstOrInit() (*model.TKegiatanSetuju, error)
	FirstOrCreate() (*model.TKegiatanSetuju, error)
	FindByPage(offset int, limit int) (result []*model.TKegiatanSetuju, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITKegiatanSetujuDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tKegiatanSetujuDo) Debug() ITKegiatanSetujuDo {
	return t.withDO(t.DO.Debug())
}

func (t tKegiatanSetujuDo) WithContext(ctx context.Context) ITKegiatanSetujuDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tKegiatanSetujuDo) ReadDB() ITKegiatanSetujuDo {
	return t.Clauses(dbresolver.Read)
}

func (t tKegiatanSetujuDo) WriteDB() ITKegiatanSetujuDo {
	return t.Clauses(dbresolver.Write)
}

func (t tKegiatanSetujuDo) Session(config *gorm.Session) ITKegiatanSetujuDo {
	return t.withDO(t.DO.Session(config))
}

func (t tKegiatanSetujuDo) Clauses(conds ...clause.Expression) ITKegiatanSetujuDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tKegiatanSetujuDo) Returning(value interface{}, columns ...string) ITKegiatanSetujuDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tKegiatanSetujuDo) Not(conds ...gen.Condition) ITKegiatanSetujuDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tKegiatanSetujuDo) Or(conds ...gen.Condition) ITKegiatanSetujuDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tKegiatanSetujuDo) Select(conds ...field.Expr) ITKegiatanSetujuDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tKegiatanSetujuDo) Where(conds ...gen.Condition) ITKegiatanSetujuDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tKegiatanSetujuDo) Order(conds ...field.Expr) ITKegiatanSetujuDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tKegiatanSetujuDo) Distinct(cols ...field.Expr) ITKegiatanSetujuDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tKegiatanSetujuDo) Omit(cols ...field.Expr) ITKegiatanSetujuDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tKegiatanSetujuDo) Join(table schema.Tabler, on ...field.Expr) ITKegiatanSetujuDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tKegiatanSetujuDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITKegiatanSetujuDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tKegiatanSetujuDo) RightJoin(table schema.Tabler, on ...field.Expr) ITKegiatanSetujuDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tKegiatanSetujuDo) Group(cols ...field.Expr) ITKegiatanSetujuDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tKegiatanSetujuDo) Having(conds ...gen.Condition) ITKegiatanSetujuDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tKegiatanSetujuDo) Limit(limit int) ITKegiatanSetujuDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tKegiatanSetujuDo) Offset(offset int) ITKegiatanSetujuDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tKegiatanSetujuDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITKegiatanSetujuDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tKegiatanSetujuDo) Unscoped() ITKegiatanSetujuDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tKegiatanSetujuDo) Create(values ...*model.TKegiatanSetuju) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tKegiatanSetujuDo) CreateInBatches(values []*model.TKegiatanSetuju, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tKegiatanSetujuDo) Save(values ...*model.TKegiatanSetuju) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tKegiatanSetujuDo) First() (*model.TKegiatanSetuju, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKegiatanSetuju), nil
	}
}

func (t tKegiatanSetujuDo) Take() (*model.TKegiatanSetuju, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKegiatanSetuju), nil
	}
}

func (t tKegiatanSetujuDo) Last() (*model.TKegiatanSetuju, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKegiatanSetuju), nil
	}
}

func (t tKegiatanSetujuDo) Find() ([]*model.TKegiatanSetuju, error) {
	result, err := t.DO.Find()
	return result.([]*model.TKegiatanSetuju), err
}

func (t tKegiatanSetujuDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TKegiatanSetuju, err error) {
	buf := make([]*model.TKegiatanSetuju, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tKegiatanSetujuDo) FindInBatches(result *[]*model.TKegiatanSetuju, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tKegiatanSetujuDo) Attrs(attrs ...field.AssignExpr) ITKegiatanSetujuDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tKegiatanSetujuDo) Assign(attrs ...field.AssignExpr) ITKegiatanSetujuDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tKegiatanSetujuDo) Joins(fields ...field.RelationField) ITKegiatanSetujuDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tKegiatanSetujuDo) Preload(fields ...field.RelationField) ITKegiatanSetujuDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tKegiatanSetujuDo) FirstOrInit() (*model.TKegiatanSetuju, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKegiatanSetuju), nil
	}
}

func (t tKegiatanSetujuDo) FirstOrCreate() (*model.TKegiatanSetuju, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKegiatanSetuju), nil
	}
}

func (t tKegiatanSetujuDo) FindByPage(offset int, limit int) (result []*model.TKegiatanSetuju, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tKegiatanSetujuDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tKegiatanSetujuDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tKegiatanSetujuDo) Delete(models ...*model.TKegiatanSetuju) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tKegiatanSetujuDo) withDO(do gen.Dao) *tKegiatanSetujuDo {
	t.DO = *do.(*gen.DO)
	return t
}
