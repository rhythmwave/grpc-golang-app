// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-bponline/m/gen/model"
)

func newTKelAnggaran(db *gorm.DB, opts ...gen.DOOption) tKelAnggaran {
	_tKelAnggaran := tKelAnggaran{}

	_tKelAnggaran.tKelAnggaranDo.UseDB(db, opts...)
	_tKelAnggaran.tKelAnggaranDo.UseModel(&model.TKelAnggaran{})

	tableName := _tKelAnggaran.tKelAnggaranDo.TableName()
	_tKelAnggaran.ALL = field.NewAsterisk(tableName)
	_tKelAnggaran.CKodeKelAnggaran = field.NewString(tableName, "c_kode_kel_anggaran")
	_tKelAnggaran.CNamaKelAnggaran = field.NewString(tableName, "c_nama_kel_anggaran")
	_tKelAnggaran.CStatus = field.NewString(tableName, "c_status")
	_tKelAnggaran.CUpdater = field.NewString(tableName, "c_updater")
	_tKelAnggaran.CLastUpdate = field.NewTime(tableName, "c_last_update")

	_tKelAnggaran.fillFieldMap()

	return _tKelAnggaran
}

type tKelAnggaran struct {
	tKelAnggaranDo

	ALL              field.Asterisk
	CKodeKelAnggaran field.String
	CNamaKelAnggaran field.String
	CStatus          field.String
	CUpdater         field.String
	CLastUpdate      field.Time

	fieldMap map[string]field.Expr
}

func (t tKelAnggaran) Table(newTableName string) *tKelAnggaran {
	t.tKelAnggaranDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tKelAnggaran) As(alias string) *tKelAnggaran {
	t.tKelAnggaranDo.DO = *(t.tKelAnggaranDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tKelAnggaran) updateTableName(table string) *tKelAnggaran {
	t.ALL = field.NewAsterisk(table)
	t.CKodeKelAnggaran = field.NewString(table, "c_kode_kel_anggaran")
	t.CNamaKelAnggaran = field.NewString(table, "c_nama_kel_anggaran")
	t.CStatus = field.NewString(table, "c_status")
	t.CUpdater = field.NewString(table, "c_updater")
	t.CLastUpdate = field.NewTime(table, "c_last_update")

	t.fillFieldMap()

	return t
}

func (t *tKelAnggaran) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tKelAnggaran) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 5)
	t.fieldMap["c_kode_kel_anggaran"] = t.CKodeKelAnggaran
	t.fieldMap["c_nama_kel_anggaran"] = t.CNamaKelAnggaran
	t.fieldMap["c_status"] = t.CStatus
	t.fieldMap["c_updater"] = t.CUpdater
	t.fieldMap["c_last_update"] = t.CLastUpdate
}

func (t tKelAnggaran) clone(db *gorm.DB) tKelAnggaran {
	t.tKelAnggaranDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tKelAnggaran) replaceDB(db *gorm.DB) tKelAnggaran {
	t.tKelAnggaranDo.ReplaceDB(db)
	return t
}

type tKelAnggaranDo struct{ gen.DO }

type ITKelAnggaranDo interface {
	gen.SubQuery
	Debug() ITKelAnggaranDo
	WithContext(ctx context.Context) ITKelAnggaranDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITKelAnggaranDo
	WriteDB() ITKelAnggaranDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITKelAnggaranDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITKelAnggaranDo
	Not(conds ...gen.Condition) ITKelAnggaranDo
	Or(conds ...gen.Condition) ITKelAnggaranDo
	Select(conds ...field.Expr) ITKelAnggaranDo
	Where(conds ...gen.Condition) ITKelAnggaranDo
	Order(conds ...field.Expr) ITKelAnggaranDo
	Distinct(cols ...field.Expr) ITKelAnggaranDo
	Omit(cols ...field.Expr) ITKelAnggaranDo
	Join(table schema.Tabler, on ...field.Expr) ITKelAnggaranDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITKelAnggaranDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITKelAnggaranDo
	Group(cols ...field.Expr) ITKelAnggaranDo
	Having(conds ...gen.Condition) ITKelAnggaranDo
	Limit(limit int) ITKelAnggaranDo
	Offset(offset int) ITKelAnggaranDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITKelAnggaranDo
	Unscoped() ITKelAnggaranDo
	Create(values ...*model.TKelAnggaran) error
	CreateInBatches(values []*model.TKelAnggaran, batchSize int) error
	Save(values ...*model.TKelAnggaran) error
	First() (*model.TKelAnggaran, error)
	Take() (*model.TKelAnggaran, error)
	Last() (*model.TKelAnggaran, error)
	Find() ([]*model.TKelAnggaran, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TKelAnggaran, err error)
	FindInBatches(result *[]*model.TKelAnggaran, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TKelAnggaran) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITKelAnggaranDo
	Assign(attrs ...field.AssignExpr) ITKelAnggaranDo
	Joins(fields ...field.RelationField) ITKelAnggaranDo
	Preload(fields ...field.RelationField) ITKelAnggaranDo
	FirstOrInit() (*model.TKelAnggaran, error)
	FirstOrCreate() (*model.TKelAnggaran, error)
	FindByPage(offset int, limit int) (result []*model.TKelAnggaran, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITKelAnggaranDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tKelAnggaranDo) Debug() ITKelAnggaranDo {
	return t.withDO(t.DO.Debug())
}

func (t tKelAnggaranDo) WithContext(ctx context.Context) ITKelAnggaranDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tKelAnggaranDo) ReadDB() ITKelAnggaranDo {
	return t.Clauses(dbresolver.Read)
}

func (t tKelAnggaranDo) WriteDB() ITKelAnggaranDo {
	return t.Clauses(dbresolver.Write)
}

func (t tKelAnggaranDo) Session(config *gorm.Session) ITKelAnggaranDo {
	return t.withDO(t.DO.Session(config))
}

func (t tKelAnggaranDo) Clauses(conds ...clause.Expression) ITKelAnggaranDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tKelAnggaranDo) Returning(value interface{}, columns ...string) ITKelAnggaranDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tKelAnggaranDo) Not(conds ...gen.Condition) ITKelAnggaranDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tKelAnggaranDo) Or(conds ...gen.Condition) ITKelAnggaranDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tKelAnggaranDo) Select(conds ...field.Expr) ITKelAnggaranDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tKelAnggaranDo) Where(conds ...gen.Condition) ITKelAnggaranDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tKelAnggaranDo) Order(conds ...field.Expr) ITKelAnggaranDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tKelAnggaranDo) Distinct(cols ...field.Expr) ITKelAnggaranDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tKelAnggaranDo) Omit(cols ...field.Expr) ITKelAnggaranDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tKelAnggaranDo) Join(table schema.Tabler, on ...field.Expr) ITKelAnggaranDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tKelAnggaranDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITKelAnggaranDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tKelAnggaranDo) RightJoin(table schema.Tabler, on ...field.Expr) ITKelAnggaranDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tKelAnggaranDo) Group(cols ...field.Expr) ITKelAnggaranDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tKelAnggaranDo) Having(conds ...gen.Condition) ITKelAnggaranDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tKelAnggaranDo) Limit(limit int) ITKelAnggaranDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tKelAnggaranDo) Offset(offset int) ITKelAnggaranDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tKelAnggaranDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITKelAnggaranDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tKelAnggaranDo) Unscoped() ITKelAnggaranDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tKelAnggaranDo) Create(values ...*model.TKelAnggaran) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tKelAnggaranDo) CreateInBatches(values []*model.TKelAnggaran, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tKelAnggaranDo) Save(values ...*model.TKelAnggaran) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tKelAnggaranDo) First() (*model.TKelAnggaran, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKelAnggaran), nil
	}
}

func (t tKelAnggaranDo) Take() (*model.TKelAnggaran, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKelAnggaran), nil
	}
}

func (t tKelAnggaranDo) Last() (*model.TKelAnggaran, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKelAnggaran), nil
	}
}

func (t tKelAnggaranDo) Find() ([]*model.TKelAnggaran, error) {
	result, err := t.DO.Find()
	return result.([]*model.TKelAnggaran), err
}

func (t tKelAnggaranDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TKelAnggaran, err error) {
	buf := make([]*model.TKelAnggaran, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tKelAnggaranDo) FindInBatches(result *[]*model.TKelAnggaran, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tKelAnggaranDo) Attrs(attrs ...field.AssignExpr) ITKelAnggaranDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tKelAnggaranDo) Assign(attrs ...field.AssignExpr) ITKelAnggaranDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tKelAnggaranDo) Joins(fields ...field.RelationField) ITKelAnggaranDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tKelAnggaranDo) Preload(fields ...field.RelationField) ITKelAnggaranDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tKelAnggaranDo) FirstOrInit() (*model.TKelAnggaran, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKelAnggaran), nil
	}
}

func (t tKelAnggaranDo) FirstOrCreate() (*model.TKelAnggaran, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKelAnggaran), nil
	}
}

func (t tKelAnggaranDo) FindByPage(offset int, limit int) (result []*model.TKelAnggaran, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tKelAnggaranDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tKelAnggaranDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tKelAnggaranDo) Delete(models ...*model.TKelAnggaran) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tKelAnggaranDo) withDO(do gen.Dao) *tKelAnggaranDo {
	t.DO = *do.(*gen.DO)
	return t
}
