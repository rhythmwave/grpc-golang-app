// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-bponline/m/gen/model"
)

func newTKelBarang(db *gorm.DB, opts ...gen.DOOption) tKelBarang {
	_tKelBarang := tKelBarang{}

	_tKelBarang.tKelBarangDo.UseDB(db, opts...)
	_tKelBarang.tKelBarangDo.UseModel(&model.TKelBarang{})

	tableName := _tKelBarang.tKelBarangDo.TableName()
	_tKelBarang.ALL = field.NewAsterisk(tableName)
	_tKelBarang.CKodeKelBarang = field.NewString(tableName, "c_kode_kel_barang")
	_tKelBarang.CNamaKelBarang = field.NewString(tableName, "c_nama_kel_barang")
	_tKelBarang.CStatus = field.NewString(tableName, "c_status")
	_tKelBarang.CUpdater = field.NewString(tableName, "c_updater")
	_tKelBarang.CLastUpdate = field.NewTime(tableName, "c_last_update")

	_tKelBarang.fillFieldMap()

	return _tKelBarang
}

type tKelBarang struct {
	tKelBarangDo

	ALL            field.Asterisk
	CKodeKelBarang field.String
	CNamaKelBarang field.String
	CStatus        field.String
	CUpdater       field.String
	CLastUpdate    field.Time

	fieldMap map[string]field.Expr
}

func (t tKelBarang) Table(newTableName string) *tKelBarang {
	t.tKelBarangDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tKelBarang) As(alias string) *tKelBarang {
	t.tKelBarangDo.DO = *(t.tKelBarangDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tKelBarang) updateTableName(table string) *tKelBarang {
	t.ALL = field.NewAsterisk(table)
	t.CKodeKelBarang = field.NewString(table, "c_kode_kel_barang")
	t.CNamaKelBarang = field.NewString(table, "c_nama_kel_barang")
	t.CStatus = field.NewString(table, "c_status")
	t.CUpdater = field.NewString(table, "c_updater")
	t.CLastUpdate = field.NewTime(table, "c_last_update")

	t.fillFieldMap()

	return t
}

func (t *tKelBarang) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tKelBarang) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 5)
	t.fieldMap["c_kode_kel_barang"] = t.CKodeKelBarang
	t.fieldMap["c_nama_kel_barang"] = t.CNamaKelBarang
	t.fieldMap["c_status"] = t.CStatus
	t.fieldMap["c_updater"] = t.CUpdater
	t.fieldMap["c_last_update"] = t.CLastUpdate
}

func (t tKelBarang) clone(db *gorm.DB) tKelBarang {
	t.tKelBarangDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tKelBarang) replaceDB(db *gorm.DB) tKelBarang {
	t.tKelBarangDo.ReplaceDB(db)
	return t
}

type tKelBarangDo struct{ gen.DO }

type ITKelBarangDo interface {
	gen.SubQuery
	Debug() ITKelBarangDo
	WithContext(ctx context.Context) ITKelBarangDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITKelBarangDo
	WriteDB() ITKelBarangDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITKelBarangDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITKelBarangDo
	Not(conds ...gen.Condition) ITKelBarangDo
	Or(conds ...gen.Condition) ITKelBarangDo
	Select(conds ...field.Expr) ITKelBarangDo
	Where(conds ...gen.Condition) ITKelBarangDo
	Order(conds ...field.Expr) ITKelBarangDo
	Distinct(cols ...field.Expr) ITKelBarangDo
	Omit(cols ...field.Expr) ITKelBarangDo
	Join(table schema.Tabler, on ...field.Expr) ITKelBarangDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITKelBarangDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITKelBarangDo
	Group(cols ...field.Expr) ITKelBarangDo
	Having(conds ...gen.Condition) ITKelBarangDo
	Limit(limit int) ITKelBarangDo
	Offset(offset int) ITKelBarangDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITKelBarangDo
	Unscoped() ITKelBarangDo
	Create(values ...*model.TKelBarang) error
	CreateInBatches(values []*model.TKelBarang, batchSize int) error
	Save(values ...*model.TKelBarang) error
	First() (*model.TKelBarang, error)
	Take() (*model.TKelBarang, error)
	Last() (*model.TKelBarang, error)
	Find() ([]*model.TKelBarang, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TKelBarang, err error)
	FindInBatches(result *[]*model.TKelBarang, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TKelBarang) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITKelBarangDo
	Assign(attrs ...field.AssignExpr) ITKelBarangDo
	Joins(fields ...field.RelationField) ITKelBarangDo
	Preload(fields ...field.RelationField) ITKelBarangDo
	FirstOrInit() (*model.TKelBarang, error)
	FirstOrCreate() (*model.TKelBarang, error)
	FindByPage(offset int, limit int) (result []*model.TKelBarang, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITKelBarangDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tKelBarangDo) Debug() ITKelBarangDo {
	return t.withDO(t.DO.Debug())
}

func (t tKelBarangDo) WithContext(ctx context.Context) ITKelBarangDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tKelBarangDo) ReadDB() ITKelBarangDo {
	return t.Clauses(dbresolver.Read)
}

func (t tKelBarangDo) WriteDB() ITKelBarangDo {
	return t.Clauses(dbresolver.Write)
}

func (t tKelBarangDo) Session(config *gorm.Session) ITKelBarangDo {
	return t.withDO(t.DO.Session(config))
}

func (t tKelBarangDo) Clauses(conds ...clause.Expression) ITKelBarangDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tKelBarangDo) Returning(value interface{}, columns ...string) ITKelBarangDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tKelBarangDo) Not(conds ...gen.Condition) ITKelBarangDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tKelBarangDo) Or(conds ...gen.Condition) ITKelBarangDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tKelBarangDo) Select(conds ...field.Expr) ITKelBarangDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tKelBarangDo) Where(conds ...gen.Condition) ITKelBarangDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tKelBarangDo) Order(conds ...field.Expr) ITKelBarangDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tKelBarangDo) Distinct(cols ...field.Expr) ITKelBarangDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tKelBarangDo) Omit(cols ...field.Expr) ITKelBarangDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tKelBarangDo) Join(table schema.Tabler, on ...field.Expr) ITKelBarangDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tKelBarangDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITKelBarangDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tKelBarangDo) RightJoin(table schema.Tabler, on ...field.Expr) ITKelBarangDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tKelBarangDo) Group(cols ...field.Expr) ITKelBarangDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tKelBarangDo) Having(conds ...gen.Condition) ITKelBarangDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tKelBarangDo) Limit(limit int) ITKelBarangDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tKelBarangDo) Offset(offset int) ITKelBarangDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tKelBarangDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITKelBarangDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tKelBarangDo) Unscoped() ITKelBarangDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tKelBarangDo) Create(values ...*model.TKelBarang) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tKelBarangDo) CreateInBatches(values []*model.TKelBarang, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tKelBarangDo) Save(values ...*model.TKelBarang) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tKelBarangDo) First() (*model.TKelBarang, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKelBarang), nil
	}
}

func (t tKelBarangDo) Take() (*model.TKelBarang, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKelBarang), nil
	}
}

func (t tKelBarangDo) Last() (*model.TKelBarang, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKelBarang), nil
	}
}

func (t tKelBarangDo) Find() ([]*model.TKelBarang, error) {
	result, err := t.DO.Find()
	return result.([]*model.TKelBarang), err
}

func (t tKelBarangDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TKelBarang, err error) {
	buf := make([]*model.TKelBarang, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tKelBarangDo) FindInBatches(result *[]*model.TKelBarang, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tKelBarangDo) Attrs(attrs ...field.AssignExpr) ITKelBarangDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tKelBarangDo) Assign(attrs ...field.AssignExpr) ITKelBarangDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tKelBarangDo) Joins(fields ...field.RelationField) ITKelBarangDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tKelBarangDo) Preload(fields ...field.RelationField) ITKelBarangDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tKelBarangDo) FirstOrInit() (*model.TKelBarang, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKelBarang), nil
	}
}

func (t tKelBarangDo) FirstOrCreate() (*model.TKelBarang, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKelBarang), nil
	}
}

func (t tKelBarangDo) FindByPage(offset int, limit int) (result []*model.TKelBarang, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tKelBarangDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tKelBarangDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tKelBarangDo) Delete(models ...*model.TKelBarang) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tKelBarangDo) withDO(do gen.Dao) *tKelBarangDo {
	t.DO = *do.(*gen.DO)
	return t
}
