// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-bponline/m/gen/model"
)

func newTKelNamaPanitium(db *gorm.DB, opts ...gen.DOOption) tKelNamaPanitium {
	_tKelNamaPanitium := tKelNamaPanitium{}

	_tKelNamaPanitium.tKelNamaPanitiumDo.UseDB(db, opts...)
	_tKelNamaPanitium.tKelNamaPanitiumDo.UseModel(&model.TKelNamaPanitium{})

	tableName := _tKelNamaPanitium.tKelNamaPanitiumDo.TableName()
	_tKelNamaPanitium.ALL = field.NewAsterisk(tableName)
	_tKelNamaPanitium.CKodeKelPanitia = field.NewString(tableName, "c_kode_kel_panitia")
	_tKelNamaPanitium.CKodePanitia = field.NewString(tableName, "c_kode_panitia")
	_tKelNamaPanitium.CUpdater = field.NewString(tableName, "c_updater")
	_tKelNamaPanitium.CLastUpdate = field.NewTime(tableName, "c_last_update")

	_tKelNamaPanitium.fillFieldMap()

	return _tKelNamaPanitium
}

type tKelNamaPanitium struct {
	tKelNamaPanitiumDo

	ALL             field.Asterisk
	CKodeKelPanitia field.String
	CKodePanitia    field.String
	CUpdater        field.String
	CLastUpdate     field.Time

	fieldMap map[string]field.Expr
}

func (t tKelNamaPanitium) Table(newTableName string) *tKelNamaPanitium {
	t.tKelNamaPanitiumDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tKelNamaPanitium) As(alias string) *tKelNamaPanitium {
	t.tKelNamaPanitiumDo.DO = *(t.tKelNamaPanitiumDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tKelNamaPanitium) updateTableName(table string) *tKelNamaPanitium {
	t.ALL = field.NewAsterisk(table)
	t.CKodeKelPanitia = field.NewString(table, "c_kode_kel_panitia")
	t.CKodePanitia = field.NewString(table, "c_kode_panitia")
	t.CUpdater = field.NewString(table, "c_updater")
	t.CLastUpdate = field.NewTime(table, "c_last_update")

	t.fillFieldMap()

	return t
}

func (t *tKelNamaPanitium) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tKelNamaPanitium) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 4)
	t.fieldMap["c_kode_kel_panitia"] = t.CKodeKelPanitia
	t.fieldMap["c_kode_panitia"] = t.CKodePanitia
	t.fieldMap["c_updater"] = t.CUpdater
	t.fieldMap["c_last_update"] = t.CLastUpdate
}

func (t tKelNamaPanitium) clone(db *gorm.DB) tKelNamaPanitium {
	t.tKelNamaPanitiumDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tKelNamaPanitium) replaceDB(db *gorm.DB) tKelNamaPanitium {
	t.tKelNamaPanitiumDo.ReplaceDB(db)
	return t
}

type tKelNamaPanitiumDo struct{ gen.DO }

type ITKelNamaPanitiumDo interface {
	gen.SubQuery
	Debug() ITKelNamaPanitiumDo
	WithContext(ctx context.Context) ITKelNamaPanitiumDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITKelNamaPanitiumDo
	WriteDB() ITKelNamaPanitiumDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITKelNamaPanitiumDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITKelNamaPanitiumDo
	Not(conds ...gen.Condition) ITKelNamaPanitiumDo
	Or(conds ...gen.Condition) ITKelNamaPanitiumDo
	Select(conds ...field.Expr) ITKelNamaPanitiumDo
	Where(conds ...gen.Condition) ITKelNamaPanitiumDo
	Order(conds ...field.Expr) ITKelNamaPanitiumDo
	Distinct(cols ...field.Expr) ITKelNamaPanitiumDo
	Omit(cols ...field.Expr) ITKelNamaPanitiumDo
	Join(table schema.Tabler, on ...field.Expr) ITKelNamaPanitiumDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITKelNamaPanitiumDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITKelNamaPanitiumDo
	Group(cols ...field.Expr) ITKelNamaPanitiumDo
	Having(conds ...gen.Condition) ITKelNamaPanitiumDo
	Limit(limit int) ITKelNamaPanitiumDo
	Offset(offset int) ITKelNamaPanitiumDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITKelNamaPanitiumDo
	Unscoped() ITKelNamaPanitiumDo
	Create(values ...*model.TKelNamaPanitium) error
	CreateInBatches(values []*model.TKelNamaPanitium, batchSize int) error
	Save(values ...*model.TKelNamaPanitium) error
	First() (*model.TKelNamaPanitium, error)
	Take() (*model.TKelNamaPanitium, error)
	Last() (*model.TKelNamaPanitium, error)
	Find() ([]*model.TKelNamaPanitium, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TKelNamaPanitium, err error)
	FindInBatches(result *[]*model.TKelNamaPanitium, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TKelNamaPanitium) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITKelNamaPanitiumDo
	Assign(attrs ...field.AssignExpr) ITKelNamaPanitiumDo
	Joins(fields ...field.RelationField) ITKelNamaPanitiumDo
	Preload(fields ...field.RelationField) ITKelNamaPanitiumDo
	FirstOrInit() (*model.TKelNamaPanitium, error)
	FirstOrCreate() (*model.TKelNamaPanitium, error)
	FindByPage(offset int, limit int) (result []*model.TKelNamaPanitium, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITKelNamaPanitiumDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tKelNamaPanitiumDo) Debug() ITKelNamaPanitiumDo {
	return t.withDO(t.DO.Debug())
}

func (t tKelNamaPanitiumDo) WithContext(ctx context.Context) ITKelNamaPanitiumDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tKelNamaPanitiumDo) ReadDB() ITKelNamaPanitiumDo {
	return t.Clauses(dbresolver.Read)
}

func (t tKelNamaPanitiumDo) WriteDB() ITKelNamaPanitiumDo {
	return t.Clauses(dbresolver.Write)
}

func (t tKelNamaPanitiumDo) Session(config *gorm.Session) ITKelNamaPanitiumDo {
	return t.withDO(t.DO.Session(config))
}

func (t tKelNamaPanitiumDo) Clauses(conds ...clause.Expression) ITKelNamaPanitiumDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tKelNamaPanitiumDo) Returning(value interface{}, columns ...string) ITKelNamaPanitiumDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tKelNamaPanitiumDo) Not(conds ...gen.Condition) ITKelNamaPanitiumDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tKelNamaPanitiumDo) Or(conds ...gen.Condition) ITKelNamaPanitiumDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tKelNamaPanitiumDo) Select(conds ...field.Expr) ITKelNamaPanitiumDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tKelNamaPanitiumDo) Where(conds ...gen.Condition) ITKelNamaPanitiumDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tKelNamaPanitiumDo) Order(conds ...field.Expr) ITKelNamaPanitiumDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tKelNamaPanitiumDo) Distinct(cols ...field.Expr) ITKelNamaPanitiumDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tKelNamaPanitiumDo) Omit(cols ...field.Expr) ITKelNamaPanitiumDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tKelNamaPanitiumDo) Join(table schema.Tabler, on ...field.Expr) ITKelNamaPanitiumDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tKelNamaPanitiumDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITKelNamaPanitiumDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tKelNamaPanitiumDo) RightJoin(table schema.Tabler, on ...field.Expr) ITKelNamaPanitiumDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tKelNamaPanitiumDo) Group(cols ...field.Expr) ITKelNamaPanitiumDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tKelNamaPanitiumDo) Having(conds ...gen.Condition) ITKelNamaPanitiumDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tKelNamaPanitiumDo) Limit(limit int) ITKelNamaPanitiumDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tKelNamaPanitiumDo) Offset(offset int) ITKelNamaPanitiumDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tKelNamaPanitiumDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITKelNamaPanitiumDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tKelNamaPanitiumDo) Unscoped() ITKelNamaPanitiumDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tKelNamaPanitiumDo) Create(values ...*model.TKelNamaPanitium) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tKelNamaPanitiumDo) CreateInBatches(values []*model.TKelNamaPanitium, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tKelNamaPanitiumDo) Save(values ...*model.TKelNamaPanitium) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tKelNamaPanitiumDo) First() (*model.TKelNamaPanitium, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKelNamaPanitium), nil
	}
}

func (t tKelNamaPanitiumDo) Take() (*model.TKelNamaPanitium, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKelNamaPanitium), nil
	}
}

func (t tKelNamaPanitiumDo) Last() (*model.TKelNamaPanitium, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKelNamaPanitium), nil
	}
}

func (t tKelNamaPanitiumDo) Find() ([]*model.TKelNamaPanitium, error) {
	result, err := t.DO.Find()
	return result.([]*model.TKelNamaPanitium), err
}

func (t tKelNamaPanitiumDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TKelNamaPanitium, err error) {
	buf := make([]*model.TKelNamaPanitium, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tKelNamaPanitiumDo) FindInBatches(result *[]*model.TKelNamaPanitium, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tKelNamaPanitiumDo) Attrs(attrs ...field.AssignExpr) ITKelNamaPanitiumDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tKelNamaPanitiumDo) Assign(attrs ...field.AssignExpr) ITKelNamaPanitiumDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tKelNamaPanitiumDo) Joins(fields ...field.RelationField) ITKelNamaPanitiumDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tKelNamaPanitiumDo) Preload(fields ...field.RelationField) ITKelNamaPanitiumDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tKelNamaPanitiumDo) FirstOrInit() (*model.TKelNamaPanitium, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKelNamaPanitium), nil
	}
}

func (t tKelNamaPanitiumDo) FirstOrCreate() (*model.TKelNamaPanitium, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKelNamaPanitium), nil
	}
}

func (t tKelNamaPanitiumDo) FindByPage(offset int, limit int) (result []*model.TKelNamaPanitium, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tKelNamaPanitiumDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tKelNamaPanitiumDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tKelNamaPanitiumDo) Delete(models ...*model.TKelNamaPanitium) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tKelNamaPanitiumDo) withDO(do gen.Dao) *tKelNamaPanitiumDo {
	t.DO = *do.(*gen.DO)
	return t
}
