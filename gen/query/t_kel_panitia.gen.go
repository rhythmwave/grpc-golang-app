// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-bponline/m/gen/model"
)

func newTKelPanitium(db *gorm.DB, opts ...gen.DOOption) tKelPanitium {
	_tKelPanitium := tKelPanitium{}

	_tKelPanitium.tKelPanitiumDo.UseDB(db, opts...)
	_tKelPanitium.tKelPanitiumDo.UseModel(&model.TKelPanitium{})

	tableName := _tKelPanitium.tKelPanitiumDo.TableName()
	_tKelPanitium.ALL = field.NewAsterisk(tableName)
	_tKelPanitium.CKodeKelPanitia = field.NewString(tableName, "c_kode_kel_panitia")
	_tKelPanitium.CNamaKelPanitia = field.NewString(tableName, "c_nama_kel_panitia")
	_tKelPanitium.CStatus = field.NewString(tableName, "c_status")
	_tKelPanitium.CUpdater = field.NewString(tableName, "c_updater")
	_tKelPanitium.CLastUpdate = field.NewTime(tableName, "c_last_update")

	_tKelPanitium.fillFieldMap()

	return _tKelPanitium
}

type tKelPanitium struct {
	tKelPanitiumDo

	ALL             field.Asterisk
	CKodeKelPanitia field.String
	CNamaKelPanitia field.String
	CStatus         field.String
	CUpdater        field.String
	CLastUpdate     field.Time

	fieldMap map[string]field.Expr
}

func (t tKelPanitium) Table(newTableName string) *tKelPanitium {
	t.tKelPanitiumDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tKelPanitium) As(alias string) *tKelPanitium {
	t.tKelPanitiumDo.DO = *(t.tKelPanitiumDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tKelPanitium) updateTableName(table string) *tKelPanitium {
	t.ALL = field.NewAsterisk(table)
	t.CKodeKelPanitia = field.NewString(table, "c_kode_kel_panitia")
	t.CNamaKelPanitia = field.NewString(table, "c_nama_kel_panitia")
	t.CStatus = field.NewString(table, "c_status")
	t.CUpdater = field.NewString(table, "c_updater")
	t.CLastUpdate = field.NewTime(table, "c_last_update")

	t.fillFieldMap()

	return t
}

func (t *tKelPanitium) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tKelPanitium) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 5)
	t.fieldMap["c_kode_kel_panitia"] = t.CKodeKelPanitia
	t.fieldMap["c_nama_kel_panitia"] = t.CNamaKelPanitia
	t.fieldMap["c_status"] = t.CStatus
	t.fieldMap["c_updater"] = t.CUpdater
	t.fieldMap["c_last_update"] = t.CLastUpdate
}

func (t tKelPanitium) clone(db *gorm.DB) tKelPanitium {
	t.tKelPanitiumDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tKelPanitium) replaceDB(db *gorm.DB) tKelPanitium {
	t.tKelPanitiumDo.ReplaceDB(db)
	return t
}

type tKelPanitiumDo struct{ gen.DO }

type ITKelPanitiumDo interface {
	gen.SubQuery
	Debug() ITKelPanitiumDo
	WithContext(ctx context.Context) ITKelPanitiumDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITKelPanitiumDo
	WriteDB() ITKelPanitiumDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITKelPanitiumDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITKelPanitiumDo
	Not(conds ...gen.Condition) ITKelPanitiumDo
	Or(conds ...gen.Condition) ITKelPanitiumDo
	Select(conds ...field.Expr) ITKelPanitiumDo
	Where(conds ...gen.Condition) ITKelPanitiumDo
	Order(conds ...field.Expr) ITKelPanitiumDo
	Distinct(cols ...field.Expr) ITKelPanitiumDo
	Omit(cols ...field.Expr) ITKelPanitiumDo
	Join(table schema.Tabler, on ...field.Expr) ITKelPanitiumDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITKelPanitiumDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITKelPanitiumDo
	Group(cols ...field.Expr) ITKelPanitiumDo
	Having(conds ...gen.Condition) ITKelPanitiumDo
	Limit(limit int) ITKelPanitiumDo
	Offset(offset int) ITKelPanitiumDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITKelPanitiumDo
	Unscoped() ITKelPanitiumDo
	Create(values ...*model.TKelPanitium) error
	CreateInBatches(values []*model.TKelPanitium, batchSize int) error
	Save(values ...*model.TKelPanitium) error
	First() (*model.TKelPanitium, error)
	Take() (*model.TKelPanitium, error)
	Last() (*model.TKelPanitium, error)
	Find() ([]*model.TKelPanitium, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TKelPanitium, err error)
	FindInBatches(result *[]*model.TKelPanitium, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TKelPanitium) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITKelPanitiumDo
	Assign(attrs ...field.AssignExpr) ITKelPanitiumDo
	Joins(fields ...field.RelationField) ITKelPanitiumDo
	Preload(fields ...field.RelationField) ITKelPanitiumDo
	FirstOrInit() (*model.TKelPanitium, error)
	FirstOrCreate() (*model.TKelPanitium, error)
	FindByPage(offset int, limit int) (result []*model.TKelPanitium, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITKelPanitiumDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tKelPanitiumDo) Debug() ITKelPanitiumDo {
	return t.withDO(t.DO.Debug())
}

func (t tKelPanitiumDo) WithContext(ctx context.Context) ITKelPanitiumDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tKelPanitiumDo) ReadDB() ITKelPanitiumDo {
	return t.Clauses(dbresolver.Read)
}

func (t tKelPanitiumDo) WriteDB() ITKelPanitiumDo {
	return t.Clauses(dbresolver.Write)
}

func (t tKelPanitiumDo) Session(config *gorm.Session) ITKelPanitiumDo {
	return t.withDO(t.DO.Session(config))
}

func (t tKelPanitiumDo) Clauses(conds ...clause.Expression) ITKelPanitiumDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tKelPanitiumDo) Returning(value interface{}, columns ...string) ITKelPanitiumDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tKelPanitiumDo) Not(conds ...gen.Condition) ITKelPanitiumDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tKelPanitiumDo) Or(conds ...gen.Condition) ITKelPanitiumDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tKelPanitiumDo) Select(conds ...field.Expr) ITKelPanitiumDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tKelPanitiumDo) Where(conds ...gen.Condition) ITKelPanitiumDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tKelPanitiumDo) Order(conds ...field.Expr) ITKelPanitiumDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tKelPanitiumDo) Distinct(cols ...field.Expr) ITKelPanitiumDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tKelPanitiumDo) Omit(cols ...field.Expr) ITKelPanitiumDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tKelPanitiumDo) Join(table schema.Tabler, on ...field.Expr) ITKelPanitiumDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tKelPanitiumDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITKelPanitiumDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tKelPanitiumDo) RightJoin(table schema.Tabler, on ...field.Expr) ITKelPanitiumDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tKelPanitiumDo) Group(cols ...field.Expr) ITKelPanitiumDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tKelPanitiumDo) Having(conds ...gen.Condition) ITKelPanitiumDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tKelPanitiumDo) Limit(limit int) ITKelPanitiumDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tKelPanitiumDo) Offset(offset int) ITKelPanitiumDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tKelPanitiumDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITKelPanitiumDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tKelPanitiumDo) Unscoped() ITKelPanitiumDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tKelPanitiumDo) Create(values ...*model.TKelPanitium) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tKelPanitiumDo) CreateInBatches(values []*model.TKelPanitium, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tKelPanitiumDo) Save(values ...*model.TKelPanitium) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tKelPanitiumDo) First() (*model.TKelPanitium, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKelPanitium), nil
	}
}

func (t tKelPanitiumDo) Take() (*model.TKelPanitium, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKelPanitium), nil
	}
}

func (t tKelPanitiumDo) Last() (*model.TKelPanitium, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKelPanitium), nil
	}
}

func (t tKelPanitiumDo) Find() ([]*model.TKelPanitium, error) {
	result, err := t.DO.Find()
	return result.([]*model.TKelPanitium), err
}

func (t tKelPanitiumDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TKelPanitium, err error) {
	buf := make([]*model.TKelPanitium, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tKelPanitiumDo) FindInBatches(result *[]*model.TKelPanitium, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tKelPanitiumDo) Attrs(attrs ...field.AssignExpr) ITKelPanitiumDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tKelPanitiumDo) Assign(attrs ...field.AssignExpr) ITKelPanitiumDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tKelPanitiumDo) Joins(fields ...field.RelationField) ITKelPanitiumDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tKelPanitiumDo) Preload(fields ...field.RelationField) ITKelPanitiumDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tKelPanitiumDo) FirstOrInit() (*model.TKelPanitium, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKelPanitium), nil
	}
}

func (t tKelPanitiumDo) FirstOrCreate() (*model.TKelPanitium, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKelPanitium), nil
	}
}

func (t tKelPanitiumDo) FindByPage(offset int, limit int) (result []*model.TKelPanitium, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tKelPanitiumDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tKelPanitiumDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tKelPanitiumDo) Delete(models ...*model.TKelPanitium) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tKelPanitiumDo) withDO(do gen.Dao) *tKelPanitiumDo {
	t.DO = *do.(*gen.DO)
	return t
}
