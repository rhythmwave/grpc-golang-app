// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-bponline/m/gen/model"
)

func newTKelompokPajak(db *gorm.DB, opts ...gen.DOOption) tKelompokPajak {
	_tKelompokPajak := tKelompokPajak{}

	_tKelompokPajak.tKelompokPajakDo.UseDB(db, opts...)
	_tKelompokPajak.tKelompokPajakDo.UseModel(&model.TKelompokPajak{})

	tableName := _tKelompokPajak.tKelompokPajakDo.TableName()
	_tKelompokPajak.ALL = field.NewAsterisk(tableName)
	_tKelompokPajak.CIDKelompokPajak = field.NewString(tableName, "c_id_kelompok_pajak")
	_tKelompokPajak.CPersenPajak = field.NewFloat64(tableName, "c_persen_pajak")
	_tKelompokPajak.CUpdater = field.NewString(tableName, "c_updater")
	_tKelompokPajak.CLastUpdate = field.NewTime(tableName, "c_last_update")

	_tKelompokPajak.fillFieldMap()

	return _tKelompokPajak
}

type tKelompokPajak struct {
	tKelompokPajakDo

	ALL              field.Asterisk
	CIDKelompokPajak field.String
	CPersenPajak     field.Float64
	CUpdater         field.String
	CLastUpdate      field.Time

	fieldMap map[string]field.Expr
}

func (t tKelompokPajak) Table(newTableName string) *tKelompokPajak {
	t.tKelompokPajakDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tKelompokPajak) As(alias string) *tKelompokPajak {
	t.tKelompokPajakDo.DO = *(t.tKelompokPajakDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tKelompokPajak) updateTableName(table string) *tKelompokPajak {
	t.ALL = field.NewAsterisk(table)
	t.CIDKelompokPajak = field.NewString(table, "c_id_kelompok_pajak")
	t.CPersenPajak = field.NewFloat64(table, "c_persen_pajak")
	t.CUpdater = field.NewString(table, "c_updater")
	t.CLastUpdate = field.NewTime(table, "c_last_update")

	t.fillFieldMap()

	return t
}

func (t *tKelompokPajak) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tKelompokPajak) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 4)
	t.fieldMap["c_id_kelompok_pajak"] = t.CIDKelompokPajak
	t.fieldMap["c_persen_pajak"] = t.CPersenPajak
	t.fieldMap["c_updater"] = t.CUpdater
	t.fieldMap["c_last_update"] = t.CLastUpdate
}

func (t tKelompokPajak) clone(db *gorm.DB) tKelompokPajak {
	t.tKelompokPajakDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tKelompokPajak) replaceDB(db *gorm.DB) tKelompokPajak {
	t.tKelompokPajakDo.ReplaceDB(db)
	return t
}

type tKelompokPajakDo struct{ gen.DO }

type ITKelompokPajakDo interface {
	gen.SubQuery
	Debug() ITKelompokPajakDo
	WithContext(ctx context.Context) ITKelompokPajakDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITKelompokPajakDo
	WriteDB() ITKelompokPajakDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITKelompokPajakDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITKelompokPajakDo
	Not(conds ...gen.Condition) ITKelompokPajakDo
	Or(conds ...gen.Condition) ITKelompokPajakDo
	Select(conds ...field.Expr) ITKelompokPajakDo
	Where(conds ...gen.Condition) ITKelompokPajakDo
	Order(conds ...field.Expr) ITKelompokPajakDo
	Distinct(cols ...field.Expr) ITKelompokPajakDo
	Omit(cols ...field.Expr) ITKelompokPajakDo
	Join(table schema.Tabler, on ...field.Expr) ITKelompokPajakDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITKelompokPajakDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITKelompokPajakDo
	Group(cols ...field.Expr) ITKelompokPajakDo
	Having(conds ...gen.Condition) ITKelompokPajakDo
	Limit(limit int) ITKelompokPajakDo
	Offset(offset int) ITKelompokPajakDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITKelompokPajakDo
	Unscoped() ITKelompokPajakDo
	Create(values ...*model.TKelompokPajak) error
	CreateInBatches(values []*model.TKelompokPajak, batchSize int) error
	Save(values ...*model.TKelompokPajak) error
	First() (*model.TKelompokPajak, error)
	Take() (*model.TKelompokPajak, error)
	Last() (*model.TKelompokPajak, error)
	Find() ([]*model.TKelompokPajak, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TKelompokPajak, err error)
	FindInBatches(result *[]*model.TKelompokPajak, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TKelompokPajak) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITKelompokPajakDo
	Assign(attrs ...field.AssignExpr) ITKelompokPajakDo
	Joins(fields ...field.RelationField) ITKelompokPajakDo
	Preload(fields ...field.RelationField) ITKelompokPajakDo
	FirstOrInit() (*model.TKelompokPajak, error)
	FirstOrCreate() (*model.TKelompokPajak, error)
	FindByPage(offset int, limit int) (result []*model.TKelompokPajak, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITKelompokPajakDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tKelompokPajakDo) Debug() ITKelompokPajakDo {
	return t.withDO(t.DO.Debug())
}

func (t tKelompokPajakDo) WithContext(ctx context.Context) ITKelompokPajakDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tKelompokPajakDo) ReadDB() ITKelompokPajakDo {
	return t.Clauses(dbresolver.Read)
}

func (t tKelompokPajakDo) WriteDB() ITKelompokPajakDo {
	return t.Clauses(dbresolver.Write)
}

func (t tKelompokPajakDo) Session(config *gorm.Session) ITKelompokPajakDo {
	return t.withDO(t.DO.Session(config))
}

func (t tKelompokPajakDo) Clauses(conds ...clause.Expression) ITKelompokPajakDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tKelompokPajakDo) Returning(value interface{}, columns ...string) ITKelompokPajakDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tKelompokPajakDo) Not(conds ...gen.Condition) ITKelompokPajakDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tKelompokPajakDo) Or(conds ...gen.Condition) ITKelompokPajakDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tKelompokPajakDo) Select(conds ...field.Expr) ITKelompokPajakDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tKelompokPajakDo) Where(conds ...gen.Condition) ITKelompokPajakDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tKelompokPajakDo) Order(conds ...field.Expr) ITKelompokPajakDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tKelompokPajakDo) Distinct(cols ...field.Expr) ITKelompokPajakDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tKelompokPajakDo) Omit(cols ...field.Expr) ITKelompokPajakDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tKelompokPajakDo) Join(table schema.Tabler, on ...field.Expr) ITKelompokPajakDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tKelompokPajakDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITKelompokPajakDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tKelompokPajakDo) RightJoin(table schema.Tabler, on ...field.Expr) ITKelompokPajakDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tKelompokPajakDo) Group(cols ...field.Expr) ITKelompokPajakDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tKelompokPajakDo) Having(conds ...gen.Condition) ITKelompokPajakDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tKelompokPajakDo) Limit(limit int) ITKelompokPajakDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tKelompokPajakDo) Offset(offset int) ITKelompokPajakDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tKelompokPajakDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITKelompokPajakDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tKelompokPajakDo) Unscoped() ITKelompokPajakDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tKelompokPajakDo) Create(values ...*model.TKelompokPajak) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tKelompokPajakDo) CreateInBatches(values []*model.TKelompokPajak, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tKelompokPajakDo) Save(values ...*model.TKelompokPajak) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tKelompokPajakDo) First() (*model.TKelompokPajak, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKelompokPajak), nil
	}
}

func (t tKelompokPajakDo) Take() (*model.TKelompokPajak, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKelompokPajak), nil
	}
}

func (t tKelompokPajakDo) Last() (*model.TKelompokPajak, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKelompokPajak), nil
	}
}

func (t tKelompokPajakDo) Find() ([]*model.TKelompokPajak, error) {
	result, err := t.DO.Find()
	return result.([]*model.TKelompokPajak), err
}

func (t tKelompokPajakDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TKelompokPajak, err error) {
	buf := make([]*model.TKelompokPajak, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tKelompokPajakDo) FindInBatches(result *[]*model.TKelompokPajak, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tKelompokPajakDo) Attrs(attrs ...field.AssignExpr) ITKelompokPajakDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tKelompokPajakDo) Assign(attrs ...field.AssignExpr) ITKelompokPajakDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tKelompokPajakDo) Joins(fields ...field.RelationField) ITKelompokPajakDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tKelompokPajakDo) Preload(fields ...field.RelationField) ITKelompokPajakDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tKelompokPajakDo) FirstOrInit() (*model.TKelompokPajak, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKelompokPajak), nil
	}
}

func (t tKelompokPajakDo) FirstOrCreate() (*model.TKelompokPajak, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKelompokPajak), nil
	}
}

func (t tKelompokPajakDo) FindByPage(offset int, limit int) (result []*model.TKelompokPajak, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tKelompokPajakDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tKelompokPajakDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tKelompokPajakDo) Delete(models ...*model.TKelompokPajak) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tKelompokPajakDo) withDO(do gen.Dao) *tKelompokPajakDo {
	t.DO = *do.(*gen.DO)
	return t
}
