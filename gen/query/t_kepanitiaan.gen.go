// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-bponline/m/gen/model"
)

func newTKepanitiaan(db *gorm.DB, opts ...gen.DOOption) tKepanitiaan {
	_tKepanitiaan := tKepanitiaan{}

	_tKepanitiaan.tKepanitiaanDo.UseDB(db, opts...)
	_tKepanitiaan.tKepanitiaanDo.UseModel(&model.TKepanitiaan{})

	tableName := _tKepanitiaan.tKepanitiaanDo.TableName()
	_tKepanitiaan.ALL = field.NewAsterisk(tableName)
	_tKepanitiaan.CIDKegiatan = field.NewInt32(tableName, "c_id_kegiatan")
	_tKepanitiaan.CNik = field.NewString(tableName, "c_nik")
	_tKepanitiaan.CIDKepanitiaan = field.NewInt32(tableName, "c_id_kepanitiaan")
	_tKepanitiaan.CUpdater = field.NewString(tableName, "c_updater")
	_tKepanitiaan.CLastUpdate = field.NewTime(tableName, "c_last_update")

	_tKepanitiaan.fillFieldMap()

	return _tKepanitiaan
}

type tKepanitiaan struct {
	tKepanitiaanDo

	ALL            field.Asterisk
	CIDKegiatan    field.Int32
	CNik           field.String
	CIDKepanitiaan field.Int32
	CUpdater       field.String
	CLastUpdate    field.Time

	fieldMap map[string]field.Expr
}

func (t tKepanitiaan) Table(newTableName string) *tKepanitiaan {
	t.tKepanitiaanDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tKepanitiaan) As(alias string) *tKepanitiaan {
	t.tKepanitiaanDo.DO = *(t.tKepanitiaanDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tKepanitiaan) updateTableName(table string) *tKepanitiaan {
	t.ALL = field.NewAsterisk(table)
	t.CIDKegiatan = field.NewInt32(table, "c_id_kegiatan")
	t.CNik = field.NewString(table, "c_nik")
	t.CIDKepanitiaan = field.NewInt32(table, "c_id_kepanitiaan")
	t.CUpdater = field.NewString(table, "c_updater")
	t.CLastUpdate = field.NewTime(table, "c_last_update")

	t.fillFieldMap()

	return t
}

func (t *tKepanitiaan) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tKepanitiaan) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 5)
	t.fieldMap["c_id_kegiatan"] = t.CIDKegiatan
	t.fieldMap["c_nik"] = t.CNik
	t.fieldMap["c_id_kepanitiaan"] = t.CIDKepanitiaan
	t.fieldMap["c_updater"] = t.CUpdater
	t.fieldMap["c_last_update"] = t.CLastUpdate
}

func (t tKepanitiaan) clone(db *gorm.DB) tKepanitiaan {
	t.tKepanitiaanDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tKepanitiaan) replaceDB(db *gorm.DB) tKepanitiaan {
	t.tKepanitiaanDo.ReplaceDB(db)
	return t
}

type tKepanitiaanDo struct{ gen.DO }

type ITKepanitiaanDo interface {
	gen.SubQuery
	Debug() ITKepanitiaanDo
	WithContext(ctx context.Context) ITKepanitiaanDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITKepanitiaanDo
	WriteDB() ITKepanitiaanDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITKepanitiaanDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITKepanitiaanDo
	Not(conds ...gen.Condition) ITKepanitiaanDo
	Or(conds ...gen.Condition) ITKepanitiaanDo
	Select(conds ...field.Expr) ITKepanitiaanDo
	Where(conds ...gen.Condition) ITKepanitiaanDo
	Order(conds ...field.Expr) ITKepanitiaanDo
	Distinct(cols ...field.Expr) ITKepanitiaanDo
	Omit(cols ...field.Expr) ITKepanitiaanDo
	Join(table schema.Tabler, on ...field.Expr) ITKepanitiaanDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITKepanitiaanDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITKepanitiaanDo
	Group(cols ...field.Expr) ITKepanitiaanDo
	Having(conds ...gen.Condition) ITKepanitiaanDo
	Limit(limit int) ITKepanitiaanDo
	Offset(offset int) ITKepanitiaanDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITKepanitiaanDo
	Unscoped() ITKepanitiaanDo
	Create(values ...*model.TKepanitiaan) error
	CreateInBatches(values []*model.TKepanitiaan, batchSize int) error
	Save(values ...*model.TKepanitiaan) error
	First() (*model.TKepanitiaan, error)
	Take() (*model.TKepanitiaan, error)
	Last() (*model.TKepanitiaan, error)
	Find() ([]*model.TKepanitiaan, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TKepanitiaan, err error)
	FindInBatches(result *[]*model.TKepanitiaan, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TKepanitiaan) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITKepanitiaanDo
	Assign(attrs ...field.AssignExpr) ITKepanitiaanDo
	Joins(fields ...field.RelationField) ITKepanitiaanDo
	Preload(fields ...field.RelationField) ITKepanitiaanDo
	FirstOrInit() (*model.TKepanitiaan, error)
	FirstOrCreate() (*model.TKepanitiaan, error)
	FindByPage(offset int, limit int) (result []*model.TKepanitiaan, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITKepanitiaanDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tKepanitiaanDo) Debug() ITKepanitiaanDo {
	return t.withDO(t.DO.Debug())
}

func (t tKepanitiaanDo) WithContext(ctx context.Context) ITKepanitiaanDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tKepanitiaanDo) ReadDB() ITKepanitiaanDo {
	return t.Clauses(dbresolver.Read)
}

func (t tKepanitiaanDo) WriteDB() ITKepanitiaanDo {
	return t.Clauses(dbresolver.Write)
}

func (t tKepanitiaanDo) Session(config *gorm.Session) ITKepanitiaanDo {
	return t.withDO(t.DO.Session(config))
}

func (t tKepanitiaanDo) Clauses(conds ...clause.Expression) ITKepanitiaanDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tKepanitiaanDo) Returning(value interface{}, columns ...string) ITKepanitiaanDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tKepanitiaanDo) Not(conds ...gen.Condition) ITKepanitiaanDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tKepanitiaanDo) Or(conds ...gen.Condition) ITKepanitiaanDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tKepanitiaanDo) Select(conds ...field.Expr) ITKepanitiaanDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tKepanitiaanDo) Where(conds ...gen.Condition) ITKepanitiaanDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tKepanitiaanDo) Order(conds ...field.Expr) ITKepanitiaanDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tKepanitiaanDo) Distinct(cols ...field.Expr) ITKepanitiaanDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tKepanitiaanDo) Omit(cols ...field.Expr) ITKepanitiaanDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tKepanitiaanDo) Join(table schema.Tabler, on ...field.Expr) ITKepanitiaanDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tKepanitiaanDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITKepanitiaanDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tKepanitiaanDo) RightJoin(table schema.Tabler, on ...field.Expr) ITKepanitiaanDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tKepanitiaanDo) Group(cols ...field.Expr) ITKepanitiaanDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tKepanitiaanDo) Having(conds ...gen.Condition) ITKepanitiaanDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tKepanitiaanDo) Limit(limit int) ITKepanitiaanDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tKepanitiaanDo) Offset(offset int) ITKepanitiaanDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tKepanitiaanDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITKepanitiaanDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tKepanitiaanDo) Unscoped() ITKepanitiaanDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tKepanitiaanDo) Create(values ...*model.TKepanitiaan) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tKepanitiaanDo) CreateInBatches(values []*model.TKepanitiaan, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tKepanitiaanDo) Save(values ...*model.TKepanitiaan) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tKepanitiaanDo) First() (*model.TKepanitiaan, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKepanitiaan), nil
	}
}

func (t tKepanitiaanDo) Take() (*model.TKepanitiaan, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKepanitiaan), nil
	}
}

func (t tKepanitiaanDo) Last() (*model.TKepanitiaan, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKepanitiaan), nil
	}
}

func (t tKepanitiaanDo) Find() ([]*model.TKepanitiaan, error) {
	result, err := t.DO.Find()
	return result.([]*model.TKepanitiaan), err
}

func (t tKepanitiaanDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TKepanitiaan, err error) {
	buf := make([]*model.TKepanitiaan, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tKepanitiaanDo) FindInBatches(result *[]*model.TKepanitiaan, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tKepanitiaanDo) Attrs(attrs ...field.AssignExpr) ITKepanitiaanDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tKepanitiaanDo) Assign(attrs ...field.AssignExpr) ITKepanitiaanDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tKepanitiaanDo) Joins(fields ...field.RelationField) ITKepanitiaanDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tKepanitiaanDo) Preload(fields ...field.RelationField) ITKepanitiaanDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tKepanitiaanDo) FirstOrInit() (*model.TKepanitiaan, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKepanitiaan), nil
	}
}

func (t tKepanitiaanDo) FirstOrCreate() (*model.TKepanitiaan, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKepanitiaan), nil
	}
}

func (t tKepanitiaanDo) FindByPage(offset int, limit int) (result []*model.TKepanitiaan, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tKepanitiaanDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tKepanitiaanDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tKepanitiaanDo) Delete(models ...*model.TKepanitiaan) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tKepanitiaanDo) withDO(do gen.Dao) *tKepanitiaanDo {
	t.DO = *do.(*gen.DO)
	return t
}
