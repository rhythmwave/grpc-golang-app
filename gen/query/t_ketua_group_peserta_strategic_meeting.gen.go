// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-bponline/m/gen/model"
)

func newTKetuaGroupPesertaStrategicMeeting(db *gorm.DB, opts ...gen.DOOption) tKetuaGroupPesertaStrategicMeeting {
	_tKetuaGroupPesertaStrategicMeeting := tKetuaGroupPesertaStrategicMeeting{}

	_tKetuaGroupPesertaStrategicMeeting.tKetuaGroupPesertaStrategicMeetingDo.UseDB(db, opts...)
	_tKetuaGroupPesertaStrategicMeeting.tKetuaGroupPesertaStrategicMeetingDo.UseModel(&model.TKetuaGroupPesertaStrategicMeeting{})

	tableName := _tKetuaGroupPesertaStrategicMeeting.tKetuaGroupPesertaStrategicMeetingDo.TableName()
	_tKetuaGroupPesertaStrategicMeeting.ALL = field.NewAsterisk(tableName)
	_tKetuaGroupPesertaStrategicMeeting.CIDKetua = field.NewInt32(tableName, "c_id_ketua")
	_tKetuaGroupPesertaStrategicMeeting.CGroup = field.NewString(tableName, "c_group")
	_tKetuaGroupPesertaStrategicMeeting.CNik = field.NewString(tableName, "c_nik")
	_tKetuaGroupPesertaStrategicMeeting.CNomorHP = field.NewString(tableName, "c_nomor_h_p")

	_tKetuaGroupPesertaStrategicMeeting.fillFieldMap()

	return _tKetuaGroupPesertaStrategicMeeting
}

type tKetuaGroupPesertaStrategicMeeting struct {
	tKetuaGroupPesertaStrategicMeetingDo

	ALL      field.Asterisk
	CIDKetua field.Int32
	CGroup   field.String
	CNik     field.String
	CNomorHP field.String

	fieldMap map[string]field.Expr
}

func (t tKetuaGroupPesertaStrategicMeeting) Table(newTableName string) *tKetuaGroupPesertaStrategicMeeting {
	t.tKetuaGroupPesertaStrategicMeetingDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tKetuaGroupPesertaStrategicMeeting) As(alias string) *tKetuaGroupPesertaStrategicMeeting {
	t.tKetuaGroupPesertaStrategicMeetingDo.DO = *(t.tKetuaGroupPesertaStrategicMeetingDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tKetuaGroupPesertaStrategicMeeting) updateTableName(table string) *tKetuaGroupPesertaStrategicMeeting {
	t.ALL = field.NewAsterisk(table)
	t.CIDKetua = field.NewInt32(table, "c_id_ketua")
	t.CGroup = field.NewString(table, "c_group")
	t.CNik = field.NewString(table, "c_nik")
	t.CNomorHP = field.NewString(table, "c_nomor_h_p")

	t.fillFieldMap()

	return t
}

func (t *tKetuaGroupPesertaStrategicMeeting) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tKetuaGroupPesertaStrategicMeeting) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 4)
	t.fieldMap["c_id_ketua"] = t.CIDKetua
	t.fieldMap["c_group"] = t.CGroup
	t.fieldMap["c_nik"] = t.CNik
	t.fieldMap["c_nomor_h_p"] = t.CNomorHP
}

func (t tKetuaGroupPesertaStrategicMeeting) clone(db *gorm.DB) tKetuaGroupPesertaStrategicMeeting {
	t.tKetuaGroupPesertaStrategicMeetingDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tKetuaGroupPesertaStrategicMeeting) replaceDB(db *gorm.DB) tKetuaGroupPesertaStrategicMeeting {
	t.tKetuaGroupPesertaStrategicMeetingDo.ReplaceDB(db)
	return t
}

type tKetuaGroupPesertaStrategicMeetingDo struct{ gen.DO }

type ITKetuaGroupPesertaStrategicMeetingDo interface {
	gen.SubQuery
	Debug() ITKetuaGroupPesertaStrategicMeetingDo
	WithContext(ctx context.Context) ITKetuaGroupPesertaStrategicMeetingDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITKetuaGroupPesertaStrategicMeetingDo
	WriteDB() ITKetuaGroupPesertaStrategicMeetingDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITKetuaGroupPesertaStrategicMeetingDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITKetuaGroupPesertaStrategicMeetingDo
	Not(conds ...gen.Condition) ITKetuaGroupPesertaStrategicMeetingDo
	Or(conds ...gen.Condition) ITKetuaGroupPesertaStrategicMeetingDo
	Select(conds ...field.Expr) ITKetuaGroupPesertaStrategicMeetingDo
	Where(conds ...gen.Condition) ITKetuaGroupPesertaStrategicMeetingDo
	Order(conds ...field.Expr) ITKetuaGroupPesertaStrategicMeetingDo
	Distinct(cols ...field.Expr) ITKetuaGroupPesertaStrategicMeetingDo
	Omit(cols ...field.Expr) ITKetuaGroupPesertaStrategicMeetingDo
	Join(table schema.Tabler, on ...field.Expr) ITKetuaGroupPesertaStrategicMeetingDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITKetuaGroupPesertaStrategicMeetingDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITKetuaGroupPesertaStrategicMeetingDo
	Group(cols ...field.Expr) ITKetuaGroupPesertaStrategicMeetingDo
	Having(conds ...gen.Condition) ITKetuaGroupPesertaStrategicMeetingDo
	Limit(limit int) ITKetuaGroupPesertaStrategicMeetingDo
	Offset(offset int) ITKetuaGroupPesertaStrategicMeetingDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITKetuaGroupPesertaStrategicMeetingDo
	Unscoped() ITKetuaGroupPesertaStrategicMeetingDo
	Create(values ...*model.TKetuaGroupPesertaStrategicMeeting) error
	CreateInBatches(values []*model.TKetuaGroupPesertaStrategicMeeting, batchSize int) error
	Save(values ...*model.TKetuaGroupPesertaStrategicMeeting) error
	First() (*model.TKetuaGroupPesertaStrategicMeeting, error)
	Take() (*model.TKetuaGroupPesertaStrategicMeeting, error)
	Last() (*model.TKetuaGroupPesertaStrategicMeeting, error)
	Find() ([]*model.TKetuaGroupPesertaStrategicMeeting, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TKetuaGroupPesertaStrategicMeeting, err error)
	FindInBatches(result *[]*model.TKetuaGroupPesertaStrategicMeeting, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TKetuaGroupPesertaStrategicMeeting) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITKetuaGroupPesertaStrategicMeetingDo
	Assign(attrs ...field.AssignExpr) ITKetuaGroupPesertaStrategicMeetingDo
	Joins(fields ...field.RelationField) ITKetuaGroupPesertaStrategicMeetingDo
	Preload(fields ...field.RelationField) ITKetuaGroupPesertaStrategicMeetingDo
	FirstOrInit() (*model.TKetuaGroupPesertaStrategicMeeting, error)
	FirstOrCreate() (*model.TKetuaGroupPesertaStrategicMeeting, error)
	FindByPage(offset int, limit int) (result []*model.TKetuaGroupPesertaStrategicMeeting, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITKetuaGroupPesertaStrategicMeetingDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tKetuaGroupPesertaStrategicMeetingDo) Debug() ITKetuaGroupPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Debug())
}

func (t tKetuaGroupPesertaStrategicMeetingDo) WithContext(ctx context.Context) ITKetuaGroupPesertaStrategicMeetingDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tKetuaGroupPesertaStrategicMeetingDo) ReadDB() ITKetuaGroupPesertaStrategicMeetingDo {
	return t.Clauses(dbresolver.Read)
}

func (t tKetuaGroupPesertaStrategicMeetingDo) WriteDB() ITKetuaGroupPesertaStrategicMeetingDo {
	return t.Clauses(dbresolver.Write)
}

func (t tKetuaGroupPesertaStrategicMeetingDo) Session(config *gorm.Session) ITKetuaGroupPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Session(config))
}

func (t tKetuaGroupPesertaStrategicMeetingDo) Clauses(conds ...clause.Expression) ITKetuaGroupPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tKetuaGroupPesertaStrategicMeetingDo) Returning(value interface{}, columns ...string) ITKetuaGroupPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tKetuaGroupPesertaStrategicMeetingDo) Not(conds ...gen.Condition) ITKetuaGroupPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tKetuaGroupPesertaStrategicMeetingDo) Or(conds ...gen.Condition) ITKetuaGroupPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tKetuaGroupPesertaStrategicMeetingDo) Select(conds ...field.Expr) ITKetuaGroupPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tKetuaGroupPesertaStrategicMeetingDo) Where(conds ...gen.Condition) ITKetuaGroupPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tKetuaGroupPesertaStrategicMeetingDo) Order(conds ...field.Expr) ITKetuaGroupPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tKetuaGroupPesertaStrategicMeetingDo) Distinct(cols ...field.Expr) ITKetuaGroupPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tKetuaGroupPesertaStrategicMeetingDo) Omit(cols ...field.Expr) ITKetuaGroupPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tKetuaGroupPesertaStrategicMeetingDo) Join(table schema.Tabler, on ...field.Expr) ITKetuaGroupPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tKetuaGroupPesertaStrategicMeetingDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITKetuaGroupPesertaStrategicMeetingDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tKetuaGroupPesertaStrategicMeetingDo) RightJoin(table schema.Tabler, on ...field.Expr) ITKetuaGroupPesertaStrategicMeetingDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tKetuaGroupPesertaStrategicMeetingDo) Group(cols ...field.Expr) ITKetuaGroupPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tKetuaGroupPesertaStrategicMeetingDo) Having(conds ...gen.Condition) ITKetuaGroupPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tKetuaGroupPesertaStrategicMeetingDo) Limit(limit int) ITKetuaGroupPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tKetuaGroupPesertaStrategicMeetingDo) Offset(offset int) ITKetuaGroupPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tKetuaGroupPesertaStrategicMeetingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITKetuaGroupPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tKetuaGroupPesertaStrategicMeetingDo) Unscoped() ITKetuaGroupPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tKetuaGroupPesertaStrategicMeetingDo) Create(values ...*model.TKetuaGroupPesertaStrategicMeeting) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tKetuaGroupPesertaStrategicMeetingDo) CreateInBatches(values []*model.TKetuaGroupPesertaStrategicMeeting, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tKetuaGroupPesertaStrategicMeetingDo) Save(values ...*model.TKetuaGroupPesertaStrategicMeeting) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tKetuaGroupPesertaStrategicMeetingDo) First() (*model.TKetuaGroupPesertaStrategicMeeting, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKetuaGroupPesertaStrategicMeeting), nil
	}
}

func (t tKetuaGroupPesertaStrategicMeetingDo) Take() (*model.TKetuaGroupPesertaStrategicMeeting, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKetuaGroupPesertaStrategicMeeting), nil
	}
}

func (t tKetuaGroupPesertaStrategicMeetingDo) Last() (*model.TKetuaGroupPesertaStrategicMeeting, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKetuaGroupPesertaStrategicMeeting), nil
	}
}

func (t tKetuaGroupPesertaStrategicMeetingDo) Find() ([]*model.TKetuaGroupPesertaStrategicMeeting, error) {
	result, err := t.DO.Find()
	return result.([]*model.TKetuaGroupPesertaStrategicMeeting), err
}

func (t tKetuaGroupPesertaStrategicMeetingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TKetuaGroupPesertaStrategicMeeting, err error) {
	buf := make([]*model.TKetuaGroupPesertaStrategicMeeting, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tKetuaGroupPesertaStrategicMeetingDo) FindInBatches(result *[]*model.TKetuaGroupPesertaStrategicMeeting, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tKetuaGroupPesertaStrategicMeetingDo) Attrs(attrs ...field.AssignExpr) ITKetuaGroupPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tKetuaGroupPesertaStrategicMeetingDo) Assign(attrs ...field.AssignExpr) ITKetuaGroupPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tKetuaGroupPesertaStrategicMeetingDo) Joins(fields ...field.RelationField) ITKetuaGroupPesertaStrategicMeetingDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tKetuaGroupPesertaStrategicMeetingDo) Preload(fields ...field.RelationField) ITKetuaGroupPesertaStrategicMeetingDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tKetuaGroupPesertaStrategicMeetingDo) FirstOrInit() (*model.TKetuaGroupPesertaStrategicMeeting, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKetuaGroupPesertaStrategicMeeting), nil
	}
}

func (t tKetuaGroupPesertaStrategicMeetingDo) FirstOrCreate() (*model.TKetuaGroupPesertaStrategicMeeting, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKetuaGroupPesertaStrategicMeeting), nil
	}
}

func (t tKetuaGroupPesertaStrategicMeetingDo) FindByPage(offset int, limit int) (result []*model.TKetuaGroupPesertaStrategicMeeting, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tKetuaGroupPesertaStrategicMeetingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tKetuaGroupPesertaStrategicMeetingDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tKetuaGroupPesertaStrategicMeetingDo) Delete(models ...*model.TKetuaGroupPesertaStrategicMeeting) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tKetuaGroupPesertaStrategicMeetingDo) withDO(do gen.Dao) *tKetuaGroupPesertaStrategicMeetingDo {
	t.DO = *do.(*gen.DO)
	return t
}
