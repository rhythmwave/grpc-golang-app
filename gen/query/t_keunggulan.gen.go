// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-bponline/m/gen/model"
)

func newTKeunggulan(db *gorm.DB, opts ...gen.DOOption) tKeunggulan {
	_tKeunggulan := tKeunggulan{}

	_tKeunggulan.tKeunggulanDo.UseDB(db, opts...)
	_tKeunggulan.tKeunggulanDo.UseModel(&model.TKeunggulan{})

	tableName := _tKeunggulan.tKeunggulanDo.TableName()
	_tKeunggulan.ALL = field.NewAsterisk(tableName)
	_tKeunggulan.CIDKeunggulan = field.NewInt32(tableName, "c_id_keunggulan")
	_tKeunggulan.CIDPenanda = field.NewInt32(tableName, "c_id_penanda")
	_tKeunggulan.CJenisKeunggulan = field.NewString(tableName, "c_jenis_keunggulan")
	_tKeunggulan.CIsNational = field.NewString(tableName, "c_is_national")
	_tKeunggulan.CCounterPesaing = field.NewString(tableName, "c_counter_pesaing")
	_tKeunggulan.CMethodePenyampaian = field.NewString(tableName, "c_methode_penyampaian")
	_tKeunggulan.CIsFollowUp = field.NewString(tableName, "c_is_follow_up")
	_tKeunggulan.CStatus = field.NewString(tableName, "c_status")
	_tKeunggulan.CUpdater = field.NewString(tableName, "c_updater")
	_tKeunggulan.CLastUpdate = field.NewTime(tableName, "c_last_update")
	_tKeunggulan.CTahunAjaran = field.NewString(tableName, "c_tahun_ajaran")

	_tKeunggulan.fillFieldMap()

	return _tKeunggulan
}

type tKeunggulan struct {
	tKeunggulanDo

	ALL                 field.Asterisk
	CIDKeunggulan       field.Int32
	CIDPenanda          field.Int32
	CJenisKeunggulan    field.String
	CIsNational         field.String
	CCounterPesaing     field.String
	CMethodePenyampaian field.String
	CIsFollowUp         field.String
	CStatus             field.String
	CUpdater            field.String
	CLastUpdate         field.Time
	CTahunAjaran        field.String

	fieldMap map[string]field.Expr
}

func (t tKeunggulan) Table(newTableName string) *tKeunggulan {
	t.tKeunggulanDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tKeunggulan) As(alias string) *tKeunggulan {
	t.tKeunggulanDo.DO = *(t.tKeunggulanDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tKeunggulan) updateTableName(table string) *tKeunggulan {
	t.ALL = field.NewAsterisk(table)
	t.CIDKeunggulan = field.NewInt32(table, "c_id_keunggulan")
	t.CIDPenanda = field.NewInt32(table, "c_id_penanda")
	t.CJenisKeunggulan = field.NewString(table, "c_jenis_keunggulan")
	t.CIsNational = field.NewString(table, "c_is_national")
	t.CCounterPesaing = field.NewString(table, "c_counter_pesaing")
	t.CMethodePenyampaian = field.NewString(table, "c_methode_penyampaian")
	t.CIsFollowUp = field.NewString(table, "c_is_follow_up")
	t.CStatus = field.NewString(table, "c_status")
	t.CUpdater = field.NewString(table, "c_updater")
	t.CLastUpdate = field.NewTime(table, "c_last_update")
	t.CTahunAjaran = field.NewString(table, "c_tahun_ajaran")

	t.fillFieldMap()

	return t
}

func (t *tKeunggulan) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tKeunggulan) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 11)
	t.fieldMap["c_id_keunggulan"] = t.CIDKeunggulan
	t.fieldMap["c_id_penanda"] = t.CIDPenanda
	t.fieldMap["c_jenis_keunggulan"] = t.CJenisKeunggulan
	t.fieldMap["c_is_national"] = t.CIsNational
	t.fieldMap["c_counter_pesaing"] = t.CCounterPesaing
	t.fieldMap["c_methode_penyampaian"] = t.CMethodePenyampaian
	t.fieldMap["c_is_follow_up"] = t.CIsFollowUp
	t.fieldMap["c_status"] = t.CStatus
	t.fieldMap["c_updater"] = t.CUpdater
	t.fieldMap["c_last_update"] = t.CLastUpdate
	t.fieldMap["c_tahun_ajaran"] = t.CTahunAjaran
}

func (t tKeunggulan) clone(db *gorm.DB) tKeunggulan {
	t.tKeunggulanDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tKeunggulan) replaceDB(db *gorm.DB) tKeunggulan {
	t.tKeunggulanDo.ReplaceDB(db)
	return t
}

type tKeunggulanDo struct{ gen.DO }

type ITKeunggulanDo interface {
	gen.SubQuery
	Debug() ITKeunggulanDo
	WithContext(ctx context.Context) ITKeunggulanDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITKeunggulanDo
	WriteDB() ITKeunggulanDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITKeunggulanDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITKeunggulanDo
	Not(conds ...gen.Condition) ITKeunggulanDo
	Or(conds ...gen.Condition) ITKeunggulanDo
	Select(conds ...field.Expr) ITKeunggulanDo
	Where(conds ...gen.Condition) ITKeunggulanDo
	Order(conds ...field.Expr) ITKeunggulanDo
	Distinct(cols ...field.Expr) ITKeunggulanDo
	Omit(cols ...field.Expr) ITKeunggulanDo
	Join(table schema.Tabler, on ...field.Expr) ITKeunggulanDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITKeunggulanDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITKeunggulanDo
	Group(cols ...field.Expr) ITKeunggulanDo
	Having(conds ...gen.Condition) ITKeunggulanDo
	Limit(limit int) ITKeunggulanDo
	Offset(offset int) ITKeunggulanDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITKeunggulanDo
	Unscoped() ITKeunggulanDo
	Create(values ...*model.TKeunggulan) error
	CreateInBatches(values []*model.TKeunggulan, batchSize int) error
	Save(values ...*model.TKeunggulan) error
	First() (*model.TKeunggulan, error)
	Take() (*model.TKeunggulan, error)
	Last() (*model.TKeunggulan, error)
	Find() ([]*model.TKeunggulan, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TKeunggulan, err error)
	FindInBatches(result *[]*model.TKeunggulan, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TKeunggulan) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITKeunggulanDo
	Assign(attrs ...field.AssignExpr) ITKeunggulanDo
	Joins(fields ...field.RelationField) ITKeunggulanDo
	Preload(fields ...field.RelationField) ITKeunggulanDo
	FirstOrInit() (*model.TKeunggulan, error)
	FirstOrCreate() (*model.TKeunggulan, error)
	FindByPage(offset int, limit int) (result []*model.TKeunggulan, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITKeunggulanDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tKeunggulanDo) Debug() ITKeunggulanDo {
	return t.withDO(t.DO.Debug())
}

func (t tKeunggulanDo) WithContext(ctx context.Context) ITKeunggulanDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tKeunggulanDo) ReadDB() ITKeunggulanDo {
	return t.Clauses(dbresolver.Read)
}

func (t tKeunggulanDo) WriteDB() ITKeunggulanDo {
	return t.Clauses(dbresolver.Write)
}

func (t tKeunggulanDo) Session(config *gorm.Session) ITKeunggulanDo {
	return t.withDO(t.DO.Session(config))
}

func (t tKeunggulanDo) Clauses(conds ...clause.Expression) ITKeunggulanDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tKeunggulanDo) Returning(value interface{}, columns ...string) ITKeunggulanDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tKeunggulanDo) Not(conds ...gen.Condition) ITKeunggulanDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tKeunggulanDo) Or(conds ...gen.Condition) ITKeunggulanDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tKeunggulanDo) Select(conds ...field.Expr) ITKeunggulanDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tKeunggulanDo) Where(conds ...gen.Condition) ITKeunggulanDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tKeunggulanDo) Order(conds ...field.Expr) ITKeunggulanDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tKeunggulanDo) Distinct(cols ...field.Expr) ITKeunggulanDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tKeunggulanDo) Omit(cols ...field.Expr) ITKeunggulanDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tKeunggulanDo) Join(table schema.Tabler, on ...field.Expr) ITKeunggulanDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tKeunggulanDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITKeunggulanDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tKeunggulanDo) RightJoin(table schema.Tabler, on ...field.Expr) ITKeunggulanDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tKeunggulanDo) Group(cols ...field.Expr) ITKeunggulanDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tKeunggulanDo) Having(conds ...gen.Condition) ITKeunggulanDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tKeunggulanDo) Limit(limit int) ITKeunggulanDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tKeunggulanDo) Offset(offset int) ITKeunggulanDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tKeunggulanDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITKeunggulanDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tKeunggulanDo) Unscoped() ITKeunggulanDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tKeunggulanDo) Create(values ...*model.TKeunggulan) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tKeunggulanDo) CreateInBatches(values []*model.TKeunggulan, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tKeunggulanDo) Save(values ...*model.TKeunggulan) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tKeunggulanDo) First() (*model.TKeunggulan, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKeunggulan), nil
	}
}

func (t tKeunggulanDo) Take() (*model.TKeunggulan, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKeunggulan), nil
	}
}

func (t tKeunggulanDo) Last() (*model.TKeunggulan, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKeunggulan), nil
	}
}

func (t tKeunggulanDo) Find() ([]*model.TKeunggulan, error) {
	result, err := t.DO.Find()
	return result.([]*model.TKeunggulan), err
}

func (t tKeunggulanDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TKeunggulan, err error) {
	buf := make([]*model.TKeunggulan, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tKeunggulanDo) FindInBatches(result *[]*model.TKeunggulan, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tKeunggulanDo) Attrs(attrs ...field.AssignExpr) ITKeunggulanDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tKeunggulanDo) Assign(attrs ...field.AssignExpr) ITKeunggulanDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tKeunggulanDo) Joins(fields ...field.RelationField) ITKeunggulanDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tKeunggulanDo) Preload(fields ...field.RelationField) ITKeunggulanDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tKeunggulanDo) FirstOrInit() (*model.TKeunggulan, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKeunggulan), nil
	}
}

func (t tKeunggulanDo) FirstOrCreate() (*model.TKeunggulan, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TKeunggulan), nil
	}
}

func (t tKeunggulanDo) FindByPage(offset int, limit int) (result []*model.TKeunggulan, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tKeunggulanDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tKeunggulanDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tKeunggulanDo) Delete(models ...*model.TKeunggulan) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tKeunggulanDo) withDO(do gen.Dao) *tKeunggulanDo {
	t.DO = *do.(*gen.DO)
	return t
}
