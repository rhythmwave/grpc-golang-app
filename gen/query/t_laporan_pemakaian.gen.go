// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-bponline/m/gen/model"
)

func newTLaporanPemakaian(db *gorm.DB, opts ...gen.DOOption) tLaporanPemakaian {
	_tLaporanPemakaian := tLaporanPemakaian{}

	_tLaporanPemakaian.tLaporanPemakaianDo.UseDB(db, opts...)
	_tLaporanPemakaian.tLaporanPemakaianDo.UseModel(&model.TLaporanPemakaian{})

	tableName := _tLaporanPemakaian.tLaporanPemakaianDo.TableName()
	_tLaporanPemakaian.ALL = field.NewAsterisk(tableName)
	_tLaporanPemakaian.CIDAlat = field.NewInt32(tableName, "c_id_alat")
	_tLaporanPemakaian.CIDKegiatanPromosi = field.NewInt32(tableName, "c_id_kegiatan_promosi")
	_tLaporanPemakaian.CJumlah = field.NewInt32(tableName, "c_jumlah")
	_tLaporanPemakaian.CUpdater = field.NewString(tableName, "c_updater")
	_tLaporanPemakaian.CLastUpdate = field.NewTime(tableName, "c_last_update")

	_tLaporanPemakaian.fillFieldMap()

	return _tLaporanPemakaian
}

type tLaporanPemakaian struct {
	tLaporanPemakaianDo

	ALL                field.Asterisk
	CIDAlat            field.Int32
	CIDKegiatanPromosi field.Int32
	CJumlah            field.Int32
	CUpdater           field.String
	CLastUpdate        field.Time

	fieldMap map[string]field.Expr
}

func (t tLaporanPemakaian) Table(newTableName string) *tLaporanPemakaian {
	t.tLaporanPemakaianDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tLaporanPemakaian) As(alias string) *tLaporanPemakaian {
	t.tLaporanPemakaianDo.DO = *(t.tLaporanPemakaianDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tLaporanPemakaian) updateTableName(table string) *tLaporanPemakaian {
	t.ALL = field.NewAsterisk(table)
	t.CIDAlat = field.NewInt32(table, "c_id_alat")
	t.CIDKegiatanPromosi = field.NewInt32(table, "c_id_kegiatan_promosi")
	t.CJumlah = field.NewInt32(table, "c_jumlah")
	t.CUpdater = field.NewString(table, "c_updater")
	t.CLastUpdate = field.NewTime(table, "c_last_update")

	t.fillFieldMap()

	return t
}

func (t *tLaporanPemakaian) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tLaporanPemakaian) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 5)
	t.fieldMap["c_id_alat"] = t.CIDAlat
	t.fieldMap["c_id_kegiatan_promosi"] = t.CIDKegiatanPromosi
	t.fieldMap["c_jumlah"] = t.CJumlah
	t.fieldMap["c_updater"] = t.CUpdater
	t.fieldMap["c_last_update"] = t.CLastUpdate
}

func (t tLaporanPemakaian) clone(db *gorm.DB) tLaporanPemakaian {
	t.tLaporanPemakaianDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tLaporanPemakaian) replaceDB(db *gorm.DB) tLaporanPemakaian {
	t.tLaporanPemakaianDo.ReplaceDB(db)
	return t
}

type tLaporanPemakaianDo struct{ gen.DO }

type ITLaporanPemakaianDo interface {
	gen.SubQuery
	Debug() ITLaporanPemakaianDo
	WithContext(ctx context.Context) ITLaporanPemakaianDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITLaporanPemakaianDo
	WriteDB() ITLaporanPemakaianDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITLaporanPemakaianDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITLaporanPemakaianDo
	Not(conds ...gen.Condition) ITLaporanPemakaianDo
	Or(conds ...gen.Condition) ITLaporanPemakaianDo
	Select(conds ...field.Expr) ITLaporanPemakaianDo
	Where(conds ...gen.Condition) ITLaporanPemakaianDo
	Order(conds ...field.Expr) ITLaporanPemakaianDo
	Distinct(cols ...field.Expr) ITLaporanPemakaianDo
	Omit(cols ...field.Expr) ITLaporanPemakaianDo
	Join(table schema.Tabler, on ...field.Expr) ITLaporanPemakaianDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITLaporanPemakaianDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITLaporanPemakaianDo
	Group(cols ...field.Expr) ITLaporanPemakaianDo
	Having(conds ...gen.Condition) ITLaporanPemakaianDo
	Limit(limit int) ITLaporanPemakaianDo
	Offset(offset int) ITLaporanPemakaianDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITLaporanPemakaianDo
	Unscoped() ITLaporanPemakaianDo
	Create(values ...*model.TLaporanPemakaian) error
	CreateInBatches(values []*model.TLaporanPemakaian, batchSize int) error
	Save(values ...*model.TLaporanPemakaian) error
	First() (*model.TLaporanPemakaian, error)
	Take() (*model.TLaporanPemakaian, error)
	Last() (*model.TLaporanPemakaian, error)
	Find() ([]*model.TLaporanPemakaian, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TLaporanPemakaian, err error)
	FindInBatches(result *[]*model.TLaporanPemakaian, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TLaporanPemakaian) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITLaporanPemakaianDo
	Assign(attrs ...field.AssignExpr) ITLaporanPemakaianDo
	Joins(fields ...field.RelationField) ITLaporanPemakaianDo
	Preload(fields ...field.RelationField) ITLaporanPemakaianDo
	FirstOrInit() (*model.TLaporanPemakaian, error)
	FirstOrCreate() (*model.TLaporanPemakaian, error)
	FindByPage(offset int, limit int) (result []*model.TLaporanPemakaian, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITLaporanPemakaianDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tLaporanPemakaianDo) Debug() ITLaporanPemakaianDo {
	return t.withDO(t.DO.Debug())
}

func (t tLaporanPemakaianDo) WithContext(ctx context.Context) ITLaporanPemakaianDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tLaporanPemakaianDo) ReadDB() ITLaporanPemakaianDo {
	return t.Clauses(dbresolver.Read)
}

func (t tLaporanPemakaianDo) WriteDB() ITLaporanPemakaianDo {
	return t.Clauses(dbresolver.Write)
}

func (t tLaporanPemakaianDo) Session(config *gorm.Session) ITLaporanPemakaianDo {
	return t.withDO(t.DO.Session(config))
}

func (t tLaporanPemakaianDo) Clauses(conds ...clause.Expression) ITLaporanPemakaianDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tLaporanPemakaianDo) Returning(value interface{}, columns ...string) ITLaporanPemakaianDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tLaporanPemakaianDo) Not(conds ...gen.Condition) ITLaporanPemakaianDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tLaporanPemakaianDo) Or(conds ...gen.Condition) ITLaporanPemakaianDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tLaporanPemakaianDo) Select(conds ...field.Expr) ITLaporanPemakaianDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tLaporanPemakaianDo) Where(conds ...gen.Condition) ITLaporanPemakaianDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tLaporanPemakaianDo) Order(conds ...field.Expr) ITLaporanPemakaianDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tLaporanPemakaianDo) Distinct(cols ...field.Expr) ITLaporanPemakaianDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tLaporanPemakaianDo) Omit(cols ...field.Expr) ITLaporanPemakaianDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tLaporanPemakaianDo) Join(table schema.Tabler, on ...field.Expr) ITLaporanPemakaianDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tLaporanPemakaianDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITLaporanPemakaianDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tLaporanPemakaianDo) RightJoin(table schema.Tabler, on ...field.Expr) ITLaporanPemakaianDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tLaporanPemakaianDo) Group(cols ...field.Expr) ITLaporanPemakaianDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tLaporanPemakaianDo) Having(conds ...gen.Condition) ITLaporanPemakaianDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tLaporanPemakaianDo) Limit(limit int) ITLaporanPemakaianDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tLaporanPemakaianDo) Offset(offset int) ITLaporanPemakaianDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tLaporanPemakaianDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITLaporanPemakaianDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tLaporanPemakaianDo) Unscoped() ITLaporanPemakaianDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tLaporanPemakaianDo) Create(values ...*model.TLaporanPemakaian) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tLaporanPemakaianDo) CreateInBatches(values []*model.TLaporanPemakaian, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tLaporanPemakaianDo) Save(values ...*model.TLaporanPemakaian) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tLaporanPemakaianDo) First() (*model.TLaporanPemakaian, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TLaporanPemakaian), nil
	}
}

func (t tLaporanPemakaianDo) Take() (*model.TLaporanPemakaian, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TLaporanPemakaian), nil
	}
}

func (t tLaporanPemakaianDo) Last() (*model.TLaporanPemakaian, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TLaporanPemakaian), nil
	}
}

func (t tLaporanPemakaianDo) Find() ([]*model.TLaporanPemakaian, error) {
	result, err := t.DO.Find()
	return result.([]*model.TLaporanPemakaian), err
}

func (t tLaporanPemakaianDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TLaporanPemakaian, err error) {
	buf := make([]*model.TLaporanPemakaian, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tLaporanPemakaianDo) FindInBatches(result *[]*model.TLaporanPemakaian, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tLaporanPemakaianDo) Attrs(attrs ...field.AssignExpr) ITLaporanPemakaianDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tLaporanPemakaianDo) Assign(attrs ...field.AssignExpr) ITLaporanPemakaianDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tLaporanPemakaianDo) Joins(fields ...field.RelationField) ITLaporanPemakaianDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tLaporanPemakaianDo) Preload(fields ...field.RelationField) ITLaporanPemakaianDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tLaporanPemakaianDo) FirstOrInit() (*model.TLaporanPemakaian, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TLaporanPemakaian), nil
	}
}

func (t tLaporanPemakaianDo) FirstOrCreate() (*model.TLaporanPemakaian, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TLaporanPemakaian), nil
	}
}

func (t tLaporanPemakaianDo) FindByPage(offset int, limit int) (result []*model.TLaporanPemakaian, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tLaporanPemakaianDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tLaporanPemakaianDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tLaporanPemakaianDo) Delete(models ...*model.TLaporanPemakaian) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tLaporanPemakaianDo) withDO(do gen.Dao) *tLaporanPemakaianDo {
	t.DO = *do.(*gen.DO)
	return t
}
