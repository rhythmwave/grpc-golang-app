// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-bponline/m/gen/model"
)

func newTLevelVerif(db *gorm.DB, opts ...gen.DOOption) tLevelVerif {
	_tLevelVerif := tLevelVerif{}

	_tLevelVerif.tLevelVerifDo.UseDB(db, opts...)
	_tLevelVerif.tLevelVerifDo.UseModel(&model.TLevelVerif{})

	tableName := _tLevelVerif.tLevelVerifDo.TableName()
	_tLevelVerif.ALL = field.NewAsterisk(tableName)
	_tLevelVerif.CIDBidang = field.NewInt32(tableName, "c_id_bidang")
	_tLevelVerif.CIDLevel = field.NewString(tableName, "c_id_level")
	_tLevelVerif.CUrut = field.NewInt16(tableName, "c_urut")
	_tLevelVerif.CNamaLevel = field.NewString(tableName, "c_nama_level")
	_tLevelVerif.CHargaMin = field.NewInt32(tableName, "c_harga_min")
	_tLevelVerif.CHargaMax = field.NewInt32(tableName, "c_harga_max")
	_tLevelVerif.CUpdater = field.NewString(tableName, "c_updater")
	_tLevelVerif.CLastUpdate = field.NewTime(tableName, "c_last_update")

	_tLevelVerif.fillFieldMap()

	return _tLevelVerif
}

type tLevelVerif struct {
	tLevelVerifDo

	ALL         field.Asterisk
	CIDBidang   field.Int32
	CIDLevel    field.String
	CUrut       field.Int16
	CNamaLevel  field.String
	CHargaMin   field.Int32
	CHargaMax   field.Int32
	CUpdater    field.String
	CLastUpdate field.Time

	fieldMap map[string]field.Expr
}

func (t tLevelVerif) Table(newTableName string) *tLevelVerif {
	t.tLevelVerifDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tLevelVerif) As(alias string) *tLevelVerif {
	t.tLevelVerifDo.DO = *(t.tLevelVerifDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tLevelVerif) updateTableName(table string) *tLevelVerif {
	t.ALL = field.NewAsterisk(table)
	t.CIDBidang = field.NewInt32(table, "c_id_bidang")
	t.CIDLevel = field.NewString(table, "c_id_level")
	t.CUrut = field.NewInt16(table, "c_urut")
	t.CNamaLevel = field.NewString(table, "c_nama_level")
	t.CHargaMin = field.NewInt32(table, "c_harga_min")
	t.CHargaMax = field.NewInt32(table, "c_harga_max")
	t.CUpdater = field.NewString(table, "c_updater")
	t.CLastUpdate = field.NewTime(table, "c_last_update")

	t.fillFieldMap()

	return t
}

func (t *tLevelVerif) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tLevelVerif) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 8)
	t.fieldMap["c_id_bidang"] = t.CIDBidang
	t.fieldMap["c_id_level"] = t.CIDLevel
	t.fieldMap["c_urut"] = t.CUrut
	t.fieldMap["c_nama_level"] = t.CNamaLevel
	t.fieldMap["c_harga_min"] = t.CHargaMin
	t.fieldMap["c_harga_max"] = t.CHargaMax
	t.fieldMap["c_updater"] = t.CUpdater
	t.fieldMap["c_last_update"] = t.CLastUpdate
}

func (t tLevelVerif) clone(db *gorm.DB) tLevelVerif {
	t.tLevelVerifDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tLevelVerif) replaceDB(db *gorm.DB) tLevelVerif {
	t.tLevelVerifDo.ReplaceDB(db)
	return t
}

type tLevelVerifDo struct{ gen.DO }

type ITLevelVerifDo interface {
	gen.SubQuery
	Debug() ITLevelVerifDo
	WithContext(ctx context.Context) ITLevelVerifDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITLevelVerifDo
	WriteDB() ITLevelVerifDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITLevelVerifDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITLevelVerifDo
	Not(conds ...gen.Condition) ITLevelVerifDo
	Or(conds ...gen.Condition) ITLevelVerifDo
	Select(conds ...field.Expr) ITLevelVerifDo
	Where(conds ...gen.Condition) ITLevelVerifDo
	Order(conds ...field.Expr) ITLevelVerifDo
	Distinct(cols ...field.Expr) ITLevelVerifDo
	Omit(cols ...field.Expr) ITLevelVerifDo
	Join(table schema.Tabler, on ...field.Expr) ITLevelVerifDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITLevelVerifDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITLevelVerifDo
	Group(cols ...field.Expr) ITLevelVerifDo
	Having(conds ...gen.Condition) ITLevelVerifDo
	Limit(limit int) ITLevelVerifDo
	Offset(offset int) ITLevelVerifDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITLevelVerifDo
	Unscoped() ITLevelVerifDo
	Create(values ...*model.TLevelVerif) error
	CreateInBatches(values []*model.TLevelVerif, batchSize int) error
	Save(values ...*model.TLevelVerif) error
	First() (*model.TLevelVerif, error)
	Take() (*model.TLevelVerif, error)
	Last() (*model.TLevelVerif, error)
	Find() ([]*model.TLevelVerif, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TLevelVerif, err error)
	FindInBatches(result *[]*model.TLevelVerif, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TLevelVerif) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITLevelVerifDo
	Assign(attrs ...field.AssignExpr) ITLevelVerifDo
	Joins(fields ...field.RelationField) ITLevelVerifDo
	Preload(fields ...field.RelationField) ITLevelVerifDo
	FirstOrInit() (*model.TLevelVerif, error)
	FirstOrCreate() (*model.TLevelVerif, error)
	FindByPage(offset int, limit int) (result []*model.TLevelVerif, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITLevelVerifDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tLevelVerifDo) Debug() ITLevelVerifDo {
	return t.withDO(t.DO.Debug())
}

func (t tLevelVerifDo) WithContext(ctx context.Context) ITLevelVerifDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tLevelVerifDo) ReadDB() ITLevelVerifDo {
	return t.Clauses(dbresolver.Read)
}

func (t tLevelVerifDo) WriteDB() ITLevelVerifDo {
	return t.Clauses(dbresolver.Write)
}

func (t tLevelVerifDo) Session(config *gorm.Session) ITLevelVerifDo {
	return t.withDO(t.DO.Session(config))
}

func (t tLevelVerifDo) Clauses(conds ...clause.Expression) ITLevelVerifDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tLevelVerifDo) Returning(value interface{}, columns ...string) ITLevelVerifDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tLevelVerifDo) Not(conds ...gen.Condition) ITLevelVerifDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tLevelVerifDo) Or(conds ...gen.Condition) ITLevelVerifDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tLevelVerifDo) Select(conds ...field.Expr) ITLevelVerifDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tLevelVerifDo) Where(conds ...gen.Condition) ITLevelVerifDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tLevelVerifDo) Order(conds ...field.Expr) ITLevelVerifDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tLevelVerifDo) Distinct(cols ...field.Expr) ITLevelVerifDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tLevelVerifDo) Omit(cols ...field.Expr) ITLevelVerifDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tLevelVerifDo) Join(table schema.Tabler, on ...field.Expr) ITLevelVerifDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tLevelVerifDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITLevelVerifDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tLevelVerifDo) RightJoin(table schema.Tabler, on ...field.Expr) ITLevelVerifDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tLevelVerifDo) Group(cols ...field.Expr) ITLevelVerifDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tLevelVerifDo) Having(conds ...gen.Condition) ITLevelVerifDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tLevelVerifDo) Limit(limit int) ITLevelVerifDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tLevelVerifDo) Offset(offset int) ITLevelVerifDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tLevelVerifDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITLevelVerifDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tLevelVerifDo) Unscoped() ITLevelVerifDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tLevelVerifDo) Create(values ...*model.TLevelVerif) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tLevelVerifDo) CreateInBatches(values []*model.TLevelVerif, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tLevelVerifDo) Save(values ...*model.TLevelVerif) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tLevelVerifDo) First() (*model.TLevelVerif, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TLevelVerif), nil
	}
}

func (t tLevelVerifDo) Take() (*model.TLevelVerif, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TLevelVerif), nil
	}
}

func (t tLevelVerifDo) Last() (*model.TLevelVerif, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TLevelVerif), nil
	}
}

func (t tLevelVerifDo) Find() ([]*model.TLevelVerif, error) {
	result, err := t.DO.Find()
	return result.([]*model.TLevelVerif), err
}

func (t tLevelVerifDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TLevelVerif, err error) {
	buf := make([]*model.TLevelVerif, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tLevelVerifDo) FindInBatches(result *[]*model.TLevelVerif, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tLevelVerifDo) Attrs(attrs ...field.AssignExpr) ITLevelVerifDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tLevelVerifDo) Assign(attrs ...field.AssignExpr) ITLevelVerifDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tLevelVerifDo) Joins(fields ...field.RelationField) ITLevelVerifDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tLevelVerifDo) Preload(fields ...field.RelationField) ITLevelVerifDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tLevelVerifDo) FirstOrInit() (*model.TLevelVerif, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TLevelVerif), nil
	}
}

func (t tLevelVerifDo) FirstOrCreate() (*model.TLevelVerif, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TLevelVerif), nil
	}
}

func (t tLevelVerifDo) FindByPage(offset int, limit int) (result []*model.TLevelVerif, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tLevelVerifDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tLevelVerifDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tLevelVerifDo) Delete(models ...*model.TLevelVerif) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tLevelVerifDo) withDO(do gen.Dao) *tLevelVerifDo {
	t.DO = *do.(*gen.DO)
	return t
}
