// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-bponline/m/gen/model"
)

func newTLogKegiatan(db *gorm.DB, opts ...gen.DOOption) tLogKegiatan {
	_tLogKegiatan := tLogKegiatan{}

	_tLogKegiatan.tLogKegiatanDo.UseDB(db, opts...)
	_tLogKegiatan.tLogKegiatanDo.UseModel(&model.TLogKegiatan{})

	tableName := _tLogKegiatan.tLogKegiatanDo.TableName()
	_tLogKegiatan.ALL = field.NewAsterisk(tableName)
	_tLogKegiatan.CIDKegiatan = field.NewInt32(tableName, "c_id_kegiatan")
	_tLogKegiatan.CJenis = field.NewString(tableName, "c_jenis")
	_tLogKegiatan.CLog = field.NewString(tableName, "c_log")
	_tLogKegiatan.CLastUpdate = field.NewTime(tableName, "c_last_update")

	_tLogKegiatan.fillFieldMap()

	return _tLogKegiatan
}

type tLogKegiatan struct {
	tLogKegiatanDo

	ALL         field.Asterisk
	CIDKegiatan field.Int32
	CJenis      field.String
	CLog        field.String
	CLastUpdate field.Time

	fieldMap map[string]field.Expr
}

func (t tLogKegiatan) Table(newTableName string) *tLogKegiatan {
	t.tLogKegiatanDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tLogKegiatan) As(alias string) *tLogKegiatan {
	t.tLogKegiatanDo.DO = *(t.tLogKegiatanDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tLogKegiatan) updateTableName(table string) *tLogKegiatan {
	t.ALL = field.NewAsterisk(table)
	t.CIDKegiatan = field.NewInt32(table, "c_id_kegiatan")
	t.CJenis = field.NewString(table, "c_jenis")
	t.CLog = field.NewString(table, "c_log")
	t.CLastUpdate = field.NewTime(table, "c_last_update")

	t.fillFieldMap()

	return t
}

func (t *tLogKegiatan) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tLogKegiatan) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 4)
	t.fieldMap["c_id_kegiatan"] = t.CIDKegiatan
	t.fieldMap["c_jenis"] = t.CJenis
	t.fieldMap["c_log"] = t.CLog
	t.fieldMap["c_last_update"] = t.CLastUpdate
}

func (t tLogKegiatan) clone(db *gorm.DB) tLogKegiatan {
	t.tLogKegiatanDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tLogKegiatan) replaceDB(db *gorm.DB) tLogKegiatan {
	t.tLogKegiatanDo.ReplaceDB(db)
	return t
}

type tLogKegiatanDo struct{ gen.DO }

type ITLogKegiatanDo interface {
	gen.SubQuery
	Debug() ITLogKegiatanDo
	WithContext(ctx context.Context) ITLogKegiatanDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITLogKegiatanDo
	WriteDB() ITLogKegiatanDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITLogKegiatanDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITLogKegiatanDo
	Not(conds ...gen.Condition) ITLogKegiatanDo
	Or(conds ...gen.Condition) ITLogKegiatanDo
	Select(conds ...field.Expr) ITLogKegiatanDo
	Where(conds ...gen.Condition) ITLogKegiatanDo
	Order(conds ...field.Expr) ITLogKegiatanDo
	Distinct(cols ...field.Expr) ITLogKegiatanDo
	Omit(cols ...field.Expr) ITLogKegiatanDo
	Join(table schema.Tabler, on ...field.Expr) ITLogKegiatanDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITLogKegiatanDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITLogKegiatanDo
	Group(cols ...field.Expr) ITLogKegiatanDo
	Having(conds ...gen.Condition) ITLogKegiatanDo
	Limit(limit int) ITLogKegiatanDo
	Offset(offset int) ITLogKegiatanDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITLogKegiatanDo
	Unscoped() ITLogKegiatanDo
	Create(values ...*model.TLogKegiatan) error
	CreateInBatches(values []*model.TLogKegiatan, batchSize int) error
	Save(values ...*model.TLogKegiatan) error
	First() (*model.TLogKegiatan, error)
	Take() (*model.TLogKegiatan, error)
	Last() (*model.TLogKegiatan, error)
	Find() ([]*model.TLogKegiatan, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TLogKegiatan, err error)
	FindInBatches(result *[]*model.TLogKegiatan, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TLogKegiatan) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITLogKegiatanDo
	Assign(attrs ...field.AssignExpr) ITLogKegiatanDo
	Joins(fields ...field.RelationField) ITLogKegiatanDo
	Preload(fields ...field.RelationField) ITLogKegiatanDo
	FirstOrInit() (*model.TLogKegiatan, error)
	FirstOrCreate() (*model.TLogKegiatan, error)
	FindByPage(offset int, limit int) (result []*model.TLogKegiatan, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITLogKegiatanDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tLogKegiatanDo) Debug() ITLogKegiatanDo {
	return t.withDO(t.DO.Debug())
}

func (t tLogKegiatanDo) WithContext(ctx context.Context) ITLogKegiatanDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tLogKegiatanDo) ReadDB() ITLogKegiatanDo {
	return t.Clauses(dbresolver.Read)
}

func (t tLogKegiatanDo) WriteDB() ITLogKegiatanDo {
	return t.Clauses(dbresolver.Write)
}

func (t tLogKegiatanDo) Session(config *gorm.Session) ITLogKegiatanDo {
	return t.withDO(t.DO.Session(config))
}

func (t tLogKegiatanDo) Clauses(conds ...clause.Expression) ITLogKegiatanDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tLogKegiatanDo) Returning(value interface{}, columns ...string) ITLogKegiatanDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tLogKegiatanDo) Not(conds ...gen.Condition) ITLogKegiatanDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tLogKegiatanDo) Or(conds ...gen.Condition) ITLogKegiatanDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tLogKegiatanDo) Select(conds ...field.Expr) ITLogKegiatanDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tLogKegiatanDo) Where(conds ...gen.Condition) ITLogKegiatanDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tLogKegiatanDo) Order(conds ...field.Expr) ITLogKegiatanDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tLogKegiatanDo) Distinct(cols ...field.Expr) ITLogKegiatanDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tLogKegiatanDo) Omit(cols ...field.Expr) ITLogKegiatanDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tLogKegiatanDo) Join(table schema.Tabler, on ...field.Expr) ITLogKegiatanDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tLogKegiatanDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITLogKegiatanDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tLogKegiatanDo) RightJoin(table schema.Tabler, on ...field.Expr) ITLogKegiatanDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tLogKegiatanDo) Group(cols ...field.Expr) ITLogKegiatanDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tLogKegiatanDo) Having(conds ...gen.Condition) ITLogKegiatanDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tLogKegiatanDo) Limit(limit int) ITLogKegiatanDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tLogKegiatanDo) Offset(offset int) ITLogKegiatanDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tLogKegiatanDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITLogKegiatanDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tLogKegiatanDo) Unscoped() ITLogKegiatanDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tLogKegiatanDo) Create(values ...*model.TLogKegiatan) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tLogKegiatanDo) CreateInBatches(values []*model.TLogKegiatan, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tLogKegiatanDo) Save(values ...*model.TLogKegiatan) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tLogKegiatanDo) First() (*model.TLogKegiatan, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TLogKegiatan), nil
	}
}

func (t tLogKegiatanDo) Take() (*model.TLogKegiatan, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TLogKegiatan), nil
	}
}

func (t tLogKegiatanDo) Last() (*model.TLogKegiatan, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TLogKegiatan), nil
	}
}

func (t tLogKegiatanDo) Find() ([]*model.TLogKegiatan, error) {
	result, err := t.DO.Find()
	return result.([]*model.TLogKegiatan), err
}

func (t tLogKegiatanDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TLogKegiatan, err error) {
	buf := make([]*model.TLogKegiatan, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tLogKegiatanDo) FindInBatches(result *[]*model.TLogKegiatan, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tLogKegiatanDo) Attrs(attrs ...field.AssignExpr) ITLogKegiatanDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tLogKegiatanDo) Assign(attrs ...field.AssignExpr) ITLogKegiatanDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tLogKegiatanDo) Joins(fields ...field.RelationField) ITLogKegiatanDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tLogKegiatanDo) Preload(fields ...field.RelationField) ITLogKegiatanDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tLogKegiatanDo) FirstOrInit() (*model.TLogKegiatan, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TLogKegiatan), nil
	}
}

func (t tLogKegiatanDo) FirstOrCreate() (*model.TLogKegiatan, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TLogKegiatan), nil
	}
}

func (t tLogKegiatanDo) FindByPage(offset int, limit int) (result []*model.TLogKegiatan, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tLogKegiatanDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tLogKegiatanDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tLogKegiatanDo) Delete(models ...*model.TLogKegiatan) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tLogKegiatanDo) withDO(do gen.Dao) *tLogKegiatanDo {
	t.DO = *do.(*gen.DO)
	return t
}
