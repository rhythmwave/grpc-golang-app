// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-bponline/m/gen/model"
)

func newTNamaPanitium(db *gorm.DB, opts ...gen.DOOption) tNamaPanitium {
	_tNamaPanitium := tNamaPanitium{}

	_tNamaPanitium.tNamaPanitiumDo.UseDB(db, opts...)
	_tNamaPanitium.tNamaPanitiumDo.UseModel(&model.TNamaPanitium{})

	tableName := _tNamaPanitium.tNamaPanitiumDo.TableName()
	_tNamaPanitium.ALL = field.NewAsterisk(tableName)
	_tNamaPanitium.CKodePanitia = field.NewString(tableName, "c_kode_panitia")
	_tNamaPanitium.CNamaPanitia = field.NewString(tableName, "c_nama_panitia")
	_tNamaPanitium.CStatus = field.NewString(tableName, "c_status")
	_tNamaPanitium.CUpdater = field.NewString(tableName, "c_updater")
	_tNamaPanitium.CLastUpdate = field.NewTime(tableName, "c_last_update")

	_tNamaPanitium.fillFieldMap()

	return _tNamaPanitium
}

type tNamaPanitium struct {
	tNamaPanitiumDo

	ALL          field.Asterisk
	CKodePanitia field.String
	CNamaPanitia field.String
	CStatus      field.String
	CUpdater     field.String
	CLastUpdate  field.Time

	fieldMap map[string]field.Expr
}

func (t tNamaPanitium) Table(newTableName string) *tNamaPanitium {
	t.tNamaPanitiumDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tNamaPanitium) As(alias string) *tNamaPanitium {
	t.tNamaPanitiumDo.DO = *(t.tNamaPanitiumDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tNamaPanitium) updateTableName(table string) *tNamaPanitium {
	t.ALL = field.NewAsterisk(table)
	t.CKodePanitia = field.NewString(table, "c_kode_panitia")
	t.CNamaPanitia = field.NewString(table, "c_nama_panitia")
	t.CStatus = field.NewString(table, "c_status")
	t.CUpdater = field.NewString(table, "c_updater")
	t.CLastUpdate = field.NewTime(table, "c_last_update")

	t.fillFieldMap()

	return t
}

func (t *tNamaPanitium) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tNamaPanitium) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 5)
	t.fieldMap["c_kode_panitia"] = t.CKodePanitia
	t.fieldMap["c_nama_panitia"] = t.CNamaPanitia
	t.fieldMap["c_status"] = t.CStatus
	t.fieldMap["c_updater"] = t.CUpdater
	t.fieldMap["c_last_update"] = t.CLastUpdate
}

func (t tNamaPanitium) clone(db *gorm.DB) tNamaPanitium {
	t.tNamaPanitiumDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tNamaPanitium) replaceDB(db *gorm.DB) tNamaPanitium {
	t.tNamaPanitiumDo.ReplaceDB(db)
	return t
}

type tNamaPanitiumDo struct{ gen.DO }

type ITNamaPanitiumDo interface {
	gen.SubQuery
	Debug() ITNamaPanitiumDo
	WithContext(ctx context.Context) ITNamaPanitiumDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITNamaPanitiumDo
	WriteDB() ITNamaPanitiumDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITNamaPanitiumDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITNamaPanitiumDo
	Not(conds ...gen.Condition) ITNamaPanitiumDo
	Or(conds ...gen.Condition) ITNamaPanitiumDo
	Select(conds ...field.Expr) ITNamaPanitiumDo
	Where(conds ...gen.Condition) ITNamaPanitiumDo
	Order(conds ...field.Expr) ITNamaPanitiumDo
	Distinct(cols ...field.Expr) ITNamaPanitiumDo
	Omit(cols ...field.Expr) ITNamaPanitiumDo
	Join(table schema.Tabler, on ...field.Expr) ITNamaPanitiumDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITNamaPanitiumDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITNamaPanitiumDo
	Group(cols ...field.Expr) ITNamaPanitiumDo
	Having(conds ...gen.Condition) ITNamaPanitiumDo
	Limit(limit int) ITNamaPanitiumDo
	Offset(offset int) ITNamaPanitiumDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITNamaPanitiumDo
	Unscoped() ITNamaPanitiumDo
	Create(values ...*model.TNamaPanitium) error
	CreateInBatches(values []*model.TNamaPanitium, batchSize int) error
	Save(values ...*model.TNamaPanitium) error
	First() (*model.TNamaPanitium, error)
	Take() (*model.TNamaPanitium, error)
	Last() (*model.TNamaPanitium, error)
	Find() ([]*model.TNamaPanitium, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TNamaPanitium, err error)
	FindInBatches(result *[]*model.TNamaPanitium, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TNamaPanitium) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITNamaPanitiumDo
	Assign(attrs ...field.AssignExpr) ITNamaPanitiumDo
	Joins(fields ...field.RelationField) ITNamaPanitiumDo
	Preload(fields ...field.RelationField) ITNamaPanitiumDo
	FirstOrInit() (*model.TNamaPanitium, error)
	FirstOrCreate() (*model.TNamaPanitium, error)
	FindByPage(offset int, limit int) (result []*model.TNamaPanitium, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITNamaPanitiumDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tNamaPanitiumDo) Debug() ITNamaPanitiumDo {
	return t.withDO(t.DO.Debug())
}

func (t tNamaPanitiumDo) WithContext(ctx context.Context) ITNamaPanitiumDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tNamaPanitiumDo) ReadDB() ITNamaPanitiumDo {
	return t.Clauses(dbresolver.Read)
}

func (t tNamaPanitiumDo) WriteDB() ITNamaPanitiumDo {
	return t.Clauses(dbresolver.Write)
}

func (t tNamaPanitiumDo) Session(config *gorm.Session) ITNamaPanitiumDo {
	return t.withDO(t.DO.Session(config))
}

func (t tNamaPanitiumDo) Clauses(conds ...clause.Expression) ITNamaPanitiumDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tNamaPanitiumDo) Returning(value interface{}, columns ...string) ITNamaPanitiumDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tNamaPanitiumDo) Not(conds ...gen.Condition) ITNamaPanitiumDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tNamaPanitiumDo) Or(conds ...gen.Condition) ITNamaPanitiumDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tNamaPanitiumDo) Select(conds ...field.Expr) ITNamaPanitiumDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tNamaPanitiumDo) Where(conds ...gen.Condition) ITNamaPanitiumDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tNamaPanitiumDo) Order(conds ...field.Expr) ITNamaPanitiumDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tNamaPanitiumDo) Distinct(cols ...field.Expr) ITNamaPanitiumDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tNamaPanitiumDo) Omit(cols ...field.Expr) ITNamaPanitiumDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tNamaPanitiumDo) Join(table schema.Tabler, on ...field.Expr) ITNamaPanitiumDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tNamaPanitiumDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITNamaPanitiumDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tNamaPanitiumDo) RightJoin(table schema.Tabler, on ...field.Expr) ITNamaPanitiumDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tNamaPanitiumDo) Group(cols ...field.Expr) ITNamaPanitiumDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tNamaPanitiumDo) Having(conds ...gen.Condition) ITNamaPanitiumDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tNamaPanitiumDo) Limit(limit int) ITNamaPanitiumDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tNamaPanitiumDo) Offset(offset int) ITNamaPanitiumDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tNamaPanitiumDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITNamaPanitiumDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tNamaPanitiumDo) Unscoped() ITNamaPanitiumDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tNamaPanitiumDo) Create(values ...*model.TNamaPanitium) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tNamaPanitiumDo) CreateInBatches(values []*model.TNamaPanitium, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tNamaPanitiumDo) Save(values ...*model.TNamaPanitium) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tNamaPanitiumDo) First() (*model.TNamaPanitium, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TNamaPanitium), nil
	}
}

func (t tNamaPanitiumDo) Take() (*model.TNamaPanitium, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TNamaPanitium), nil
	}
}

func (t tNamaPanitiumDo) Last() (*model.TNamaPanitium, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TNamaPanitium), nil
	}
}

func (t tNamaPanitiumDo) Find() ([]*model.TNamaPanitium, error) {
	result, err := t.DO.Find()
	return result.([]*model.TNamaPanitium), err
}

func (t tNamaPanitiumDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TNamaPanitium, err error) {
	buf := make([]*model.TNamaPanitium, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tNamaPanitiumDo) FindInBatches(result *[]*model.TNamaPanitium, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tNamaPanitiumDo) Attrs(attrs ...field.AssignExpr) ITNamaPanitiumDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tNamaPanitiumDo) Assign(attrs ...field.AssignExpr) ITNamaPanitiumDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tNamaPanitiumDo) Joins(fields ...field.RelationField) ITNamaPanitiumDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tNamaPanitiumDo) Preload(fields ...field.RelationField) ITNamaPanitiumDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tNamaPanitiumDo) FirstOrInit() (*model.TNamaPanitium, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TNamaPanitium), nil
	}
}

func (t tNamaPanitiumDo) FirstOrCreate() (*model.TNamaPanitium, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TNamaPanitium), nil
	}
}

func (t tNamaPanitiumDo) FindByPage(offset int, limit int) (result []*model.TNamaPanitium, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tNamaPanitiumDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tNamaPanitiumDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tNamaPanitiumDo) Delete(models ...*model.TNamaPanitium) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tNamaPanitiumDo) withDO(do gen.Dao) *tNamaPanitiumDo {
	t.DO = *do.(*gen.DO)
	return t
}
