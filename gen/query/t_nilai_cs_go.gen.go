// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-bponline/m/gen/model"
)

func newTNilaiCsGo(db *gorm.DB, opts ...gen.DOOption) tNilaiCsGo {
	_tNilaiCsGo := tNilaiCsGo{}

	_tNilaiCsGo.tNilaiCsGoDo.UseDB(db, opts...)
	_tNilaiCsGo.tNilaiCsGoDo.UseModel(&model.TNilaiCsGo{})

	tableName := _tNilaiCsGo.tNilaiCsGoDo.TableName()
	_tNilaiCsGo.ALL = field.NewAsterisk(tableName)
	_tNilaiCsGo.CIDSekolah = field.NewInt32(tableName, "c_id_sekolah")
	_tNilaiCsGo.CIDGedung = field.NewInt32(tableName, "c_id_gedung")
	_tNilaiCsGo.CIDJudul = field.NewInt32(tableName, "c_id_judul")
	_tNilaiCsGo.CPrioritas = field.NewInt32(tableName, "c_prioritas")
	_tNilaiCsGo.CNilai = field.NewInt32(tableName, "c_nilai")
	_tNilaiCsGo.CUpdater = field.NewString(tableName, "c_updater")
	_tNilaiCsGo.CLastUpdate = field.NewTime(tableName, "c_last_update")

	_tNilaiCsGo.fillFieldMap()

	return _tNilaiCsGo
}

type tNilaiCsGo struct {
	tNilaiCsGoDo

	ALL         field.Asterisk
	CIDSekolah  field.Int32
	CIDGedung   field.Int32
	CIDJudul    field.Int32
	CPrioritas  field.Int32  // no urut judul
	CNilai      field.Int32  // 1 sd 10
	CUpdater    field.String // nik
	CLastUpdate field.Time

	fieldMap map[string]field.Expr
}

func (t tNilaiCsGo) Table(newTableName string) *tNilaiCsGo {
	t.tNilaiCsGoDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tNilaiCsGo) As(alias string) *tNilaiCsGo {
	t.tNilaiCsGoDo.DO = *(t.tNilaiCsGoDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tNilaiCsGo) updateTableName(table string) *tNilaiCsGo {
	t.ALL = field.NewAsterisk(table)
	t.CIDSekolah = field.NewInt32(table, "c_id_sekolah")
	t.CIDGedung = field.NewInt32(table, "c_id_gedung")
	t.CIDJudul = field.NewInt32(table, "c_id_judul")
	t.CPrioritas = field.NewInt32(table, "c_prioritas")
	t.CNilai = field.NewInt32(table, "c_nilai")
	t.CUpdater = field.NewString(table, "c_updater")
	t.CLastUpdate = field.NewTime(table, "c_last_update")

	t.fillFieldMap()

	return t
}

func (t *tNilaiCsGo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tNilaiCsGo) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 7)
	t.fieldMap["c_id_sekolah"] = t.CIDSekolah
	t.fieldMap["c_id_gedung"] = t.CIDGedung
	t.fieldMap["c_id_judul"] = t.CIDJudul
	t.fieldMap["c_prioritas"] = t.CPrioritas
	t.fieldMap["c_nilai"] = t.CNilai
	t.fieldMap["c_updater"] = t.CUpdater
	t.fieldMap["c_last_update"] = t.CLastUpdate
}

func (t tNilaiCsGo) clone(db *gorm.DB) tNilaiCsGo {
	t.tNilaiCsGoDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tNilaiCsGo) replaceDB(db *gorm.DB) tNilaiCsGo {
	t.tNilaiCsGoDo.ReplaceDB(db)
	return t
}

type tNilaiCsGoDo struct{ gen.DO }

type ITNilaiCsGoDo interface {
	gen.SubQuery
	Debug() ITNilaiCsGoDo
	WithContext(ctx context.Context) ITNilaiCsGoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITNilaiCsGoDo
	WriteDB() ITNilaiCsGoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITNilaiCsGoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITNilaiCsGoDo
	Not(conds ...gen.Condition) ITNilaiCsGoDo
	Or(conds ...gen.Condition) ITNilaiCsGoDo
	Select(conds ...field.Expr) ITNilaiCsGoDo
	Where(conds ...gen.Condition) ITNilaiCsGoDo
	Order(conds ...field.Expr) ITNilaiCsGoDo
	Distinct(cols ...field.Expr) ITNilaiCsGoDo
	Omit(cols ...field.Expr) ITNilaiCsGoDo
	Join(table schema.Tabler, on ...field.Expr) ITNilaiCsGoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITNilaiCsGoDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITNilaiCsGoDo
	Group(cols ...field.Expr) ITNilaiCsGoDo
	Having(conds ...gen.Condition) ITNilaiCsGoDo
	Limit(limit int) ITNilaiCsGoDo
	Offset(offset int) ITNilaiCsGoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITNilaiCsGoDo
	Unscoped() ITNilaiCsGoDo
	Create(values ...*model.TNilaiCsGo) error
	CreateInBatches(values []*model.TNilaiCsGo, batchSize int) error
	Save(values ...*model.TNilaiCsGo) error
	First() (*model.TNilaiCsGo, error)
	Take() (*model.TNilaiCsGo, error)
	Last() (*model.TNilaiCsGo, error)
	Find() ([]*model.TNilaiCsGo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TNilaiCsGo, err error)
	FindInBatches(result *[]*model.TNilaiCsGo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TNilaiCsGo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITNilaiCsGoDo
	Assign(attrs ...field.AssignExpr) ITNilaiCsGoDo
	Joins(fields ...field.RelationField) ITNilaiCsGoDo
	Preload(fields ...field.RelationField) ITNilaiCsGoDo
	FirstOrInit() (*model.TNilaiCsGo, error)
	FirstOrCreate() (*model.TNilaiCsGo, error)
	FindByPage(offset int, limit int) (result []*model.TNilaiCsGo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITNilaiCsGoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tNilaiCsGoDo) Debug() ITNilaiCsGoDo {
	return t.withDO(t.DO.Debug())
}

func (t tNilaiCsGoDo) WithContext(ctx context.Context) ITNilaiCsGoDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tNilaiCsGoDo) ReadDB() ITNilaiCsGoDo {
	return t.Clauses(dbresolver.Read)
}

func (t tNilaiCsGoDo) WriteDB() ITNilaiCsGoDo {
	return t.Clauses(dbresolver.Write)
}

func (t tNilaiCsGoDo) Session(config *gorm.Session) ITNilaiCsGoDo {
	return t.withDO(t.DO.Session(config))
}

func (t tNilaiCsGoDo) Clauses(conds ...clause.Expression) ITNilaiCsGoDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tNilaiCsGoDo) Returning(value interface{}, columns ...string) ITNilaiCsGoDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tNilaiCsGoDo) Not(conds ...gen.Condition) ITNilaiCsGoDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tNilaiCsGoDo) Or(conds ...gen.Condition) ITNilaiCsGoDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tNilaiCsGoDo) Select(conds ...field.Expr) ITNilaiCsGoDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tNilaiCsGoDo) Where(conds ...gen.Condition) ITNilaiCsGoDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tNilaiCsGoDo) Order(conds ...field.Expr) ITNilaiCsGoDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tNilaiCsGoDo) Distinct(cols ...field.Expr) ITNilaiCsGoDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tNilaiCsGoDo) Omit(cols ...field.Expr) ITNilaiCsGoDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tNilaiCsGoDo) Join(table schema.Tabler, on ...field.Expr) ITNilaiCsGoDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tNilaiCsGoDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITNilaiCsGoDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tNilaiCsGoDo) RightJoin(table schema.Tabler, on ...field.Expr) ITNilaiCsGoDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tNilaiCsGoDo) Group(cols ...field.Expr) ITNilaiCsGoDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tNilaiCsGoDo) Having(conds ...gen.Condition) ITNilaiCsGoDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tNilaiCsGoDo) Limit(limit int) ITNilaiCsGoDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tNilaiCsGoDo) Offset(offset int) ITNilaiCsGoDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tNilaiCsGoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITNilaiCsGoDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tNilaiCsGoDo) Unscoped() ITNilaiCsGoDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tNilaiCsGoDo) Create(values ...*model.TNilaiCsGo) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tNilaiCsGoDo) CreateInBatches(values []*model.TNilaiCsGo, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tNilaiCsGoDo) Save(values ...*model.TNilaiCsGo) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tNilaiCsGoDo) First() (*model.TNilaiCsGo, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TNilaiCsGo), nil
	}
}

func (t tNilaiCsGoDo) Take() (*model.TNilaiCsGo, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TNilaiCsGo), nil
	}
}

func (t tNilaiCsGoDo) Last() (*model.TNilaiCsGo, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TNilaiCsGo), nil
	}
}

func (t tNilaiCsGoDo) Find() ([]*model.TNilaiCsGo, error) {
	result, err := t.DO.Find()
	return result.([]*model.TNilaiCsGo), err
}

func (t tNilaiCsGoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TNilaiCsGo, err error) {
	buf := make([]*model.TNilaiCsGo, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tNilaiCsGoDo) FindInBatches(result *[]*model.TNilaiCsGo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tNilaiCsGoDo) Attrs(attrs ...field.AssignExpr) ITNilaiCsGoDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tNilaiCsGoDo) Assign(attrs ...field.AssignExpr) ITNilaiCsGoDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tNilaiCsGoDo) Joins(fields ...field.RelationField) ITNilaiCsGoDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tNilaiCsGoDo) Preload(fields ...field.RelationField) ITNilaiCsGoDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tNilaiCsGoDo) FirstOrInit() (*model.TNilaiCsGo, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TNilaiCsGo), nil
	}
}

func (t tNilaiCsGoDo) FirstOrCreate() (*model.TNilaiCsGo, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TNilaiCsGo), nil
	}
}

func (t tNilaiCsGoDo) FindByPage(offset int, limit int) (result []*model.TNilaiCsGo, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tNilaiCsGoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tNilaiCsGoDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tNilaiCsGoDo) Delete(models ...*model.TNilaiCsGo) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tNilaiCsGoDo) withDO(do gen.Dao) *tNilaiCsGoDo {
	t.DO = *do.(*gen.DO)
	return t
}
