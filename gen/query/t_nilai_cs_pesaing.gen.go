// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-bponline/m/gen/model"
)

func newTNilaiCsPesaing(db *gorm.DB, opts ...gen.DOOption) tNilaiCsPesaing {
	_tNilaiCsPesaing := tNilaiCsPesaing{}

	_tNilaiCsPesaing.tNilaiCsPesaingDo.UseDB(db, opts...)
	_tNilaiCsPesaing.tNilaiCsPesaingDo.UseModel(&model.TNilaiCsPesaing{})

	tableName := _tNilaiCsPesaing.tNilaiCsPesaingDo.TableName()
	_tNilaiCsPesaing.ALL = field.NewAsterisk(tableName)
	_tNilaiCsPesaing.CIDSekolah = field.NewInt32(tableName, "c_id_sekolah")
	_tNilaiCsPesaing.CIDPesaing = field.NewInt32(tableName, "c_id_pesaing")
	_tNilaiCsPesaing.CIDJudul = field.NewInt32(tableName, "c_id_judul")
	_tNilaiCsPesaing.CNilai = field.NewInt32(tableName, "c_nilai")
	_tNilaiCsPesaing.CUpdater = field.NewString(tableName, "c_updater")
	_tNilaiCsPesaing.CLastUpdate = field.NewTime(tableName, "c_last_update")

	_tNilaiCsPesaing.fillFieldMap()

	return _tNilaiCsPesaing
}

type tNilaiCsPesaing struct {
	tNilaiCsPesaingDo

	ALL         field.Asterisk
	CIDSekolah  field.Int32
	CIDPesaing  field.Int32
	CIDJudul    field.Int32
	CNilai      field.Int32
	CUpdater    field.String
	CLastUpdate field.Time

	fieldMap map[string]field.Expr
}

func (t tNilaiCsPesaing) Table(newTableName string) *tNilaiCsPesaing {
	t.tNilaiCsPesaingDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tNilaiCsPesaing) As(alias string) *tNilaiCsPesaing {
	t.tNilaiCsPesaingDo.DO = *(t.tNilaiCsPesaingDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tNilaiCsPesaing) updateTableName(table string) *tNilaiCsPesaing {
	t.ALL = field.NewAsterisk(table)
	t.CIDSekolah = field.NewInt32(table, "c_id_sekolah")
	t.CIDPesaing = field.NewInt32(table, "c_id_pesaing")
	t.CIDJudul = field.NewInt32(table, "c_id_judul")
	t.CNilai = field.NewInt32(table, "c_nilai")
	t.CUpdater = field.NewString(table, "c_updater")
	t.CLastUpdate = field.NewTime(table, "c_last_update")

	t.fillFieldMap()

	return t
}

func (t *tNilaiCsPesaing) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tNilaiCsPesaing) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 6)
	t.fieldMap["c_id_sekolah"] = t.CIDSekolah
	t.fieldMap["c_id_pesaing"] = t.CIDPesaing
	t.fieldMap["c_id_judul"] = t.CIDJudul
	t.fieldMap["c_nilai"] = t.CNilai
	t.fieldMap["c_updater"] = t.CUpdater
	t.fieldMap["c_last_update"] = t.CLastUpdate
}

func (t tNilaiCsPesaing) clone(db *gorm.DB) tNilaiCsPesaing {
	t.tNilaiCsPesaingDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tNilaiCsPesaing) replaceDB(db *gorm.DB) tNilaiCsPesaing {
	t.tNilaiCsPesaingDo.ReplaceDB(db)
	return t
}

type tNilaiCsPesaingDo struct{ gen.DO }

type ITNilaiCsPesaingDo interface {
	gen.SubQuery
	Debug() ITNilaiCsPesaingDo
	WithContext(ctx context.Context) ITNilaiCsPesaingDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITNilaiCsPesaingDo
	WriteDB() ITNilaiCsPesaingDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITNilaiCsPesaingDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITNilaiCsPesaingDo
	Not(conds ...gen.Condition) ITNilaiCsPesaingDo
	Or(conds ...gen.Condition) ITNilaiCsPesaingDo
	Select(conds ...field.Expr) ITNilaiCsPesaingDo
	Where(conds ...gen.Condition) ITNilaiCsPesaingDo
	Order(conds ...field.Expr) ITNilaiCsPesaingDo
	Distinct(cols ...field.Expr) ITNilaiCsPesaingDo
	Omit(cols ...field.Expr) ITNilaiCsPesaingDo
	Join(table schema.Tabler, on ...field.Expr) ITNilaiCsPesaingDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITNilaiCsPesaingDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITNilaiCsPesaingDo
	Group(cols ...field.Expr) ITNilaiCsPesaingDo
	Having(conds ...gen.Condition) ITNilaiCsPesaingDo
	Limit(limit int) ITNilaiCsPesaingDo
	Offset(offset int) ITNilaiCsPesaingDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITNilaiCsPesaingDo
	Unscoped() ITNilaiCsPesaingDo
	Create(values ...*model.TNilaiCsPesaing) error
	CreateInBatches(values []*model.TNilaiCsPesaing, batchSize int) error
	Save(values ...*model.TNilaiCsPesaing) error
	First() (*model.TNilaiCsPesaing, error)
	Take() (*model.TNilaiCsPesaing, error)
	Last() (*model.TNilaiCsPesaing, error)
	Find() ([]*model.TNilaiCsPesaing, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TNilaiCsPesaing, err error)
	FindInBatches(result *[]*model.TNilaiCsPesaing, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TNilaiCsPesaing) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITNilaiCsPesaingDo
	Assign(attrs ...field.AssignExpr) ITNilaiCsPesaingDo
	Joins(fields ...field.RelationField) ITNilaiCsPesaingDo
	Preload(fields ...field.RelationField) ITNilaiCsPesaingDo
	FirstOrInit() (*model.TNilaiCsPesaing, error)
	FirstOrCreate() (*model.TNilaiCsPesaing, error)
	FindByPage(offset int, limit int) (result []*model.TNilaiCsPesaing, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITNilaiCsPesaingDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tNilaiCsPesaingDo) Debug() ITNilaiCsPesaingDo {
	return t.withDO(t.DO.Debug())
}

func (t tNilaiCsPesaingDo) WithContext(ctx context.Context) ITNilaiCsPesaingDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tNilaiCsPesaingDo) ReadDB() ITNilaiCsPesaingDo {
	return t.Clauses(dbresolver.Read)
}

func (t tNilaiCsPesaingDo) WriteDB() ITNilaiCsPesaingDo {
	return t.Clauses(dbresolver.Write)
}

func (t tNilaiCsPesaingDo) Session(config *gorm.Session) ITNilaiCsPesaingDo {
	return t.withDO(t.DO.Session(config))
}

func (t tNilaiCsPesaingDo) Clauses(conds ...clause.Expression) ITNilaiCsPesaingDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tNilaiCsPesaingDo) Returning(value interface{}, columns ...string) ITNilaiCsPesaingDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tNilaiCsPesaingDo) Not(conds ...gen.Condition) ITNilaiCsPesaingDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tNilaiCsPesaingDo) Or(conds ...gen.Condition) ITNilaiCsPesaingDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tNilaiCsPesaingDo) Select(conds ...field.Expr) ITNilaiCsPesaingDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tNilaiCsPesaingDo) Where(conds ...gen.Condition) ITNilaiCsPesaingDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tNilaiCsPesaingDo) Order(conds ...field.Expr) ITNilaiCsPesaingDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tNilaiCsPesaingDo) Distinct(cols ...field.Expr) ITNilaiCsPesaingDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tNilaiCsPesaingDo) Omit(cols ...field.Expr) ITNilaiCsPesaingDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tNilaiCsPesaingDo) Join(table schema.Tabler, on ...field.Expr) ITNilaiCsPesaingDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tNilaiCsPesaingDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITNilaiCsPesaingDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tNilaiCsPesaingDo) RightJoin(table schema.Tabler, on ...field.Expr) ITNilaiCsPesaingDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tNilaiCsPesaingDo) Group(cols ...field.Expr) ITNilaiCsPesaingDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tNilaiCsPesaingDo) Having(conds ...gen.Condition) ITNilaiCsPesaingDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tNilaiCsPesaingDo) Limit(limit int) ITNilaiCsPesaingDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tNilaiCsPesaingDo) Offset(offset int) ITNilaiCsPesaingDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tNilaiCsPesaingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITNilaiCsPesaingDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tNilaiCsPesaingDo) Unscoped() ITNilaiCsPesaingDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tNilaiCsPesaingDo) Create(values ...*model.TNilaiCsPesaing) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tNilaiCsPesaingDo) CreateInBatches(values []*model.TNilaiCsPesaing, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tNilaiCsPesaingDo) Save(values ...*model.TNilaiCsPesaing) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tNilaiCsPesaingDo) First() (*model.TNilaiCsPesaing, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TNilaiCsPesaing), nil
	}
}

func (t tNilaiCsPesaingDo) Take() (*model.TNilaiCsPesaing, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TNilaiCsPesaing), nil
	}
}

func (t tNilaiCsPesaingDo) Last() (*model.TNilaiCsPesaing, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TNilaiCsPesaing), nil
	}
}

func (t tNilaiCsPesaingDo) Find() ([]*model.TNilaiCsPesaing, error) {
	result, err := t.DO.Find()
	return result.([]*model.TNilaiCsPesaing), err
}

func (t tNilaiCsPesaingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TNilaiCsPesaing, err error) {
	buf := make([]*model.TNilaiCsPesaing, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tNilaiCsPesaingDo) FindInBatches(result *[]*model.TNilaiCsPesaing, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tNilaiCsPesaingDo) Attrs(attrs ...field.AssignExpr) ITNilaiCsPesaingDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tNilaiCsPesaingDo) Assign(attrs ...field.AssignExpr) ITNilaiCsPesaingDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tNilaiCsPesaingDo) Joins(fields ...field.RelationField) ITNilaiCsPesaingDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tNilaiCsPesaingDo) Preload(fields ...field.RelationField) ITNilaiCsPesaingDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tNilaiCsPesaingDo) FirstOrInit() (*model.TNilaiCsPesaing, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TNilaiCsPesaing), nil
	}
}

func (t tNilaiCsPesaingDo) FirstOrCreate() (*model.TNilaiCsPesaing, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TNilaiCsPesaing), nil
	}
}

func (t tNilaiCsPesaingDo) FindByPage(offset int, limit int) (result []*model.TNilaiCsPesaing, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tNilaiCsPesaingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tNilaiCsPesaingDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tNilaiCsPesaingDo) Delete(models ...*model.TNilaiCsPesaing) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tNilaiCsPesaingDo) withDO(do gen.Dao) *tNilaiCsPesaingDo {
	t.DO = *do.(*gen.DO)
	return t
}
