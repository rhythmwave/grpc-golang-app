// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-bponline/m/gen/model"
)

func newTPengajuanTransferAnggaran(db *gorm.DB, opts ...gen.DOOption) tPengajuanTransferAnggaran {
	_tPengajuanTransferAnggaran := tPengajuanTransferAnggaran{}

	_tPengajuanTransferAnggaran.tPengajuanTransferAnggaranDo.UseDB(db, opts...)
	_tPengajuanTransferAnggaran.tPengajuanTransferAnggaranDo.UseModel(&model.TPengajuanTransferAnggaran{})

	tableName := _tPengajuanTransferAnggaran.tPengajuanTransferAnggaranDo.TableName()
	_tPengajuanTransferAnggaran.ALL = field.NewAsterisk(tableName)
	_tPengajuanTransferAnggaran.CIDKegiatan = field.NewInt32(tableName, "c_id_kegiatan")
	_tPengajuanTransferAnggaran.CKodePengajuanAnggaran = field.NewString(tableName, "c_kode_pengajuan_anggaran")
	_tPengajuanTransferAnggaran.CIDJenis = field.NewString(tableName, "c_id_jenis")
	_tPengajuanTransferAnggaran.CIDDppbIsi = field.NewInt32(tableName, "c_id_dppb_isi")
	_tPengajuanTransferAnggaran.CKelompok = field.NewString(tableName, "c_kelompok")
	_tPengajuanTransferAnggaran.CIDRekening = field.NewInt32(tableName, "c_id_rekening")
	_tPengajuanTransferAnggaran.CNoRekening = field.NewString(tableName, "c_no_rekening")
	_tPengajuanTransferAnggaran.CTanggalPengajuan = field.NewTime(tableName, "c_tanggal_pengajuan")
	_tPengajuanTransferAnggaran.CTanggalPemakaian = field.NewTime(tableName, "c_tanggal_pemakaian")
	_tPengajuanTransferAnggaran.CNamaVendor = field.NewString(tableName, "c_nama_vendor")
	_tPengajuanTransferAnggaran.CPajakPersen = field.NewFloat64(tableName, "c_pajak_persen")
	_tPengajuanTransferAnggaran.CBiayaPajak = field.NewInt32(tableName, "c_biaya_pajak")
	_tPengajuanTransferAnggaran.CJumlahAkhir = field.NewInt32(tableName, "c_jumlah_akhir")
	_tPengajuanTransferAnggaran.CNpwp = field.NewString(tableName, "c_npwp")
	_tPengajuanTransferAnggaran.CUpdater = field.NewString(tableName, "c_updater")
	_tPengajuanTransferAnggaran.CJenisPotongan = field.NewString(tableName, "c_jenis_potongan")
	_tPengajuanTransferAnggaran.CPasal = field.NewString(tableName, "c_pasal")
	_tPengajuanTransferAnggaran.CTanggalExpired = field.NewTime(tableName, "c_tanggal_expired")
	_tPengajuanTransferAnggaran.CTanggalAcclk = field.NewTime(tableName, "c_tanggal_acclk")
	_tPengajuanTransferAnggaran.CPetugasAcclk = field.NewString(tableName, "c_petugas_acclk")
	_tPengajuanTransferAnggaran.CTanggalPpa = field.NewTime(tableName, "c_tanggal_ppa")
	_tPengajuanTransferAnggaran.CPetugasPpa = field.NewString(tableName, "c_petugas_ppa")
	_tPengajuanTransferAnggaran.CTanggalAccKabag = field.NewTime(tableName, "c_tanggal_acc_kabag")
	_tPengajuanTransferAnggaran.CTanggalAccManajer = field.NewTime(tableName, "c_tanggal_acc_manajer")
	_tPengajuanTransferAnggaran.CLastUpdate = field.NewTime(tableName, "c_last_update")
	_tPengajuanTransferAnggaran.CStatus = field.NewString(tableName, "c_status")
	_tPengajuanTransferAnggaran.CDariRekening = field.NewString(tableName, "c_dari_rekening")

	_tPengajuanTransferAnggaran.fillFieldMap()

	return _tPengajuanTransferAnggaran
}

type tPengajuanTransferAnggaran struct {
	tPengajuanTransferAnggaranDo

	ALL                    field.Asterisk
	CIDKegiatan            field.Int32
	CKodePengajuanAnggaran field.String
	CIDJenis               field.String
	CIDDppbIsi             field.Int32 // jika anggaran maka akan 0
	CKelompok              field.String
	CIDRekening            field.Int32 // kel anggaran -> idrekening, kel barang -> idvendor
	CNoRekening            field.String
	CTanggalPengajuan      field.Time
	CTanggalPemakaian      field.Time
	CNamaVendor            field.String
	CPajakPersen           field.Float64
	CBiayaPajak            field.Int32
	CJumlahAkhir           field.Int32
	CNpwp                  field.String
	CUpdater               field.String
	CJenisPotongan         field.String
	CPasal                 field.String
	CTanggalExpired        field.Time
	CTanggalAcclk          field.Time
	CPetugasAcclk          field.String
	CTanggalPpa            field.Time
	CPetugasPpa            field.String
	CTanggalAccKabag       field.Time
	CTanggalAccManajer     field.Time
	CLastUpdate            field.Time
	CStatus                field.String
	CDariRekening          field.String

	fieldMap map[string]field.Expr
}

func (t tPengajuanTransferAnggaran) Table(newTableName string) *tPengajuanTransferAnggaran {
	t.tPengajuanTransferAnggaranDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tPengajuanTransferAnggaran) As(alias string) *tPengajuanTransferAnggaran {
	t.tPengajuanTransferAnggaranDo.DO = *(t.tPengajuanTransferAnggaranDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tPengajuanTransferAnggaran) updateTableName(table string) *tPengajuanTransferAnggaran {
	t.ALL = field.NewAsterisk(table)
	t.CIDKegiatan = field.NewInt32(table, "c_id_kegiatan")
	t.CKodePengajuanAnggaran = field.NewString(table, "c_kode_pengajuan_anggaran")
	t.CIDJenis = field.NewString(table, "c_id_jenis")
	t.CIDDppbIsi = field.NewInt32(table, "c_id_dppb_isi")
	t.CKelompok = field.NewString(table, "c_kelompok")
	t.CIDRekening = field.NewInt32(table, "c_id_rekening")
	t.CNoRekening = field.NewString(table, "c_no_rekening")
	t.CTanggalPengajuan = field.NewTime(table, "c_tanggal_pengajuan")
	t.CTanggalPemakaian = field.NewTime(table, "c_tanggal_pemakaian")
	t.CNamaVendor = field.NewString(table, "c_nama_vendor")
	t.CPajakPersen = field.NewFloat64(table, "c_pajak_persen")
	t.CBiayaPajak = field.NewInt32(table, "c_biaya_pajak")
	t.CJumlahAkhir = field.NewInt32(table, "c_jumlah_akhir")
	t.CNpwp = field.NewString(table, "c_npwp")
	t.CUpdater = field.NewString(table, "c_updater")
	t.CJenisPotongan = field.NewString(table, "c_jenis_potongan")
	t.CPasal = field.NewString(table, "c_pasal")
	t.CTanggalExpired = field.NewTime(table, "c_tanggal_expired")
	t.CTanggalAcclk = field.NewTime(table, "c_tanggal_acclk")
	t.CPetugasAcclk = field.NewString(table, "c_petugas_acclk")
	t.CTanggalPpa = field.NewTime(table, "c_tanggal_ppa")
	t.CPetugasPpa = field.NewString(table, "c_petugas_ppa")
	t.CTanggalAccKabag = field.NewTime(table, "c_tanggal_acc_kabag")
	t.CTanggalAccManajer = field.NewTime(table, "c_tanggal_acc_manajer")
	t.CLastUpdate = field.NewTime(table, "c_last_update")
	t.CStatus = field.NewString(table, "c_status")
	t.CDariRekening = field.NewString(table, "c_dari_rekening")

	t.fillFieldMap()

	return t
}

func (t *tPengajuanTransferAnggaran) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tPengajuanTransferAnggaran) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 27)
	t.fieldMap["c_id_kegiatan"] = t.CIDKegiatan
	t.fieldMap["c_kode_pengajuan_anggaran"] = t.CKodePengajuanAnggaran
	t.fieldMap["c_id_jenis"] = t.CIDJenis
	t.fieldMap["c_id_dppb_isi"] = t.CIDDppbIsi
	t.fieldMap["c_kelompok"] = t.CKelompok
	t.fieldMap["c_id_rekening"] = t.CIDRekening
	t.fieldMap["c_no_rekening"] = t.CNoRekening
	t.fieldMap["c_tanggal_pengajuan"] = t.CTanggalPengajuan
	t.fieldMap["c_tanggal_pemakaian"] = t.CTanggalPemakaian
	t.fieldMap["c_nama_vendor"] = t.CNamaVendor
	t.fieldMap["c_pajak_persen"] = t.CPajakPersen
	t.fieldMap["c_biaya_pajak"] = t.CBiayaPajak
	t.fieldMap["c_jumlah_akhir"] = t.CJumlahAkhir
	t.fieldMap["c_npwp"] = t.CNpwp
	t.fieldMap["c_updater"] = t.CUpdater
	t.fieldMap["c_jenis_potongan"] = t.CJenisPotongan
	t.fieldMap["c_pasal"] = t.CPasal
	t.fieldMap["c_tanggal_expired"] = t.CTanggalExpired
	t.fieldMap["c_tanggal_acclk"] = t.CTanggalAcclk
	t.fieldMap["c_petugas_acclk"] = t.CPetugasAcclk
	t.fieldMap["c_tanggal_ppa"] = t.CTanggalPpa
	t.fieldMap["c_petugas_ppa"] = t.CPetugasPpa
	t.fieldMap["c_tanggal_acc_kabag"] = t.CTanggalAccKabag
	t.fieldMap["c_tanggal_acc_manajer"] = t.CTanggalAccManajer
	t.fieldMap["c_last_update"] = t.CLastUpdate
	t.fieldMap["c_status"] = t.CStatus
	t.fieldMap["c_dari_rekening"] = t.CDariRekening
}

func (t tPengajuanTransferAnggaran) clone(db *gorm.DB) tPengajuanTransferAnggaran {
	t.tPengajuanTransferAnggaranDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tPengajuanTransferAnggaran) replaceDB(db *gorm.DB) tPengajuanTransferAnggaran {
	t.tPengajuanTransferAnggaranDo.ReplaceDB(db)
	return t
}

type tPengajuanTransferAnggaranDo struct{ gen.DO }

type ITPengajuanTransferAnggaranDo interface {
	gen.SubQuery
	Debug() ITPengajuanTransferAnggaranDo
	WithContext(ctx context.Context) ITPengajuanTransferAnggaranDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITPengajuanTransferAnggaranDo
	WriteDB() ITPengajuanTransferAnggaranDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITPengajuanTransferAnggaranDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITPengajuanTransferAnggaranDo
	Not(conds ...gen.Condition) ITPengajuanTransferAnggaranDo
	Or(conds ...gen.Condition) ITPengajuanTransferAnggaranDo
	Select(conds ...field.Expr) ITPengajuanTransferAnggaranDo
	Where(conds ...gen.Condition) ITPengajuanTransferAnggaranDo
	Order(conds ...field.Expr) ITPengajuanTransferAnggaranDo
	Distinct(cols ...field.Expr) ITPengajuanTransferAnggaranDo
	Omit(cols ...field.Expr) ITPengajuanTransferAnggaranDo
	Join(table schema.Tabler, on ...field.Expr) ITPengajuanTransferAnggaranDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITPengajuanTransferAnggaranDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITPengajuanTransferAnggaranDo
	Group(cols ...field.Expr) ITPengajuanTransferAnggaranDo
	Having(conds ...gen.Condition) ITPengajuanTransferAnggaranDo
	Limit(limit int) ITPengajuanTransferAnggaranDo
	Offset(offset int) ITPengajuanTransferAnggaranDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITPengajuanTransferAnggaranDo
	Unscoped() ITPengajuanTransferAnggaranDo
	Create(values ...*model.TPengajuanTransferAnggaran) error
	CreateInBatches(values []*model.TPengajuanTransferAnggaran, batchSize int) error
	Save(values ...*model.TPengajuanTransferAnggaran) error
	First() (*model.TPengajuanTransferAnggaran, error)
	Take() (*model.TPengajuanTransferAnggaran, error)
	Last() (*model.TPengajuanTransferAnggaran, error)
	Find() ([]*model.TPengajuanTransferAnggaran, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TPengajuanTransferAnggaran, err error)
	FindInBatches(result *[]*model.TPengajuanTransferAnggaran, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TPengajuanTransferAnggaran) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITPengajuanTransferAnggaranDo
	Assign(attrs ...field.AssignExpr) ITPengajuanTransferAnggaranDo
	Joins(fields ...field.RelationField) ITPengajuanTransferAnggaranDo
	Preload(fields ...field.RelationField) ITPengajuanTransferAnggaranDo
	FirstOrInit() (*model.TPengajuanTransferAnggaran, error)
	FirstOrCreate() (*model.TPengajuanTransferAnggaran, error)
	FindByPage(offset int, limit int) (result []*model.TPengajuanTransferAnggaran, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITPengajuanTransferAnggaranDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tPengajuanTransferAnggaranDo) Debug() ITPengajuanTransferAnggaranDo {
	return t.withDO(t.DO.Debug())
}

func (t tPengajuanTransferAnggaranDo) WithContext(ctx context.Context) ITPengajuanTransferAnggaranDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tPengajuanTransferAnggaranDo) ReadDB() ITPengajuanTransferAnggaranDo {
	return t.Clauses(dbresolver.Read)
}

func (t tPengajuanTransferAnggaranDo) WriteDB() ITPengajuanTransferAnggaranDo {
	return t.Clauses(dbresolver.Write)
}

func (t tPengajuanTransferAnggaranDo) Session(config *gorm.Session) ITPengajuanTransferAnggaranDo {
	return t.withDO(t.DO.Session(config))
}

func (t tPengajuanTransferAnggaranDo) Clauses(conds ...clause.Expression) ITPengajuanTransferAnggaranDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tPengajuanTransferAnggaranDo) Returning(value interface{}, columns ...string) ITPengajuanTransferAnggaranDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tPengajuanTransferAnggaranDo) Not(conds ...gen.Condition) ITPengajuanTransferAnggaranDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tPengajuanTransferAnggaranDo) Or(conds ...gen.Condition) ITPengajuanTransferAnggaranDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tPengajuanTransferAnggaranDo) Select(conds ...field.Expr) ITPengajuanTransferAnggaranDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tPengajuanTransferAnggaranDo) Where(conds ...gen.Condition) ITPengajuanTransferAnggaranDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tPengajuanTransferAnggaranDo) Order(conds ...field.Expr) ITPengajuanTransferAnggaranDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tPengajuanTransferAnggaranDo) Distinct(cols ...field.Expr) ITPengajuanTransferAnggaranDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tPengajuanTransferAnggaranDo) Omit(cols ...field.Expr) ITPengajuanTransferAnggaranDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tPengajuanTransferAnggaranDo) Join(table schema.Tabler, on ...field.Expr) ITPengajuanTransferAnggaranDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tPengajuanTransferAnggaranDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITPengajuanTransferAnggaranDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tPengajuanTransferAnggaranDo) RightJoin(table schema.Tabler, on ...field.Expr) ITPengajuanTransferAnggaranDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tPengajuanTransferAnggaranDo) Group(cols ...field.Expr) ITPengajuanTransferAnggaranDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tPengajuanTransferAnggaranDo) Having(conds ...gen.Condition) ITPengajuanTransferAnggaranDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tPengajuanTransferAnggaranDo) Limit(limit int) ITPengajuanTransferAnggaranDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tPengajuanTransferAnggaranDo) Offset(offset int) ITPengajuanTransferAnggaranDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tPengajuanTransferAnggaranDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITPengajuanTransferAnggaranDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tPengajuanTransferAnggaranDo) Unscoped() ITPengajuanTransferAnggaranDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tPengajuanTransferAnggaranDo) Create(values ...*model.TPengajuanTransferAnggaran) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tPengajuanTransferAnggaranDo) CreateInBatches(values []*model.TPengajuanTransferAnggaran, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tPengajuanTransferAnggaranDo) Save(values ...*model.TPengajuanTransferAnggaran) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tPengajuanTransferAnggaranDo) First() (*model.TPengajuanTransferAnggaran, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPengajuanTransferAnggaran), nil
	}
}

func (t tPengajuanTransferAnggaranDo) Take() (*model.TPengajuanTransferAnggaran, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPengajuanTransferAnggaran), nil
	}
}

func (t tPengajuanTransferAnggaranDo) Last() (*model.TPengajuanTransferAnggaran, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPengajuanTransferAnggaran), nil
	}
}

func (t tPengajuanTransferAnggaranDo) Find() ([]*model.TPengajuanTransferAnggaran, error) {
	result, err := t.DO.Find()
	return result.([]*model.TPengajuanTransferAnggaran), err
}

func (t tPengajuanTransferAnggaranDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TPengajuanTransferAnggaran, err error) {
	buf := make([]*model.TPengajuanTransferAnggaran, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tPengajuanTransferAnggaranDo) FindInBatches(result *[]*model.TPengajuanTransferAnggaran, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tPengajuanTransferAnggaranDo) Attrs(attrs ...field.AssignExpr) ITPengajuanTransferAnggaranDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tPengajuanTransferAnggaranDo) Assign(attrs ...field.AssignExpr) ITPengajuanTransferAnggaranDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tPengajuanTransferAnggaranDo) Joins(fields ...field.RelationField) ITPengajuanTransferAnggaranDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tPengajuanTransferAnggaranDo) Preload(fields ...field.RelationField) ITPengajuanTransferAnggaranDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tPengajuanTransferAnggaranDo) FirstOrInit() (*model.TPengajuanTransferAnggaran, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPengajuanTransferAnggaran), nil
	}
}

func (t tPengajuanTransferAnggaranDo) FirstOrCreate() (*model.TPengajuanTransferAnggaran, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPengajuanTransferAnggaran), nil
	}
}

func (t tPengajuanTransferAnggaranDo) FindByPage(offset int, limit int) (result []*model.TPengajuanTransferAnggaran, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tPengajuanTransferAnggaranDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tPengajuanTransferAnggaranDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tPengajuanTransferAnggaranDo) Delete(models ...*model.TPengajuanTransferAnggaran) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tPengajuanTransferAnggaranDo) withDO(do gen.Dao) *tPengajuanTransferAnggaranDo {
	t.DO = *do.(*gen.DO)
	return t
}
