// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-bponline/m/gen/model"
)

func newTPermintaanTransfer(db *gorm.DB, opts ...gen.DOOption) tPermintaanTransfer {
	_tPermintaanTransfer := tPermintaanTransfer{}

	_tPermintaanTransfer.tPermintaanTransferDo.UseDB(db, opts...)
	_tPermintaanTransfer.tPermintaanTransferDo.UseModel(&model.TPermintaanTransfer{})

	tableName := _tPermintaanTransfer.tPermintaanTransferDo.TableName()
	_tPermintaanTransfer.ALL = field.NewAsterisk(tableName)
	_tPermintaanTransfer.CIDPermintaanTransfer = field.NewString(tableName, "c_id_permintaan_transfer")
	_tPermintaanTransfer.CMingguKe = field.NewInt16(tableName, "c_minggu_ke")
	_tPermintaanTransfer.CDeskripsi = field.NewString(tableName, "c_deskripsi")
	_tPermintaanTransfer.CStatus = field.NewString(tableName, "c_status")
	_tPermintaanTransfer.CInserter = field.NewString(tableName, "c_inserter")
	_tPermintaanTransfer.CUpdater = field.NewString(tableName, "c_updater")
	_tPermintaanTransfer.CLastUpdate = field.NewTime(tableName, "c_last_update")

	_tPermintaanTransfer.fillFieldMap()

	return _tPermintaanTransfer
}

type tPermintaanTransfer struct {
	tPermintaanTransferDo

	ALL                   field.Asterisk
	CIDPermintaanTransfer field.String
	CMingguKe             field.Int16
	CDeskripsi            field.String
	CStatus               field.String
	CInserter             field.String
	CUpdater              field.String
	CLastUpdate           field.Time

	fieldMap map[string]field.Expr
}

func (t tPermintaanTransfer) Table(newTableName string) *tPermintaanTransfer {
	t.tPermintaanTransferDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tPermintaanTransfer) As(alias string) *tPermintaanTransfer {
	t.tPermintaanTransferDo.DO = *(t.tPermintaanTransferDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tPermintaanTransfer) updateTableName(table string) *tPermintaanTransfer {
	t.ALL = field.NewAsterisk(table)
	t.CIDPermintaanTransfer = field.NewString(table, "c_id_permintaan_transfer")
	t.CMingguKe = field.NewInt16(table, "c_minggu_ke")
	t.CDeskripsi = field.NewString(table, "c_deskripsi")
	t.CStatus = field.NewString(table, "c_status")
	t.CInserter = field.NewString(table, "c_inserter")
	t.CUpdater = field.NewString(table, "c_updater")
	t.CLastUpdate = field.NewTime(table, "c_last_update")

	t.fillFieldMap()

	return t
}

func (t *tPermintaanTransfer) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tPermintaanTransfer) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 7)
	t.fieldMap["c_id_permintaan_transfer"] = t.CIDPermintaanTransfer
	t.fieldMap["c_minggu_ke"] = t.CMingguKe
	t.fieldMap["c_deskripsi"] = t.CDeskripsi
	t.fieldMap["c_status"] = t.CStatus
	t.fieldMap["c_inserter"] = t.CInserter
	t.fieldMap["c_updater"] = t.CUpdater
	t.fieldMap["c_last_update"] = t.CLastUpdate
}

func (t tPermintaanTransfer) clone(db *gorm.DB) tPermintaanTransfer {
	t.tPermintaanTransferDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tPermintaanTransfer) replaceDB(db *gorm.DB) tPermintaanTransfer {
	t.tPermintaanTransferDo.ReplaceDB(db)
	return t
}

type tPermintaanTransferDo struct{ gen.DO }

type ITPermintaanTransferDo interface {
	gen.SubQuery
	Debug() ITPermintaanTransferDo
	WithContext(ctx context.Context) ITPermintaanTransferDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITPermintaanTransferDo
	WriteDB() ITPermintaanTransferDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITPermintaanTransferDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITPermintaanTransferDo
	Not(conds ...gen.Condition) ITPermintaanTransferDo
	Or(conds ...gen.Condition) ITPermintaanTransferDo
	Select(conds ...field.Expr) ITPermintaanTransferDo
	Where(conds ...gen.Condition) ITPermintaanTransferDo
	Order(conds ...field.Expr) ITPermintaanTransferDo
	Distinct(cols ...field.Expr) ITPermintaanTransferDo
	Omit(cols ...field.Expr) ITPermintaanTransferDo
	Join(table schema.Tabler, on ...field.Expr) ITPermintaanTransferDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITPermintaanTransferDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITPermintaanTransferDo
	Group(cols ...field.Expr) ITPermintaanTransferDo
	Having(conds ...gen.Condition) ITPermintaanTransferDo
	Limit(limit int) ITPermintaanTransferDo
	Offset(offset int) ITPermintaanTransferDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITPermintaanTransferDo
	Unscoped() ITPermintaanTransferDo
	Create(values ...*model.TPermintaanTransfer) error
	CreateInBatches(values []*model.TPermintaanTransfer, batchSize int) error
	Save(values ...*model.TPermintaanTransfer) error
	First() (*model.TPermintaanTransfer, error)
	Take() (*model.TPermintaanTransfer, error)
	Last() (*model.TPermintaanTransfer, error)
	Find() ([]*model.TPermintaanTransfer, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TPermintaanTransfer, err error)
	FindInBatches(result *[]*model.TPermintaanTransfer, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TPermintaanTransfer) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITPermintaanTransferDo
	Assign(attrs ...field.AssignExpr) ITPermintaanTransferDo
	Joins(fields ...field.RelationField) ITPermintaanTransferDo
	Preload(fields ...field.RelationField) ITPermintaanTransferDo
	FirstOrInit() (*model.TPermintaanTransfer, error)
	FirstOrCreate() (*model.TPermintaanTransfer, error)
	FindByPage(offset int, limit int) (result []*model.TPermintaanTransfer, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITPermintaanTransferDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tPermintaanTransferDo) Debug() ITPermintaanTransferDo {
	return t.withDO(t.DO.Debug())
}

func (t tPermintaanTransferDo) WithContext(ctx context.Context) ITPermintaanTransferDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tPermintaanTransferDo) ReadDB() ITPermintaanTransferDo {
	return t.Clauses(dbresolver.Read)
}

func (t tPermintaanTransferDo) WriteDB() ITPermintaanTransferDo {
	return t.Clauses(dbresolver.Write)
}

func (t tPermintaanTransferDo) Session(config *gorm.Session) ITPermintaanTransferDo {
	return t.withDO(t.DO.Session(config))
}

func (t tPermintaanTransferDo) Clauses(conds ...clause.Expression) ITPermintaanTransferDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tPermintaanTransferDo) Returning(value interface{}, columns ...string) ITPermintaanTransferDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tPermintaanTransferDo) Not(conds ...gen.Condition) ITPermintaanTransferDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tPermintaanTransferDo) Or(conds ...gen.Condition) ITPermintaanTransferDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tPermintaanTransferDo) Select(conds ...field.Expr) ITPermintaanTransferDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tPermintaanTransferDo) Where(conds ...gen.Condition) ITPermintaanTransferDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tPermintaanTransferDo) Order(conds ...field.Expr) ITPermintaanTransferDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tPermintaanTransferDo) Distinct(cols ...field.Expr) ITPermintaanTransferDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tPermintaanTransferDo) Omit(cols ...field.Expr) ITPermintaanTransferDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tPermintaanTransferDo) Join(table schema.Tabler, on ...field.Expr) ITPermintaanTransferDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tPermintaanTransferDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITPermintaanTransferDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tPermintaanTransferDo) RightJoin(table schema.Tabler, on ...field.Expr) ITPermintaanTransferDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tPermintaanTransferDo) Group(cols ...field.Expr) ITPermintaanTransferDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tPermintaanTransferDo) Having(conds ...gen.Condition) ITPermintaanTransferDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tPermintaanTransferDo) Limit(limit int) ITPermintaanTransferDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tPermintaanTransferDo) Offset(offset int) ITPermintaanTransferDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tPermintaanTransferDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITPermintaanTransferDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tPermintaanTransferDo) Unscoped() ITPermintaanTransferDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tPermintaanTransferDo) Create(values ...*model.TPermintaanTransfer) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tPermintaanTransferDo) CreateInBatches(values []*model.TPermintaanTransfer, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tPermintaanTransferDo) Save(values ...*model.TPermintaanTransfer) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tPermintaanTransferDo) First() (*model.TPermintaanTransfer, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPermintaanTransfer), nil
	}
}

func (t tPermintaanTransferDo) Take() (*model.TPermintaanTransfer, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPermintaanTransfer), nil
	}
}

func (t tPermintaanTransferDo) Last() (*model.TPermintaanTransfer, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPermintaanTransfer), nil
	}
}

func (t tPermintaanTransferDo) Find() ([]*model.TPermintaanTransfer, error) {
	result, err := t.DO.Find()
	return result.([]*model.TPermintaanTransfer), err
}

func (t tPermintaanTransferDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TPermintaanTransfer, err error) {
	buf := make([]*model.TPermintaanTransfer, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tPermintaanTransferDo) FindInBatches(result *[]*model.TPermintaanTransfer, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tPermintaanTransferDo) Attrs(attrs ...field.AssignExpr) ITPermintaanTransferDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tPermintaanTransferDo) Assign(attrs ...field.AssignExpr) ITPermintaanTransferDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tPermintaanTransferDo) Joins(fields ...field.RelationField) ITPermintaanTransferDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tPermintaanTransferDo) Preload(fields ...field.RelationField) ITPermintaanTransferDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tPermintaanTransferDo) FirstOrInit() (*model.TPermintaanTransfer, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPermintaanTransfer), nil
	}
}

func (t tPermintaanTransferDo) FirstOrCreate() (*model.TPermintaanTransfer, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPermintaanTransfer), nil
	}
}

func (t tPermintaanTransferDo) FindByPage(offset int, limit int) (result []*model.TPermintaanTransfer, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tPermintaanTransferDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tPermintaanTransferDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tPermintaanTransferDo) Delete(models ...*model.TPermintaanTransfer) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tPermintaanTransferDo) withDO(do gen.Dao) *tPermintaanTransferDo {
	t.DO = *do.(*gen.DO)
	return t
}
