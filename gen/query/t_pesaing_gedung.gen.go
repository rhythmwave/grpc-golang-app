// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-bponline/m/gen/model"
)

func newTPesaingGedung(db *gorm.DB, opts ...gen.DOOption) tPesaingGedung {
	_tPesaingGedung := tPesaingGedung{}

	_tPesaingGedung.tPesaingGedungDo.UseDB(db, opts...)
	_tPesaingGedung.tPesaingGedungDo.UseModel(&model.TPesaingGedung{})

	tableName := _tPesaingGedung.tPesaingGedungDo.TableName()
	_tPesaingGedung.ALL = field.NewAsterisk(tableName)
	_tPesaingGedung.CIDGedung = field.NewInt32(tableName, "c_id_gedung")
	_tPesaingGedung.CIDPesaing = field.NewInt32(tableName, "c_id_pesaing")
	_tPesaingGedung.CProduk = field.NewString(tableName, "c_produk")
	_tPesaingGedung.CPrice = field.NewString(tableName, "c_price")
	_tPesaingGedung.CPlace = field.NewString(tableName, "c_place")
	_tPesaingGedung.CProcess = field.NewString(tableName, "c_process")
	_tPesaingGedung.CPromotion = field.NewString(tableName, "c_promotion")
	_tPesaingGedung.CPeople = field.NewString(tableName, "c_people")
	_tPesaingGedung.CPhysicalEvidence = field.NewString(tableName, "c_physical_evidence")
	_tPesaingGedung.CUpdater = field.NewString(tableName, "c_updater")
	_tPesaingGedung.CLastUpdate = field.NewTime(tableName, "c_last_update")
	_tPesaingGedung.CTingkat = field.NewString(tableName, "c_tingkat")

	_tPesaingGedung.fillFieldMap()

	return _tPesaingGedung
}

type tPesaingGedung struct {
	tPesaingGedungDo

	ALL               field.Asterisk
	CIDGedung         field.Int32
	CIDPesaing        field.Int32
	CProduk           field.String
	CPrice            field.String
	CPlace            field.String
	CProcess          field.String
	CPromotion        field.String
	CPeople           field.String
	CPhysicalEvidence field.String
	CUpdater          field.String
	CLastUpdate       field.Time
	CTingkat          field.String

	fieldMap map[string]field.Expr
}

func (t tPesaingGedung) Table(newTableName string) *tPesaingGedung {
	t.tPesaingGedungDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tPesaingGedung) As(alias string) *tPesaingGedung {
	t.tPesaingGedungDo.DO = *(t.tPesaingGedungDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tPesaingGedung) updateTableName(table string) *tPesaingGedung {
	t.ALL = field.NewAsterisk(table)
	t.CIDGedung = field.NewInt32(table, "c_id_gedung")
	t.CIDPesaing = field.NewInt32(table, "c_id_pesaing")
	t.CProduk = field.NewString(table, "c_produk")
	t.CPrice = field.NewString(table, "c_price")
	t.CPlace = field.NewString(table, "c_place")
	t.CProcess = field.NewString(table, "c_process")
	t.CPromotion = field.NewString(table, "c_promotion")
	t.CPeople = field.NewString(table, "c_people")
	t.CPhysicalEvidence = field.NewString(table, "c_physical_evidence")
	t.CUpdater = field.NewString(table, "c_updater")
	t.CLastUpdate = field.NewTime(table, "c_last_update")
	t.CTingkat = field.NewString(table, "c_tingkat")

	t.fillFieldMap()

	return t
}

func (t *tPesaingGedung) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tPesaingGedung) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 12)
	t.fieldMap["c_id_gedung"] = t.CIDGedung
	t.fieldMap["c_id_pesaing"] = t.CIDPesaing
	t.fieldMap["c_produk"] = t.CProduk
	t.fieldMap["c_price"] = t.CPrice
	t.fieldMap["c_place"] = t.CPlace
	t.fieldMap["c_process"] = t.CProcess
	t.fieldMap["c_promotion"] = t.CPromotion
	t.fieldMap["c_people"] = t.CPeople
	t.fieldMap["c_physical_evidence"] = t.CPhysicalEvidence
	t.fieldMap["c_updater"] = t.CUpdater
	t.fieldMap["c_last_update"] = t.CLastUpdate
	t.fieldMap["c_tingkat"] = t.CTingkat
}

func (t tPesaingGedung) clone(db *gorm.DB) tPesaingGedung {
	t.tPesaingGedungDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tPesaingGedung) replaceDB(db *gorm.DB) tPesaingGedung {
	t.tPesaingGedungDo.ReplaceDB(db)
	return t
}

type tPesaingGedungDo struct{ gen.DO }

type ITPesaingGedungDo interface {
	gen.SubQuery
	Debug() ITPesaingGedungDo
	WithContext(ctx context.Context) ITPesaingGedungDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITPesaingGedungDo
	WriteDB() ITPesaingGedungDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITPesaingGedungDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITPesaingGedungDo
	Not(conds ...gen.Condition) ITPesaingGedungDo
	Or(conds ...gen.Condition) ITPesaingGedungDo
	Select(conds ...field.Expr) ITPesaingGedungDo
	Where(conds ...gen.Condition) ITPesaingGedungDo
	Order(conds ...field.Expr) ITPesaingGedungDo
	Distinct(cols ...field.Expr) ITPesaingGedungDo
	Omit(cols ...field.Expr) ITPesaingGedungDo
	Join(table schema.Tabler, on ...field.Expr) ITPesaingGedungDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITPesaingGedungDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITPesaingGedungDo
	Group(cols ...field.Expr) ITPesaingGedungDo
	Having(conds ...gen.Condition) ITPesaingGedungDo
	Limit(limit int) ITPesaingGedungDo
	Offset(offset int) ITPesaingGedungDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITPesaingGedungDo
	Unscoped() ITPesaingGedungDo
	Create(values ...*model.TPesaingGedung) error
	CreateInBatches(values []*model.TPesaingGedung, batchSize int) error
	Save(values ...*model.TPesaingGedung) error
	First() (*model.TPesaingGedung, error)
	Take() (*model.TPesaingGedung, error)
	Last() (*model.TPesaingGedung, error)
	Find() ([]*model.TPesaingGedung, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TPesaingGedung, err error)
	FindInBatches(result *[]*model.TPesaingGedung, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TPesaingGedung) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITPesaingGedungDo
	Assign(attrs ...field.AssignExpr) ITPesaingGedungDo
	Joins(fields ...field.RelationField) ITPesaingGedungDo
	Preload(fields ...field.RelationField) ITPesaingGedungDo
	FirstOrInit() (*model.TPesaingGedung, error)
	FirstOrCreate() (*model.TPesaingGedung, error)
	FindByPage(offset int, limit int) (result []*model.TPesaingGedung, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITPesaingGedungDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tPesaingGedungDo) Debug() ITPesaingGedungDo {
	return t.withDO(t.DO.Debug())
}

func (t tPesaingGedungDo) WithContext(ctx context.Context) ITPesaingGedungDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tPesaingGedungDo) ReadDB() ITPesaingGedungDo {
	return t.Clauses(dbresolver.Read)
}

func (t tPesaingGedungDo) WriteDB() ITPesaingGedungDo {
	return t.Clauses(dbresolver.Write)
}

func (t tPesaingGedungDo) Session(config *gorm.Session) ITPesaingGedungDo {
	return t.withDO(t.DO.Session(config))
}

func (t tPesaingGedungDo) Clauses(conds ...clause.Expression) ITPesaingGedungDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tPesaingGedungDo) Returning(value interface{}, columns ...string) ITPesaingGedungDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tPesaingGedungDo) Not(conds ...gen.Condition) ITPesaingGedungDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tPesaingGedungDo) Or(conds ...gen.Condition) ITPesaingGedungDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tPesaingGedungDo) Select(conds ...field.Expr) ITPesaingGedungDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tPesaingGedungDo) Where(conds ...gen.Condition) ITPesaingGedungDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tPesaingGedungDo) Order(conds ...field.Expr) ITPesaingGedungDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tPesaingGedungDo) Distinct(cols ...field.Expr) ITPesaingGedungDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tPesaingGedungDo) Omit(cols ...field.Expr) ITPesaingGedungDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tPesaingGedungDo) Join(table schema.Tabler, on ...field.Expr) ITPesaingGedungDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tPesaingGedungDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITPesaingGedungDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tPesaingGedungDo) RightJoin(table schema.Tabler, on ...field.Expr) ITPesaingGedungDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tPesaingGedungDo) Group(cols ...field.Expr) ITPesaingGedungDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tPesaingGedungDo) Having(conds ...gen.Condition) ITPesaingGedungDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tPesaingGedungDo) Limit(limit int) ITPesaingGedungDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tPesaingGedungDo) Offset(offset int) ITPesaingGedungDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tPesaingGedungDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITPesaingGedungDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tPesaingGedungDo) Unscoped() ITPesaingGedungDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tPesaingGedungDo) Create(values ...*model.TPesaingGedung) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tPesaingGedungDo) CreateInBatches(values []*model.TPesaingGedung, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tPesaingGedungDo) Save(values ...*model.TPesaingGedung) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tPesaingGedungDo) First() (*model.TPesaingGedung, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPesaingGedung), nil
	}
}

func (t tPesaingGedungDo) Take() (*model.TPesaingGedung, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPesaingGedung), nil
	}
}

func (t tPesaingGedungDo) Last() (*model.TPesaingGedung, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPesaingGedung), nil
	}
}

func (t tPesaingGedungDo) Find() ([]*model.TPesaingGedung, error) {
	result, err := t.DO.Find()
	return result.([]*model.TPesaingGedung), err
}

func (t tPesaingGedungDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TPesaingGedung, err error) {
	buf := make([]*model.TPesaingGedung, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tPesaingGedungDo) FindInBatches(result *[]*model.TPesaingGedung, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tPesaingGedungDo) Attrs(attrs ...field.AssignExpr) ITPesaingGedungDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tPesaingGedungDo) Assign(attrs ...field.AssignExpr) ITPesaingGedungDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tPesaingGedungDo) Joins(fields ...field.RelationField) ITPesaingGedungDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tPesaingGedungDo) Preload(fields ...field.RelationField) ITPesaingGedungDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tPesaingGedungDo) FirstOrInit() (*model.TPesaingGedung, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPesaingGedung), nil
	}
}

func (t tPesaingGedungDo) FirstOrCreate() (*model.TPesaingGedung, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPesaingGedung), nil
	}
}

func (t tPesaingGedungDo) FindByPage(offset int, limit int) (result []*model.TPesaingGedung, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tPesaingGedungDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tPesaingGedungDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tPesaingGedungDo) Delete(models ...*model.TPesaingGedung) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tPesaingGedungDo) withDO(do gen.Dao) *tPesaingGedungDo {
	t.DO = *do.(*gen.DO)
	return t
}
