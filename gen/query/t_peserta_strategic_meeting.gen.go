// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-bponline/m/gen/model"
)

func newTPesertaStrategicMeeting(db *gorm.DB, opts ...gen.DOOption) tPesertaStrategicMeeting {
	_tPesertaStrategicMeeting := tPesertaStrategicMeeting{}

	_tPesertaStrategicMeeting.tPesertaStrategicMeetingDo.UseDB(db, opts...)
	_tPesertaStrategicMeeting.tPesertaStrategicMeetingDo.UseModel(&model.TPesertaStrategicMeeting{})

	tableName := _tPesertaStrategicMeeting.tPesertaStrategicMeetingDo.TableName()
	_tPesertaStrategicMeeting.ALL = field.NewAsterisk(tableName)
	_tPesertaStrategicMeeting.CNik = field.NewString(tableName, "c_nik")
	_tPesertaStrategicMeeting.CJabatan = field.NewString(tableName, "c_jabatan")
	_tPesertaStrategicMeeting.CNamaLengkap = field.NewString(tableName, "c_nama_lengkap")
	_tPesertaStrategicMeeting.CCabang = field.NewString(tableName, "c_cabang")
	_tPesertaStrategicMeeting.CWilayah = field.NewString(tableName, "c_wilayah")
	_tPesertaStrategicMeeting.CGrup = field.NewString(tableName, "c_grup")
	_tPesertaStrategicMeeting.CBapakIbu = field.NewString(tableName, "c_bapak_ibu")
	_tPesertaStrategicMeeting.CIDKomar = field.NewString(tableName, "c_id_komar")
	_tPesertaStrategicMeeting.CRoundTable = field.NewString(tableName, "c_round_table")

	_tPesertaStrategicMeeting.fillFieldMap()

	return _tPesertaStrategicMeeting
}

type tPesertaStrategicMeeting struct {
	tPesertaStrategicMeetingDo

	ALL          field.Asterisk
	CNik         field.String
	CJabatan     field.String
	CNamaLengkap field.String
	CCabang      field.String
	CWilayah     field.String
	CGrup        field.String
	CBapakIbu    field.String
	CIDKomar     field.String
	CRoundTable  field.String

	fieldMap map[string]field.Expr
}

func (t tPesertaStrategicMeeting) Table(newTableName string) *tPesertaStrategicMeeting {
	t.tPesertaStrategicMeetingDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tPesertaStrategicMeeting) As(alias string) *tPesertaStrategicMeeting {
	t.tPesertaStrategicMeetingDo.DO = *(t.tPesertaStrategicMeetingDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tPesertaStrategicMeeting) updateTableName(table string) *tPesertaStrategicMeeting {
	t.ALL = field.NewAsterisk(table)
	t.CNik = field.NewString(table, "c_nik")
	t.CJabatan = field.NewString(table, "c_jabatan")
	t.CNamaLengkap = field.NewString(table, "c_nama_lengkap")
	t.CCabang = field.NewString(table, "c_cabang")
	t.CWilayah = field.NewString(table, "c_wilayah")
	t.CGrup = field.NewString(table, "c_grup")
	t.CBapakIbu = field.NewString(table, "c_bapak_ibu")
	t.CIDKomar = field.NewString(table, "c_id_komar")
	t.CRoundTable = field.NewString(table, "c_round_table")

	t.fillFieldMap()

	return t
}

func (t *tPesertaStrategicMeeting) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tPesertaStrategicMeeting) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 9)
	t.fieldMap["c_nik"] = t.CNik
	t.fieldMap["c_jabatan"] = t.CJabatan
	t.fieldMap["c_nama_lengkap"] = t.CNamaLengkap
	t.fieldMap["c_cabang"] = t.CCabang
	t.fieldMap["c_wilayah"] = t.CWilayah
	t.fieldMap["c_grup"] = t.CGrup
	t.fieldMap["c_bapak_ibu"] = t.CBapakIbu
	t.fieldMap["c_id_komar"] = t.CIDKomar
	t.fieldMap["c_round_table"] = t.CRoundTable
}

func (t tPesertaStrategicMeeting) clone(db *gorm.DB) tPesertaStrategicMeeting {
	t.tPesertaStrategicMeetingDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tPesertaStrategicMeeting) replaceDB(db *gorm.DB) tPesertaStrategicMeeting {
	t.tPesertaStrategicMeetingDo.ReplaceDB(db)
	return t
}

type tPesertaStrategicMeetingDo struct{ gen.DO }

type ITPesertaStrategicMeetingDo interface {
	gen.SubQuery
	Debug() ITPesertaStrategicMeetingDo
	WithContext(ctx context.Context) ITPesertaStrategicMeetingDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITPesertaStrategicMeetingDo
	WriteDB() ITPesertaStrategicMeetingDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITPesertaStrategicMeetingDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITPesertaStrategicMeetingDo
	Not(conds ...gen.Condition) ITPesertaStrategicMeetingDo
	Or(conds ...gen.Condition) ITPesertaStrategicMeetingDo
	Select(conds ...field.Expr) ITPesertaStrategicMeetingDo
	Where(conds ...gen.Condition) ITPesertaStrategicMeetingDo
	Order(conds ...field.Expr) ITPesertaStrategicMeetingDo
	Distinct(cols ...field.Expr) ITPesertaStrategicMeetingDo
	Omit(cols ...field.Expr) ITPesertaStrategicMeetingDo
	Join(table schema.Tabler, on ...field.Expr) ITPesertaStrategicMeetingDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITPesertaStrategicMeetingDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITPesertaStrategicMeetingDo
	Group(cols ...field.Expr) ITPesertaStrategicMeetingDo
	Having(conds ...gen.Condition) ITPesertaStrategicMeetingDo
	Limit(limit int) ITPesertaStrategicMeetingDo
	Offset(offset int) ITPesertaStrategicMeetingDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITPesertaStrategicMeetingDo
	Unscoped() ITPesertaStrategicMeetingDo
	Create(values ...*model.TPesertaStrategicMeeting) error
	CreateInBatches(values []*model.TPesertaStrategicMeeting, batchSize int) error
	Save(values ...*model.TPesertaStrategicMeeting) error
	First() (*model.TPesertaStrategicMeeting, error)
	Take() (*model.TPesertaStrategicMeeting, error)
	Last() (*model.TPesertaStrategicMeeting, error)
	Find() ([]*model.TPesertaStrategicMeeting, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TPesertaStrategicMeeting, err error)
	FindInBatches(result *[]*model.TPesertaStrategicMeeting, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TPesertaStrategicMeeting) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITPesertaStrategicMeetingDo
	Assign(attrs ...field.AssignExpr) ITPesertaStrategicMeetingDo
	Joins(fields ...field.RelationField) ITPesertaStrategicMeetingDo
	Preload(fields ...field.RelationField) ITPesertaStrategicMeetingDo
	FirstOrInit() (*model.TPesertaStrategicMeeting, error)
	FirstOrCreate() (*model.TPesertaStrategicMeeting, error)
	FindByPage(offset int, limit int) (result []*model.TPesertaStrategicMeeting, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITPesertaStrategicMeetingDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tPesertaStrategicMeetingDo) Debug() ITPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Debug())
}

func (t tPesertaStrategicMeetingDo) WithContext(ctx context.Context) ITPesertaStrategicMeetingDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tPesertaStrategicMeetingDo) ReadDB() ITPesertaStrategicMeetingDo {
	return t.Clauses(dbresolver.Read)
}

func (t tPesertaStrategicMeetingDo) WriteDB() ITPesertaStrategicMeetingDo {
	return t.Clauses(dbresolver.Write)
}

func (t tPesertaStrategicMeetingDo) Session(config *gorm.Session) ITPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Session(config))
}

func (t tPesertaStrategicMeetingDo) Clauses(conds ...clause.Expression) ITPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tPesertaStrategicMeetingDo) Returning(value interface{}, columns ...string) ITPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tPesertaStrategicMeetingDo) Not(conds ...gen.Condition) ITPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tPesertaStrategicMeetingDo) Or(conds ...gen.Condition) ITPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tPesertaStrategicMeetingDo) Select(conds ...field.Expr) ITPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tPesertaStrategicMeetingDo) Where(conds ...gen.Condition) ITPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tPesertaStrategicMeetingDo) Order(conds ...field.Expr) ITPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tPesertaStrategicMeetingDo) Distinct(cols ...field.Expr) ITPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tPesertaStrategicMeetingDo) Omit(cols ...field.Expr) ITPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tPesertaStrategicMeetingDo) Join(table schema.Tabler, on ...field.Expr) ITPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tPesertaStrategicMeetingDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITPesertaStrategicMeetingDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tPesertaStrategicMeetingDo) RightJoin(table schema.Tabler, on ...field.Expr) ITPesertaStrategicMeetingDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tPesertaStrategicMeetingDo) Group(cols ...field.Expr) ITPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tPesertaStrategicMeetingDo) Having(conds ...gen.Condition) ITPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tPesertaStrategicMeetingDo) Limit(limit int) ITPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tPesertaStrategicMeetingDo) Offset(offset int) ITPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tPesertaStrategicMeetingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tPesertaStrategicMeetingDo) Unscoped() ITPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tPesertaStrategicMeetingDo) Create(values ...*model.TPesertaStrategicMeeting) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tPesertaStrategicMeetingDo) CreateInBatches(values []*model.TPesertaStrategicMeeting, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tPesertaStrategicMeetingDo) Save(values ...*model.TPesertaStrategicMeeting) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tPesertaStrategicMeetingDo) First() (*model.TPesertaStrategicMeeting, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPesertaStrategicMeeting), nil
	}
}

func (t tPesertaStrategicMeetingDo) Take() (*model.TPesertaStrategicMeeting, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPesertaStrategicMeeting), nil
	}
}

func (t tPesertaStrategicMeetingDo) Last() (*model.TPesertaStrategicMeeting, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPesertaStrategicMeeting), nil
	}
}

func (t tPesertaStrategicMeetingDo) Find() ([]*model.TPesertaStrategicMeeting, error) {
	result, err := t.DO.Find()
	return result.([]*model.TPesertaStrategicMeeting), err
}

func (t tPesertaStrategicMeetingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TPesertaStrategicMeeting, err error) {
	buf := make([]*model.TPesertaStrategicMeeting, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tPesertaStrategicMeetingDo) FindInBatches(result *[]*model.TPesertaStrategicMeeting, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tPesertaStrategicMeetingDo) Attrs(attrs ...field.AssignExpr) ITPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tPesertaStrategicMeetingDo) Assign(attrs ...field.AssignExpr) ITPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tPesertaStrategicMeetingDo) Joins(fields ...field.RelationField) ITPesertaStrategicMeetingDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tPesertaStrategicMeetingDo) Preload(fields ...field.RelationField) ITPesertaStrategicMeetingDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tPesertaStrategicMeetingDo) FirstOrInit() (*model.TPesertaStrategicMeeting, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPesertaStrategicMeeting), nil
	}
}

func (t tPesertaStrategicMeetingDo) FirstOrCreate() (*model.TPesertaStrategicMeeting, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPesertaStrategicMeeting), nil
	}
}

func (t tPesertaStrategicMeetingDo) FindByPage(offset int, limit int) (result []*model.TPesertaStrategicMeeting, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tPesertaStrategicMeetingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tPesertaStrategicMeetingDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tPesertaStrategicMeetingDo) Delete(models ...*model.TPesertaStrategicMeeting) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tPesertaStrategicMeetingDo) withDO(do gen.Dao) *tPesertaStrategicMeetingDo {
	t.DO = *do.(*gen.DO)
	return t
}
