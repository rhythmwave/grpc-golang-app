// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-bponline/m/gen/model"
)

func newTPresensiPesertaStrategicMeeting(db *gorm.DB, opts ...gen.DOOption) tPresensiPesertaStrategicMeeting {
	_tPresensiPesertaStrategicMeeting := tPresensiPesertaStrategicMeeting{}

	_tPresensiPesertaStrategicMeeting.tPresensiPesertaStrategicMeetingDo.UseDB(db, opts...)
	_tPresensiPesertaStrategicMeeting.tPresensiPesertaStrategicMeetingDo.UseModel(&model.TPresensiPesertaStrategicMeeting{})

	tableName := _tPresensiPesertaStrategicMeeting.tPresensiPesertaStrategicMeetingDo.TableName()
	_tPresensiPesertaStrategicMeeting.ALL = field.NewAsterisk(tableName)
	_tPresensiPesertaStrategicMeeting.CIDAcara = field.NewInt32(tableName, "c_id_acara")
	_tPresensiPesertaStrategicMeeting.CNik = field.NewString(tableName, "c_nik")
	_tPresensiPesertaStrategicMeeting.CJamPresensi = field.NewTime(tableName, "c_jam_presensi")

	_tPresensiPesertaStrategicMeeting.fillFieldMap()

	return _tPresensiPesertaStrategicMeeting
}

type tPresensiPesertaStrategicMeeting struct {
	tPresensiPesertaStrategicMeetingDo

	ALL          field.Asterisk
	CIDAcara     field.Int32
	CNik         field.String
	CJamPresensi field.Time

	fieldMap map[string]field.Expr
}

func (t tPresensiPesertaStrategicMeeting) Table(newTableName string) *tPresensiPesertaStrategicMeeting {
	t.tPresensiPesertaStrategicMeetingDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tPresensiPesertaStrategicMeeting) As(alias string) *tPresensiPesertaStrategicMeeting {
	t.tPresensiPesertaStrategicMeetingDo.DO = *(t.tPresensiPesertaStrategicMeetingDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tPresensiPesertaStrategicMeeting) updateTableName(table string) *tPresensiPesertaStrategicMeeting {
	t.ALL = field.NewAsterisk(table)
	t.CIDAcara = field.NewInt32(table, "c_id_acara")
	t.CNik = field.NewString(table, "c_nik")
	t.CJamPresensi = field.NewTime(table, "c_jam_presensi")

	t.fillFieldMap()

	return t
}

func (t *tPresensiPesertaStrategicMeeting) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tPresensiPesertaStrategicMeeting) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 3)
	t.fieldMap["c_id_acara"] = t.CIDAcara
	t.fieldMap["c_nik"] = t.CNik
	t.fieldMap["c_jam_presensi"] = t.CJamPresensi
}

func (t tPresensiPesertaStrategicMeeting) clone(db *gorm.DB) tPresensiPesertaStrategicMeeting {
	t.tPresensiPesertaStrategicMeetingDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tPresensiPesertaStrategicMeeting) replaceDB(db *gorm.DB) tPresensiPesertaStrategicMeeting {
	t.tPresensiPesertaStrategicMeetingDo.ReplaceDB(db)
	return t
}

type tPresensiPesertaStrategicMeetingDo struct{ gen.DO }

type ITPresensiPesertaStrategicMeetingDo interface {
	gen.SubQuery
	Debug() ITPresensiPesertaStrategicMeetingDo
	WithContext(ctx context.Context) ITPresensiPesertaStrategicMeetingDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITPresensiPesertaStrategicMeetingDo
	WriteDB() ITPresensiPesertaStrategicMeetingDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITPresensiPesertaStrategicMeetingDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITPresensiPesertaStrategicMeetingDo
	Not(conds ...gen.Condition) ITPresensiPesertaStrategicMeetingDo
	Or(conds ...gen.Condition) ITPresensiPesertaStrategicMeetingDo
	Select(conds ...field.Expr) ITPresensiPesertaStrategicMeetingDo
	Where(conds ...gen.Condition) ITPresensiPesertaStrategicMeetingDo
	Order(conds ...field.Expr) ITPresensiPesertaStrategicMeetingDo
	Distinct(cols ...field.Expr) ITPresensiPesertaStrategicMeetingDo
	Omit(cols ...field.Expr) ITPresensiPesertaStrategicMeetingDo
	Join(table schema.Tabler, on ...field.Expr) ITPresensiPesertaStrategicMeetingDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITPresensiPesertaStrategicMeetingDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITPresensiPesertaStrategicMeetingDo
	Group(cols ...field.Expr) ITPresensiPesertaStrategicMeetingDo
	Having(conds ...gen.Condition) ITPresensiPesertaStrategicMeetingDo
	Limit(limit int) ITPresensiPesertaStrategicMeetingDo
	Offset(offset int) ITPresensiPesertaStrategicMeetingDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITPresensiPesertaStrategicMeetingDo
	Unscoped() ITPresensiPesertaStrategicMeetingDo
	Create(values ...*model.TPresensiPesertaStrategicMeeting) error
	CreateInBatches(values []*model.TPresensiPesertaStrategicMeeting, batchSize int) error
	Save(values ...*model.TPresensiPesertaStrategicMeeting) error
	First() (*model.TPresensiPesertaStrategicMeeting, error)
	Take() (*model.TPresensiPesertaStrategicMeeting, error)
	Last() (*model.TPresensiPesertaStrategicMeeting, error)
	Find() ([]*model.TPresensiPesertaStrategicMeeting, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TPresensiPesertaStrategicMeeting, err error)
	FindInBatches(result *[]*model.TPresensiPesertaStrategicMeeting, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TPresensiPesertaStrategicMeeting) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITPresensiPesertaStrategicMeetingDo
	Assign(attrs ...field.AssignExpr) ITPresensiPesertaStrategicMeetingDo
	Joins(fields ...field.RelationField) ITPresensiPesertaStrategicMeetingDo
	Preload(fields ...field.RelationField) ITPresensiPesertaStrategicMeetingDo
	FirstOrInit() (*model.TPresensiPesertaStrategicMeeting, error)
	FirstOrCreate() (*model.TPresensiPesertaStrategicMeeting, error)
	FindByPage(offset int, limit int) (result []*model.TPresensiPesertaStrategicMeeting, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITPresensiPesertaStrategicMeetingDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tPresensiPesertaStrategicMeetingDo) Debug() ITPresensiPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Debug())
}

func (t tPresensiPesertaStrategicMeetingDo) WithContext(ctx context.Context) ITPresensiPesertaStrategicMeetingDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tPresensiPesertaStrategicMeetingDo) ReadDB() ITPresensiPesertaStrategicMeetingDo {
	return t.Clauses(dbresolver.Read)
}

func (t tPresensiPesertaStrategicMeetingDo) WriteDB() ITPresensiPesertaStrategicMeetingDo {
	return t.Clauses(dbresolver.Write)
}

func (t tPresensiPesertaStrategicMeetingDo) Session(config *gorm.Session) ITPresensiPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Session(config))
}

func (t tPresensiPesertaStrategicMeetingDo) Clauses(conds ...clause.Expression) ITPresensiPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tPresensiPesertaStrategicMeetingDo) Returning(value interface{}, columns ...string) ITPresensiPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tPresensiPesertaStrategicMeetingDo) Not(conds ...gen.Condition) ITPresensiPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tPresensiPesertaStrategicMeetingDo) Or(conds ...gen.Condition) ITPresensiPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tPresensiPesertaStrategicMeetingDo) Select(conds ...field.Expr) ITPresensiPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tPresensiPesertaStrategicMeetingDo) Where(conds ...gen.Condition) ITPresensiPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tPresensiPesertaStrategicMeetingDo) Order(conds ...field.Expr) ITPresensiPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tPresensiPesertaStrategicMeetingDo) Distinct(cols ...field.Expr) ITPresensiPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tPresensiPesertaStrategicMeetingDo) Omit(cols ...field.Expr) ITPresensiPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tPresensiPesertaStrategicMeetingDo) Join(table schema.Tabler, on ...field.Expr) ITPresensiPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tPresensiPesertaStrategicMeetingDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITPresensiPesertaStrategicMeetingDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tPresensiPesertaStrategicMeetingDo) RightJoin(table schema.Tabler, on ...field.Expr) ITPresensiPesertaStrategicMeetingDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tPresensiPesertaStrategicMeetingDo) Group(cols ...field.Expr) ITPresensiPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tPresensiPesertaStrategicMeetingDo) Having(conds ...gen.Condition) ITPresensiPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tPresensiPesertaStrategicMeetingDo) Limit(limit int) ITPresensiPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tPresensiPesertaStrategicMeetingDo) Offset(offset int) ITPresensiPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tPresensiPesertaStrategicMeetingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITPresensiPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tPresensiPesertaStrategicMeetingDo) Unscoped() ITPresensiPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tPresensiPesertaStrategicMeetingDo) Create(values ...*model.TPresensiPesertaStrategicMeeting) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tPresensiPesertaStrategicMeetingDo) CreateInBatches(values []*model.TPresensiPesertaStrategicMeeting, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tPresensiPesertaStrategicMeetingDo) Save(values ...*model.TPresensiPesertaStrategicMeeting) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tPresensiPesertaStrategicMeetingDo) First() (*model.TPresensiPesertaStrategicMeeting, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPresensiPesertaStrategicMeeting), nil
	}
}

func (t tPresensiPesertaStrategicMeetingDo) Take() (*model.TPresensiPesertaStrategicMeeting, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPresensiPesertaStrategicMeeting), nil
	}
}

func (t tPresensiPesertaStrategicMeetingDo) Last() (*model.TPresensiPesertaStrategicMeeting, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPresensiPesertaStrategicMeeting), nil
	}
}

func (t tPresensiPesertaStrategicMeetingDo) Find() ([]*model.TPresensiPesertaStrategicMeeting, error) {
	result, err := t.DO.Find()
	return result.([]*model.TPresensiPesertaStrategicMeeting), err
}

func (t tPresensiPesertaStrategicMeetingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TPresensiPesertaStrategicMeeting, err error) {
	buf := make([]*model.TPresensiPesertaStrategicMeeting, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tPresensiPesertaStrategicMeetingDo) FindInBatches(result *[]*model.TPresensiPesertaStrategicMeeting, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tPresensiPesertaStrategicMeetingDo) Attrs(attrs ...field.AssignExpr) ITPresensiPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tPresensiPesertaStrategicMeetingDo) Assign(attrs ...field.AssignExpr) ITPresensiPesertaStrategicMeetingDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tPresensiPesertaStrategicMeetingDo) Joins(fields ...field.RelationField) ITPresensiPesertaStrategicMeetingDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tPresensiPesertaStrategicMeetingDo) Preload(fields ...field.RelationField) ITPresensiPesertaStrategicMeetingDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tPresensiPesertaStrategicMeetingDo) FirstOrInit() (*model.TPresensiPesertaStrategicMeeting, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPresensiPesertaStrategicMeeting), nil
	}
}

func (t tPresensiPesertaStrategicMeetingDo) FirstOrCreate() (*model.TPresensiPesertaStrategicMeeting, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPresensiPesertaStrategicMeeting), nil
	}
}

func (t tPresensiPesertaStrategicMeetingDo) FindByPage(offset int, limit int) (result []*model.TPresensiPesertaStrategicMeeting, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tPresensiPesertaStrategicMeetingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tPresensiPesertaStrategicMeetingDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tPresensiPesertaStrategicMeetingDo) Delete(models ...*model.TPresensiPesertaStrategicMeeting) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tPresensiPesertaStrategicMeetingDo) withDO(do gen.Dao) *tPresensiPesertaStrategicMeetingDo {
	t.DO = *do.(*gen.DO)
	return t
}
