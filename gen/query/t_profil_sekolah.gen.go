// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-bponline/m/gen/model"
)

func newTProfilSekolah(db *gorm.DB, opts ...gen.DOOption) tProfilSekolah {
	_tProfilSekolah := tProfilSekolah{}

	_tProfilSekolah.tProfilSekolahDo.UseDB(db, opts...)
	_tProfilSekolah.tProfilSekolahDo.UseModel(&model.TProfilSekolah{})

	tableName := _tProfilSekolah.tProfilSekolahDo.TableName()
	_tProfilSekolah.ALL = field.NewAsterisk(tableName)
	_tProfilSekolah.CIDProfil = field.NewInt32(tableName, "c_id_profil")
	_tProfilSekolah.CIDSekolah = field.NewInt32(tableName, "c_id_sekolah")
	_tProfilSekolah.CIDKelompok = field.NewInt32(tableName, "c_id_kelompok")
	_tProfilSekolah.CUraian = field.NewString(tableName, "c_uraian")
	_tProfilSekolah.CUpline = field.NewInt32(tableName, "c_upline")
	_tProfilSekolah.CIsIsuSentral = field.NewString(tableName, "c_is_isu_sentral")
	_tProfilSekolah.CStatus = field.NewString(tableName, "c_status")
	_tProfilSekolah.CTahunAjaran = field.NewString(tableName, "c_tahun_ajaran")
	_tProfilSekolah.CUpdater = field.NewString(tableName, "c_updater")
	_tProfilSekolah.CLastUpdate = field.NewTime(tableName, "c_last_update")

	_tProfilSekolah.fillFieldMap()

	return _tProfilSekolah
}

type tProfilSekolah struct {
	tProfilSekolahDo

	ALL           field.Asterisk
	CIDProfil     field.Int32
	CIDSekolah    field.Int32
	CIDKelompok   field.Int32
	CUraian       field.String
	CUpline       field.Int32
	CIsIsuSentral field.String
	CStatus       field.String
	CTahunAjaran  field.String
	CUpdater      field.String // NIK
	CLastUpdate   field.Time

	fieldMap map[string]field.Expr
}

func (t tProfilSekolah) Table(newTableName string) *tProfilSekolah {
	t.tProfilSekolahDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tProfilSekolah) As(alias string) *tProfilSekolah {
	t.tProfilSekolahDo.DO = *(t.tProfilSekolahDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tProfilSekolah) updateTableName(table string) *tProfilSekolah {
	t.ALL = field.NewAsterisk(table)
	t.CIDProfil = field.NewInt32(table, "c_id_profil")
	t.CIDSekolah = field.NewInt32(table, "c_id_sekolah")
	t.CIDKelompok = field.NewInt32(table, "c_id_kelompok")
	t.CUraian = field.NewString(table, "c_uraian")
	t.CUpline = field.NewInt32(table, "c_upline")
	t.CIsIsuSentral = field.NewString(table, "c_is_isu_sentral")
	t.CStatus = field.NewString(table, "c_status")
	t.CTahunAjaran = field.NewString(table, "c_tahun_ajaran")
	t.CUpdater = field.NewString(table, "c_updater")
	t.CLastUpdate = field.NewTime(table, "c_last_update")

	t.fillFieldMap()

	return t
}

func (t *tProfilSekolah) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tProfilSekolah) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 10)
	t.fieldMap["c_id_profil"] = t.CIDProfil
	t.fieldMap["c_id_sekolah"] = t.CIDSekolah
	t.fieldMap["c_id_kelompok"] = t.CIDKelompok
	t.fieldMap["c_uraian"] = t.CUraian
	t.fieldMap["c_upline"] = t.CUpline
	t.fieldMap["c_is_isu_sentral"] = t.CIsIsuSentral
	t.fieldMap["c_status"] = t.CStatus
	t.fieldMap["c_tahun_ajaran"] = t.CTahunAjaran
	t.fieldMap["c_updater"] = t.CUpdater
	t.fieldMap["c_last_update"] = t.CLastUpdate
}

func (t tProfilSekolah) clone(db *gorm.DB) tProfilSekolah {
	t.tProfilSekolahDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tProfilSekolah) replaceDB(db *gorm.DB) tProfilSekolah {
	t.tProfilSekolahDo.ReplaceDB(db)
	return t
}

type tProfilSekolahDo struct{ gen.DO }

type ITProfilSekolahDo interface {
	gen.SubQuery
	Debug() ITProfilSekolahDo
	WithContext(ctx context.Context) ITProfilSekolahDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITProfilSekolahDo
	WriteDB() ITProfilSekolahDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITProfilSekolahDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITProfilSekolahDo
	Not(conds ...gen.Condition) ITProfilSekolahDo
	Or(conds ...gen.Condition) ITProfilSekolahDo
	Select(conds ...field.Expr) ITProfilSekolahDo
	Where(conds ...gen.Condition) ITProfilSekolahDo
	Order(conds ...field.Expr) ITProfilSekolahDo
	Distinct(cols ...field.Expr) ITProfilSekolahDo
	Omit(cols ...field.Expr) ITProfilSekolahDo
	Join(table schema.Tabler, on ...field.Expr) ITProfilSekolahDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITProfilSekolahDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITProfilSekolahDo
	Group(cols ...field.Expr) ITProfilSekolahDo
	Having(conds ...gen.Condition) ITProfilSekolahDo
	Limit(limit int) ITProfilSekolahDo
	Offset(offset int) ITProfilSekolahDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITProfilSekolahDo
	Unscoped() ITProfilSekolahDo
	Create(values ...*model.TProfilSekolah) error
	CreateInBatches(values []*model.TProfilSekolah, batchSize int) error
	Save(values ...*model.TProfilSekolah) error
	First() (*model.TProfilSekolah, error)
	Take() (*model.TProfilSekolah, error)
	Last() (*model.TProfilSekolah, error)
	Find() ([]*model.TProfilSekolah, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TProfilSekolah, err error)
	FindInBatches(result *[]*model.TProfilSekolah, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TProfilSekolah) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITProfilSekolahDo
	Assign(attrs ...field.AssignExpr) ITProfilSekolahDo
	Joins(fields ...field.RelationField) ITProfilSekolahDo
	Preload(fields ...field.RelationField) ITProfilSekolahDo
	FirstOrInit() (*model.TProfilSekolah, error)
	FirstOrCreate() (*model.TProfilSekolah, error)
	FindByPage(offset int, limit int) (result []*model.TProfilSekolah, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITProfilSekolahDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tProfilSekolahDo) Debug() ITProfilSekolahDo {
	return t.withDO(t.DO.Debug())
}

func (t tProfilSekolahDo) WithContext(ctx context.Context) ITProfilSekolahDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tProfilSekolahDo) ReadDB() ITProfilSekolahDo {
	return t.Clauses(dbresolver.Read)
}

func (t tProfilSekolahDo) WriteDB() ITProfilSekolahDo {
	return t.Clauses(dbresolver.Write)
}

func (t tProfilSekolahDo) Session(config *gorm.Session) ITProfilSekolahDo {
	return t.withDO(t.DO.Session(config))
}

func (t tProfilSekolahDo) Clauses(conds ...clause.Expression) ITProfilSekolahDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tProfilSekolahDo) Returning(value interface{}, columns ...string) ITProfilSekolahDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tProfilSekolahDo) Not(conds ...gen.Condition) ITProfilSekolahDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tProfilSekolahDo) Or(conds ...gen.Condition) ITProfilSekolahDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tProfilSekolahDo) Select(conds ...field.Expr) ITProfilSekolahDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tProfilSekolahDo) Where(conds ...gen.Condition) ITProfilSekolahDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tProfilSekolahDo) Order(conds ...field.Expr) ITProfilSekolahDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tProfilSekolahDo) Distinct(cols ...field.Expr) ITProfilSekolahDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tProfilSekolahDo) Omit(cols ...field.Expr) ITProfilSekolahDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tProfilSekolahDo) Join(table schema.Tabler, on ...field.Expr) ITProfilSekolahDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tProfilSekolahDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITProfilSekolahDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tProfilSekolahDo) RightJoin(table schema.Tabler, on ...field.Expr) ITProfilSekolahDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tProfilSekolahDo) Group(cols ...field.Expr) ITProfilSekolahDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tProfilSekolahDo) Having(conds ...gen.Condition) ITProfilSekolahDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tProfilSekolahDo) Limit(limit int) ITProfilSekolahDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tProfilSekolahDo) Offset(offset int) ITProfilSekolahDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tProfilSekolahDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITProfilSekolahDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tProfilSekolahDo) Unscoped() ITProfilSekolahDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tProfilSekolahDo) Create(values ...*model.TProfilSekolah) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tProfilSekolahDo) CreateInBatches(values []*model.TProfilSekolah, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tProfilSekolahDo) Save(values ...*model.TProfilSekolah) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tProfilSekolahDo) First() (*model.TProfilSekolah, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TProfilSekolah), nil
	}
}

func (t tProfilSekolahDo) Take() (*model.TProfilSekolah, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TProfilSekolah), nil
	}
}

func (t tProfilSekolahDo) Last() (*model.TProfilSekolah, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TProfilSekolah), nil
	}
}

func (t tProfilSekolahDo) Find() ([]*model.TProfilSekolah, error) {
	result, err := t.DO.Find()
	return result.([]*model.TProfilSekolah), err
}

func (t tProfilSekolahDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TProfilSekolah, err error) {
	buf := make([]*model.TProfilSekolah, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tProfilSekolahDo) FindInBatches(result *[]*model.TProfilSekolah, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tProfilSekolahDo) Attrs(attrs ...field.AssignExpr) ITProfilSekolahDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tProfilSekolahDo) Assign(attrs ...field.AssignExpr) ITProfilSekolahDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tProfilSekolahDo) Joins(fields ...field.RelationField) ITProfilSekolahDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tProfilSekolahDo) Preload(fields ...field.RelationField) ITProfilSekolahDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tProfilSekolahDo) FirstOrInit() (*model.TProfilSekolah, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TProfilSekolah), nil
	}
}

func (t tProfilSekolahDo) FirstOrCreate() (*model.TProfilSekolah, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TProfilSekolah), nil
	}
}

func (t tProfilSekolahDo) FindByPage(offset int, limit int) (result []*model.TProfilSekolah, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tProfilSekolahDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tProfilSekolahDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tProfilSekolahDo) Delete(models ...*model.TProfilSekolah) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tProfilSekolahDo) withDO(do gen.Dao) *tProfilSekolahDo {
	t.DO = *do.(*gen.DO)
	return t
}
