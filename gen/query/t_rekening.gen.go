// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-bponline/m/gen/model"
)

func newTRekening(db *gorm.DB, opts ...gen.DOOption) tRekening {
	_tRekening := tRekening{}

	_tRekening.tRekeningDo.UseDB(db, opts...)
	_tRekening.tRekeningDo.UseModel(&model.TRekening{})

	tableName := _tRekening.tRekeningDo.TableName()
	_tRekening.ALL = field.NewAsterisk(tableName)
	_tRekening.CIDRekening = field.NewInt32(tableName, "c_id_rekening")
	_tRekening.CNomorRekening = field.NewString(tableName, "c_nomor_rekening")
	_tRekening.CIDGedung = field.NewInt32(tableName, "c_id_gedung")
	_tRekening.CNamaNasabah = field.NewString(tableName, "c_nama_nasabah")
	_tRekening.CIDBank = field.NewInt32(tableName, "c_id_bank")
	_tRekening.CStatus = field.NewString(tableName, "c_status")
	_tRekening.CUpdater = field.NewString(tableName, "c_updater")
	_tRekening.CLastUpdate = field.NewTime(tableName, "c_last_update")

	_tRekening.fillFieldMap()

	return _tRekening
}

type tRekening struct {
	tRekeningDo

	ALL            field.Asterisk
	CIDRekening    field.Int32
	CNomorRekening field.String
	CIDGedung      field.Int32
	CNamaNasabah   field.String
	CIDBank        field.Int32
	CStatus        field.String
	CUpdater       field.String
	CLastUpdate    field.Time

	fieldMap map[string]field.Expr
}

func (t tRekening) Table(newTableName string) *tRekening {
	t.tRekeningDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tRekening) As(alias string) *tRekening {
	t.tRekeningDo.DO = *(t.tRekeningDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tRekening) updateTableName(table string) *tRekening {
	t.ALL = field.NewAsterisk(table)
	t.CIDRekening = field.NewInt32(table, "c_id_rekening")
	t.CNomorRekening = field.NewString(table, "c_nomor_rekening")
	t.CIDGedung = field.NewInt32(table, "c_id_gedung")
	t.CNamaNasabah = field.NewString(table, "c_nama_nasabah")
	t.CIDBank = field.NewInt32(table, "c_id_bank")
	t.CStatus = field.NewString(table, "c_status")
	t.CUpdater = field.NewString(table, "c_updater")
	t.CLastUpdate = field.NewTime(table, "c_last_update")

	t.fillFieldMap()

	return t
}

func (t *tRekening) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tRekening) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 8)
	t.fieldMap["c_id_rekening"] = t.CIDRekening
	t.fieldMap["c_nomor_rekening"] = t.CNomorRekening
	t.fieldMap["c_id_gedung"] = t.CIDGedung
	t.fieldMap["c_nama_nasabah"] = t.CNamaNasabah
	t.fieldMap["c_id_bank"] = t.CIDBank
	t.fieldMap["c_status"] = t.CStatus
	t.fieldMap["c_updater"] = t.CUpdater
	t.fieldMap["c_last_update"] = t.CLastUpdate
}

func (t tRekening) clone(db *gorm.DB) tRekening {
	t.tRekeningDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tRekening) replaceDB(db *gorm.DB) tRekening {
	t.tRekeningDo.ReplaceDB(db)
	return t
}

type tRekeningDo struct{ gen.DO }

type ITRekeningDo interface {
	gen.SubQuery
	Debug() ITRekeningDo
	WithContext(ctx context.Context) ITRekeningDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITRekeningDo
	WriteDB() ITRekeningDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITRekeningDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITRekeningDo
	Not(conds ...gen.Condition) ITRekeningDo
	Or(conds ...gen.Condition) ITRekeningDo
	Select(conds ...field.Expr) ITRekeningDo
	Where(conds ...gen.Condition) ITRekeningDo
	Order(conds ...field.Expr) ITRekeningDo
	Distinct(cols ...field.Expr) ITRekeningDo
	Omit(cols ...field.Expr) ITRekeningDo
	Join(table schema.Tabler, on ...field.Expr) ITRekeningDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITRekeningDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITRekeningDo
	Group(cols ...field.Expr) ITRekeningDo
	Having(conds ...gen.Condition) ITRekeningDo
	Limit(limit int) ITRekeningDo
	Offset(offset int) ITRekeningDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITRekeningDo
	Unscoped() ITRekeningDo
	Create(values ...*model.TRekening) error
	CreateInBatches(values []*model.TRekening, batchSize int) error
	Save(values ...*model.TRekening) error
	First() (*model.TRekening, error)
	Take() (*model.TRekening, error)
	Last() (*model.TRekening, error)
	Find() ([]*model.TRekening, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TRekening, err error)
	FindInBatches(result *[]*model.TRekening, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TRekening) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITRekeningDo
	Assign(attrs ...field.AssignExpr) ITRekeningDo
	Joins(fields ...field.RelationField) ITRekeningDo
	Preload(fields ...field.RelationField) ITRekeningDo
	FirstOrInit() (*model.TRekening, error)
	FirstOrCreate() (*model.TRekening, error)
	FindByPage(offset int, limit int) (result []*model.TRekening, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITRekeningDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tRekeningDo) Debug() ITRekeningDo {
	return t.withDO(t.DO.Debug())
}

func (t tRekeningDo) WithContext(ctx context.Context) ITRekeningDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tRekeningDo) ReadDB() ITRekeningDo {
	return t.Clauses(dbresolver.Read)
}

func (t tRekeningDo) WriteDB() ITRekeningDo {
	return t.Clauses(dbresolver.Write)
}

func (t tRekeningDo) Session(config *gorm.Session) ITRekeningDo {
	return t.withDO(t.DO.Session(config))
}

func (t tRekeningDo) Clauses(conds ...clause.Expression) ITRekeningDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tRekeningDo) Returning(value interface{}, columns ...string) ITRekeningDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tRekeningDo) Not(conds ...gen.Condition) ITRekeningDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tRekeningDo) Or(conds ...gen.Condition) ITRekeningDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tRekeningDo) Select(conds ...field.Expr) ITRekeningDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tRekeningDo) Where(conds ...gen.Condition) ITRekeningDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tRekeningDo) Order(conds ...field.Expr) ITRekeningDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tRekeningDo) Distinct(cols ...field.Expr) ITRekeningDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tRekeningDo) Omit(cols ...field.Expr) ITRekeningDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tRekeningDo) Join(table schema.Tabler, on ...field.Expr) ITRekeningDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tRekeningDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITRekeningDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tRekeningDo) RightJoin(table schema.Tabler, on ...field.Expr) ITRekeningDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tRekeningDo) Group(cols ...field.Expr) ITRekeningDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tRekeningDo) Having(conds ...gen.Condition) ITRekeningDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tRekeningDo) Limit(limit int) ITRekeningDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tRekeningDo) Offset(offset int) ITRekeningDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tRekeningDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITRekeningDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tRekeningDo) Unscoped() ITRekeningDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tRekeningDo) Create(values ...*model.TRekening) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tRekeningDo) CreateInBatches(values []*model.TRekening, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tRekeningDo) Save(values ...*model.TRekening) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tRekeningDo) First() (*model.TRekening, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TRekening), nil
	}
}

func (t tRekeningDo) Take() (*model.TRekening, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TRekening), nil
	}
}

func (t tRekeningDo) Last() (*model.TRekening, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TRekening), nil
	}
}

func (t tRekeningDo) Find() ([]*model.TRekening, error) {
	result, err := t.DO.Find()
	return result.([]*model.TRekening), err
}

func (t tRekeningDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TRekening, err error) {
	buf := make([]*model.TRekening, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tRekeningDo) FindInBatches(result *[]*model.TRekening, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tRekeningDo) Attrs(attrs ...field.AssignExpr) ITRekeningDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tRekeningDo) Assign(attrs ...field.AssignExpr) ITRekeningDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tRekeningDo) Joins(fields ...field.RelationField) ITRekeningDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tRekeningDo) Preload(fields ...field.RelationField) ITRekeningDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tRekeningDo) FirstOrInit() (*model.TRekening, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TRekening), nil
	}
}

func (t tRekeningDo) FirstOrCreate() (*model.TRekening, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TRekening), nil
	}
}

func (t tRekeningDo) FindByPage(offset int, limit int) (result []*model.TRekening, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tRekeningDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tRekeningDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tRekeningDo) Delete(models ...*model.TRekening) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tRekeningDo) withDO(do gen.Dao) *tRekeningDo {
	t.DO = *do.(*gen.DO)
	return t
}
