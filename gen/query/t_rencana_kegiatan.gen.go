// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-bponline/m/gen/model"
)

func newTRencanaKegiatan(db *gorm.DB, opts ...gen.DOOption) tRencanaKegiatan {
	_tRencanaKegiatan := tRencanaKegiatan{}

	_tRencanaKegiatan.tRencanaKegiatanDo.UseDB(db, opts...)
	_tRencanaKegiatan.tRencanaKegiatanDo.UseModel(&model.TRencanaKegiatan{})

	tableName := _tRencanaKegiatan.tRencanaKegiatanDo.TableName()
	_tRencanaKegiatan.ALL = field.NewAsterisk(tableName)
	_tRencanaKegiatan.CKodeKegiatan = field.NewString(tableName, "c_kode_kegiatan")
	_tRencanaKegiatan.CKodeAcuan = field.NewString(tableName, "c_kode_acuan")
	_tRencanaKegiatan.CIDGedung = field.NewInt32(tableName, "c_id_gedung")
	_tRencanaKegiatan.CNamaKegiatan = field.NewString(tableName, "c_nama_kegiatan")
	_tRencanaKegiatan.CUpline = field.NewString(tableName, "c_upline")
	_tRencanaKegiatan.CBulanKegiatanAwal = field.NewString(tableName, "c_bulan_kegiatan_awal")
	_tRencanaKegiatan.CBulanKegiatanAkhir = field.NewString(tableName, "c_bulan_kegiatan_akhir")
	_tRencanaKegiatan.CIDTingkat = field.NewString(tableName, "c_id_tingkat")
	_tRencanaKegiatan.CIDTujuanTingkat = field.NewString(tableName, "c_id_tujuan_tingkat")
	_tRencanaKegiatan.CTargetKehadiran = field.NewInt32(tableName, "c_target_kehadiran")
	_tRencanaKegiatan.CTargetCapaian = field.NewInt32(tableName, "c_target_capaian")
	_tRencanaKegiatan.CTahunAjaran = field.NewString(tableName, "c_tahun_ajaran")
	_tRencanaKegiatan.CStatus = field.NewString(tableName, "c_status")
	_tRencanaKegiatan.CUpdater = field.NewString(tableName, "c_updater")
	_tRencanaKegiatan.CLastUpdate = field.NewTime(tableName, "c_last_update")

	_tRencanaKegiatan.fillFieldMap()

	return _tRencanaKegiatan
}

type tRencanaKegiatan struct {
	tRencanaKegiatanDo

	ALL                 field.Asterisk
	CKodeKegiatan       field.String
	CKodeAcuan          field.String
	CIDGedung           field.Int32
	CNamaKegiatan       field.String
	CUpline             field.String
	CBulanKegiatanAwal  field.String
	CBulanKegiatanAkhir field.String
	CIDTingkat          field.String
	CIDTujuanTingkat    field.String
	CTargetKehadiran    field.Int32
	CTargetCapaian      field.Int32
	CTahunAjaran        field.String
	CStatus             field.String
	CUpdater            field.String
	CLastUpdate         field.Time

	fieldMap map[string]field.Expr
}

func (t tRencanaKegiatan) Table(newTableName string) *tRencanaKegiatan {
	t.tRencanaKegiatanDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tRencanaKegiatan) As(alias string) *tRencanaKegiatan {
	t.tRencanaKegiatanDo.DO = *(t.tRencanaKegiatanDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tRencanaKegiatan) updateTableName(table string) *tRencanaKegiatan {
	t.ALL = field.NewAsterisk(table)
	t.CKodeKegiatan = field.NewString(table, "c_kode_kegiatan")
	t.CKodeAcuan = field.NewString(table, "c_kode_acuan")
	t.CIDGedung = field.NewInt32(table, "c_id_gedung")
	t.CNamaKegiatan = field.NewString(table, "c_nama_kegiatan")
	t.CUpline = field.NewString(table, "c_upline")
	t.CBulanKegiatanAwal = field.NewString(table, "c_bulan_kegiatan_awal")
	t.CBulanKegiatanAkhir = field.NewString(table, "c_bulan_kegiatan_akhir")
	t.CIDTingkat = field.NewString(table, "c_id_tingkat")
	t.CIDTujuanTingkat = field.NewString(table, "c_id_tujuan_tingkat")
	t.CTargetKehadiran = field.NewInt32(table, "c_target_kehadiran")
	t.CTargetCapaian = field.NewInt32(table, "c_target_capaian")
	t.CTahunAjaran = field.NewString(table, "c_tahun_ajaran")
	t.CStatus = field.NewString(table, "c_status")
	t.CUpdater = field.NewString(table, "c_updater")
	t.CLastUpdate = field.NewTime(table, "c_last_update")

	t.fillFieldMap()

	return t
}

func (t *tRencanaKegiatan) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tRencanaKegiatan) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 15)
	t.fieldMap["c_kode_kegiatan"] = t.CKodeKegiatan
	t.fieldMap["c_kode_acuan"] = t.CKodeAcuan
	t.fieldMap["c_id_gedung"] = t.CIDGedung
	t.fieldMap["c_nama_kegiatan"] = t.CNamaKegiatan
	t.fieldMap["c_upline"] = t.CUpline
	t.fieldMap["c_bulan_kegiatan_awal"] = t.CBulanKegiatanAwal
	t.fieldMap["c_bulan_kegiatan_akhir"] = t.CBulanKegiatanAkhir
	t.fieldMap["c_id_tingkat"] = t.CIDTingkat
	t.fieldMap["c_id_tujuan_tingkat"] = t.CIDTujuanTingkat
	t.fieldMap["c_target_kehadiran"] = t.CTargetKehadiran
	t.fieldMap["c_target_capaian"] = t.CTargetCapaian
	t.fieldMap["c_tahun_ajaran"] = t.CTahunAjaran
	t.fieldMap["c_status"] = t.CStatus
	t.fieldMap["c_updater"] = t.CUpdater
	t.fieldMap["c_last_update"] = t.CLastUpdate
}

func (t tRencanaKegiatan) clone(db *gorm.DB) tRencanaKegiatan {
	t.tRencanaKegiatanDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tRencanaKegiatan) replaceDB(db *gorm.DB) tRencanaKegiatan {
	t.tRencanaKegiatanDo.ReplaceDB(db)
	return t
}

type tRencanaKegiatanDo struct{ gen.DO }

type ITRencanaKegiatanDo interface {
	gen.SubQuery
	Debug() ITRencanaKegiatanDo
	WithContext(ctx context.Context) ITRencanaKegiatanDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITRencanaKegiatanDo
	WriteDB() ITRencanaKegiatanDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITRencanaKegiatanDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITRencanaKegiatanDo
	Not(conds ...gen.Condition) ITRencanaKegiatanDo
	Or(conds ...gen.Condition) ITRencanaKegiatanDo
	Select(conds ...field.Expr) ITRencanaKegiatanDo
	Where(conds ...gen.Condition) ITRencanaKegiatanDo
	Order(conds ...field.Expr) ITRencanaKegiatanDo
	Distinct(cols ...field.Expr) ITRencanaKegiatanDo
	Omit(cols ...field.Expr) ITRencanaKegiatanDo
	Join(table schema.Tabler, on ...field.Expr) ITRencanaKegiatanDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITRencanaKegiatanDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITRencanaKegiatanDo
	Group(cols ...field.Expr) ITRencanaKegiatanDo
	Having(conds ...gen.Condition) ITRencanaKegiatanDo
	Limit(limit int) ITRencanaKegiatanDo
	Offset(offset int) ITRencanaKegiatanDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITRencanaKegiatanDo
	Unscoped() ITRencanaKegiatanDo
	Create(values ...*model.TRencanaKegiatan) error
	CreateInBatches(values []*model.TRencanaKegiatan, batchSize int) error
	Save(values ...*model.TRencanaKegiatan) error
	First() (*model.TRencanaKegiatan, error)
	Take() (*model.TRencanaKegiatan, error)
	Last() (*model.TRencanaKegiatan, error)
	Find() ([]*model.TRencanaKegiatan, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TRencanaKegiatan, err error)
	FindInBatches(result *[]*model.TRencanaKegiatan, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TRencanaKegiatan) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITRencanaKegiatanDo
	Assign(attrs ...field.AssignExpr) ITRencanaKegiatanDo
	Joins(fields ...field.RelationField) ITRencanaKegiatanDo
	Preload(fields ...field.RelationField) ITRencanaKegiatanDo
	FirstOrInit() (*model.TRencanaKegiatan, error)
	FirstOrCreate() (*model.TRencanaKegiatan, error)
	FindByPage(offset int, limit int) (result []*model.TRencanaKegiatan, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITRencanaKegiatanDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tRencanaKegiatanDo) Debug() ITRencanaKegiatanDo {
	return t.withDO(t.DO.Debug())
}

func (t tRencanaKegiatanDo) WithContext(ctx context.Context) ITRencanaKegiatanDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tRencanaKegiatanDo) ReadDB() ITRencanaKegiatanDo {
	return t.Clauses(dbresolver.Read)
}

func (t tRencanaKegiatanDo) WriteDB() ITRencanaKegiatanDo {
	return t.Clauses(dbresolver.Write)
}

func (t tRencanaKegiatanDo) Session(config *gorm.Session) ITRencanaKegiatanDo {
	return t.withDO(t.DO.Session(config))
}

func (t tRencanaKegiatanDo) Clauses(conds ...clause.Expression) ITRencanaKegiatanDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tRencanaKegiatanDo) Returning(value interface{}, columns ...string) ITRencanaKegiatanDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tRencanaKegiatanDo) Not(conds ...gen.Condition) ITRencanaKegiatanDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tRencanaKegiatanDo) Or(conds ...gen.Condition) ITRencanaKegiatanDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tRencanaKegiatanDo) Select(conds ...field.Expr) ITRencanaKegiatanDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tRencanaKegiatanDo) Where(conds ...gen.Condition) ITRencanaKegiatanDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tRencanaKegiatanDo) Order(conds ...field.Expr) ITRencanaKegiatanDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tRencanaKegiatanDo) Distinct(cols ...field.Expr) ITRencanaKegiatanDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tRencanaKegiatanDo) Omit(cols ...field.Expr) ITRencanaKegiatanDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tRencanaKegiatanDo) Join(table schema.Tabler, on ...field.Expr) ITRencanaKegiatanDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tRencanaKegiatanDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITRencanaKegiatanDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tRencanaKegiatanDo) RightJoin(table schema.Tabler, on ...field.Expr) ITRencanaKegiatanDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tRencanaKegiatanDo) Group(cols ...field.Expr) ITRencanaKegiatanDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tRencanaKegiatanDo) Having(conds ...gen.Condition) ITRencanaKegiatanDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tRencanaKegiatanDo) Limit(limit int) ITRencanaKegiatanDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tRencanaKegiatanDo) Offset(offset int) ITRencanaKegiatanDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tRencanaKegiatanDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITRencanaKegiatanDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tRencanaKegiatanDo) Unscoped() ITRencanaKegiatanDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tRencanaKegiatanDo) Create(values ...*model.TRencanaKegiatan) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tRencanaKegiatanDo) CreateInBatches(values []*model.TRencanaKegiatan, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tRencanaKegiatanDo) Save(values ...*model.TRencanaKegiatan) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tRencanaKegiatanDo) First() (*model.TRencanaKegiatan, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TRencanaKegiatan), nil
	}
}

func (t tRencanaKegiatanDo) Take() (*model.TRencanaKegiatan, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TRencanaKegiatan), nil
	}
}

func (t tRencanaKegiatanDo) Last() (*model.TRencanaKegiatan, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TRencanaKegiatan), nil
	}
}

func (t tRencanaKegiatanDo) Find() ([]*model.TRencanaKegiatan, error) {
	result, err := t.DO.Find()
	return result.([]*model.TRencanaKegiatan), err
}

func (t tRencanaKegiatanDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TRencanaKegiatan, err error) {
	buf := make([]*model.TRencanaKegiatan, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tRencanaKegiatanDo) FindInBatches(result *[]*model.TRencanaKegiatan, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tRencanaKegiatanDo) Attrs(attrs ...field.AssignExpr) ITRencanaKegiatanDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tRencanaKegiatanDo) Assign(attrs ...field.AssignExpr) ITRencanaKegiatanDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tRencanaKegiatanDo) Joins(fields ...field.RelationField) ITRencanaKegiatanDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tRencanaKegiatanDo) Preload(fields ...field.RelationField) ITRencanaKegiatanDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tRencanaKegiatanDo) FirstOrInit() (*model.TRencanaKegiatan, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TRencanaKegiatan), nil
	}
}

func (t tRencanaKegiatanDo) FirstOrCreate() (*model.TRencanaKegiatan, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TRencanaKegiatan), nil
	}
}

func (t tRencanaKegiatanDo) FindByPage(offset int, limit int) (result []*model.TRencanaKegiatan, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tRencanaKegiatanDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tRencanaKegiatanDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tRencanaKegiatanDo) Delete(models ...*model.TRencanaKegiatan) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tRencanaKegiatanDo) withDO(do gen.Dao) *tRencanaKegiatanDo {
	t.DO = *do.(*gen.DO)
	return t
}
