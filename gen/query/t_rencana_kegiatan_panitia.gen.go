// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-bponline/m/gen/model"
)

func newTRencanaKegiatanPanitium(db *gorm.DB, opts ...gen.DOOption) tRencanaKegiatanPanitium {
	_tRencanaKegiatanPanitium := tRencanaKegiatanPanitium{}

	_tRencanaKegiatanPanitium.tRencanaKegiatanPanitiumDo.UseDB(db, opts...)
	_tRencanaKegiatanPanitium.tRencanaKegiatanPanitiumDo.UseModel(&model.TRencanaKegiatanPanitium{})

	tableName := _tRencanaKegiatanPanitium.tRencanaKegiatanPanitiumDo.TableName()
	_tRencanaKegiatanPanitium.ALL = field.NewAsterisk(tableName)
	_tRencanaKegiatanPanitium.CKodeKegiatan = field.NewString(tableName, "c_kode_kegiatan")
	_tRencanaKegiatanPanitium.CKodePanitia = field.NewString(tableName, "c_kode_panitia")
	_tRencanaKegiatanPanitium.CNik = field.NewString(tableName, "c_nik")
	_tRencanaKegiatanPanitium.CUpdater = field.NewString(tableName, "c_updater")
	_tRencanaKegiatanPanitium.CLastUpdate = field.NewTime(tableName, "c_last_update")

	_tRencanaKegiatanPanitium.fillFieldMap()

	return _tRencanaKegiatanPanitium
}

type tRencanaKegiatanPanitium struct {
	tRencanaKegiatanPanitiumDo

	ALL           field.Asterisk
	CKodeKegiatan field.String
	CKodePanitia  field.String
	CNik          field.String
	CUpdater      field.String
	CLastUpdate   field.Time

	fieldMap map[string]field.Expr
}

func (t tRencanaKegiatanPanitium) Table(newTableName string) *tRencanaKegiatanPanitium {
	t.tRencanaKegiatanPanitiumDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tRencanaKegiatanPanitium) As(alias string) *tRencanaKegiatanPanitium {
	t.tRencanaKegiatanPanitiumDo.DO = *(t.tRencanaKegiatanPanitiumDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tRencanaKegiatanPanitium) updateTableName(table string) *tRencanaKegiatanPanitium {
	t.ALL = field.NewAsterisk(table)
	t.CKodeKegiatan = field.NewString(table, "c_kode_kegiatan")
	t.CKodePanitia = field.NewString(table, "c_kode_panitia")
	t.CNik = field.NewString(table, "c_nik")
	t.CUpdater = field.NewString(table, "c_updater")
	t.CLastUpdate = field.NewTime(table, "c_last_update")

	t.fillFieldMap()

	return t
}

func (t *tRencanaKegiatanPanitium) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tRencanaKegiatanPanitium) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 5)
	t.fieldMap["c_kode_kegiatan"] = t.CKodeKegiatan
	t.fieldMap["c_kode_panitia"] = t.CKodePanitia
	t.fieldMap["c_nik"] = t.CNik
	t.fieldMap["c_updater"] = t.CUpdater
	t.fieldMap["c_last_update"] = t.CLastUpdate
}

func (t tRencanaKegiatanPanitium) clone(db *gorm.DB) tRencanaKegiatanPanitium {
	t.tRencanaKegiatanPanitiumDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tRencanaKegiatanPanitium) replaceDB(db *gorm.DB) tRencanaKegiatanPanitium {
	t.tRencanaKegiatanPanitiumDo.ReplaceDB(db)
	return t
}

type tRencanaKegiatanPanitiumDo struct{ gen.DO }

type ITRencanaKegiatanPanitiumDo interface {
	gen.SubQuery
	Debug() ITRencanaKegiatanPanitiumDo
	WithContext(ctx context.Context) ITRencanaKegiatanPanitiumDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITRencanaKegiatanPanitiumDo
	WriteDB() ITRencanaKegiatanPanitiumDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITRencanaKegiatanPanitiumDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITRencanaKegiatanPanitiumDo
	Not(conds ...gen.Condition) ITRencanaKegiatanPanitiumDo
	Or(conds ...gen.Condition) ITRencanaKegiatanPanitiumDo
	Select(conds ...field.Expr) ITRencanaKegiatanPanitiumDo
	Where(conds ...gen.Condition) ITRencanaKegiatanPanitiumDo
	Order(conds ...field.Expr) ITRencanaKegiatanPanitiumDo
	Distinct(cols ...field.Expr) ITRencanaKegiatanPanitiumDo
	Omit(cols ...field.Expr) ITRencanaKegiatanPanitiumDo
	Join(table schema.Tabler, on ...field.Expr) ITRencanaKegiatanPanitiumDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITRencanaKegiatanPanitiumDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITRencanaKegiatanPanitiumDo
	Group(cols ...field.Expr) ITRencanaKegiatanPanitiumDo
	Having(conds ...gen.Condition) ITRencanaKegiatanPanitiumDo
	Limit(limit int) ITRencanaKegiatanPanitiumDo
	Offset(offset int) ITRencanaKegiatanPanitiumDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITRencanaKegiatanPanitiumDo
	Unscoped() ITRencanaKegiatanPanitiumDo
	Create(values ...*model.TRencanaKegiatanPanitium) error
	CreateInBatches(values []*model.TRencanaKegiatanPanitium, batchSize int) error
	Save(values ...*model.TRencanaKegiatanPanitium) error
	First() (*model.TRencanaKegiatanPanitium, error)
	Take() (*model.TRencanaKegiatanPanitium, error)
	Last() (*model.TRencanaKegiatanPanitium, error)
	Find() ([]*model.TRencanaKegiatanPanitium, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TRencanaKegiatanPanitium, err error)
	FindInBatches(result *[]*model.TRencanaKegiatanPanitium, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TRencanaKegiatanPanitium) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITRencanaKegiatanPanitiumDo
	Assign(attrs ...field.AssignExpr) ITRencanaKegiatanPanitiumDo
	Joins(fields ...field.RelationField) ITRencanaKegiatanPanitiumDo
	Preload(fields ...field.RelationField) ITRencanaKegiatanPanitiumDo
	FirstOrInit() (*model.TRencanaKegiatanPanitium, error)
	FirstOrCreate() (*model.TRencanaKegiatanPanitium, error)
	FindByPage(offset int, limit int) (result []*model.TRencanaKegiatanPanitium, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITRencanaKegiatanPanitiumDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tRencanaKegiatanPanitiumDo) Debug() ITRencanaKegiatanPanitiumDo {
	return t.withDO(t.DO.Debug())
}

func (t tRencanaKegiatanPanitiumDo) WithContext(ctx context.Context) ITRencanaKegiatanPanitiumDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tRencanaKegiatanPanitiumDo) ReadDB() ITRencanaKegiatanPanitiumDo {
	return t.Clauses(dbresolver.Read)
}

func (t tRencanaKegiatanPanitiumDo) WriteDB() ITRencanaKegiatanPanitiumDo {
	return t.Clauses(dbresolver.Write)
}

func (t tRencanaKegiatanPanitiumDo) Session(config *gorm.Session) ITRencanaKegiatanPanitiumDo {
	return t.withDO(t.DO.Session(config))
}

func (t tRencanaKegiatanPanitiumDo) Clauses(conds ...clause.Expression) ITRencanaKegiatanPanitiumDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tRencanaKegiatanPanitiumDo) Returning(value interface{}, columns ...string) ITRencanaKegiatanPanitiumDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tRencanaKegiatanPanitiumDo) Not(conds ...gen.Condition) ITRencanaKegiatanPanitiumDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tRencanaKegiatanPanitiumDo) Or(conds ...gen.Condition) ITRencanaKegiatanPanitiumDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tRencanaKegiatanPanitiumDo) Select(conds ...field.Expr) ITRencanaKegiatanPanitiumDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tRencanaKegiatanPanitiumDo) Where(conds ...gen.Condition) ITRencanaKegiatanPanitiumDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tRencanaKegiatanPanitiumDo) Order(conds ...field.Expr) ITRencanaKegiatanPanitiumDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tRencanaKegiatanPanitiumDo) Distinct(cols ...field.Expr) ITRencanaKegiatanPanitiumDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tRencanaKegiatanPanitiumDo) Omit(cols ...field.Expr) ITRencanaKegiatanPanitiumDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tRencanaKegiatanPanitiumDo) Join(table schema.Tabler, on ...field.Expr) ITRencanaKegiatanPanitiumDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tRencanaKegiatanPanitiumDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITRencanaKegiatanPanitiumDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tRencanaKegiatanPanitiumDo) RightJoin(table schema.Tabler, on ...field.Expr) ITRencanaKegiatanPanitiumDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tRencanaKegiatanPanitiumDo) Group(cols ...field.Expr) ITRencanaKegiatanPanitiumDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tRencanaKegiatanPanitiumDo) Having(conds ...gen.Condition) ITRencanaKegiatanPanitiumDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tRencanaKegiatanPanitiumDo) Limit(limit int) ITRencanaKegiatanPanitiumDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tRencanaKegiatanPanitiumDo) Offset(offset int) ITRencanaKegiatanPanitiumDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tRencanaKegiatanPanitiumDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITRencanaKegiatanPanitiumDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tRencanaKegiatanPanitiumDo) Unscoped() ITRencanaKegiatanPanitiumDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tRencanaKegiatanPanitiumDo) Create(values ...*model.TRencanaKegiatanPanitium) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tRencanaKegiatanPanitiumDo) CreateInBatches(values []*model.TRencanaKegiatanPanitium, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tRencanaKegiatanPanitiumDo) Save(values ...*model.TRencanaKegiatanPanitium) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tRencanaKegiatanPanitiumDo) First() (*model.TRencanaKegiatanPanitium, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TRencanaKegiatanPanitium), nil
	}
}

func (t tRencanaKegiatanPanitiumDo) Take() (*model.TRencanaKegiatanPanitium, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TRencanaKegiatanPanitium), nil
	}
}

func (t tRencanaKegiatanPanitiumDo) Last() (*model.TRencanaKegiatanPanitium, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TRencanaKegiatanPanitium), nil
	}
}

func (t tRencanaKegiatanPanitiumDo) Find() ([]*model.TRencanaKegiatanPanitium, error) {
	result, err := t.DO.Find()
	return result.([]*model.TRencanaKegiatanPanitium), err
}

func (t tRencanaKegiatanPanitiumDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TRencanaKegiatanPanitium, err error) {
	buf := make([]*model.TRencanaKegiatanPanitium, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tRencanaKegiatanPanitiumDo) FindInBatches(result *[]*model.TRencanaKegiatanPanitium, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tRencanaKegiatanPanitiumDo) Attrs(attrs ...field.AssignExpr) ITRencanaKegiatanPanitiumDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tRencanaKegiatanPanitiumDo) Assign(attrs ...field.AssignExpr) ITRencanaKegiatanPanitiumDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tRencanaKegiatanPanitiumDo) Joins(fields ...field.RelationField) ITRencanaKegiatanPanitiumDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tRencanaKegiatanPanitiumDo) Preload(fields ...field.RelationField) ITRencanaKegiatanPanitiumDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tRencanaKegiatanPanitiumDo) FirstOrInit() (*model.TRencanaKegiatanPanitium, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TRencanaKegiatanPanitium), nil
	}
}

func (t tRencanaKegiatanPanitiumDo) FirstOrCreate() (*model.TRencanaKegiatanPanitium, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TRencanaKegiatanPanitium), nil
	}
}

func (t tRencanaKegiatanPanitiumDo) FindByPage(offset int, limit int) (result []*model.TRencanaKegiatanPanitium, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tRencanaKegiatanPanitiumDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tRencanaKegiatanPanitiumDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tRencanaKegiatanPanitiumDo) Delete(models ...*model.TRencanaKegiatanPanitium) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tRencanaKegiatanPanitiumDo) withDO(do gen.Dao) *tRencanaKegiatanPanitiumDo {
	t.DO = *do.(*gen.DO)
	return t
}
