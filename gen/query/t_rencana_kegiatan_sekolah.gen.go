// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-bponline/m/gen/model"
)

func newTRencanaKegiatanSekolah(db *gorm.DB, opts ...gen.DOOption) tRencanaKegiatanSekolah {
	_tRencanaKegiatanSekolah := tRencanaKegiatanSekolah{}

	_tRencanaKegiatanSekolah.tRencanaKegiatanSekolahDo.UseDB(db, opts...)
	_tRencanaKegiatanSekolah.tRencanaKegiatanSekolahDo.UseModel(&model.TRencanaKegiatanSekolah{})

	tableName := _tRencanaKegiatanSekolah.tRencanaKegiatanSekolahDo.TableName()
	_tRencanaKegiatanSekolah.ALL = field.NewAsterisk(tableName)
	_tRencanaKegiatanSekolah.CKodeKegiatan = field.NewString(tableName, "c_kode_kegiatan")
	_tRencanaKegiatanSekolah.CIDSekolah = field.NewInt32(tableName, "c_id_sekolah")
	_tRencanaKegiatanSekolah.CTargetKehadiran = field.NewInt32(tableName, "c_target_kehadiran")
	_tRencanaKegiatanSekolah.CTargetCapaian = field.NewInt32(tableName, "c_target_capaian")
	_tRencanaKegiatanSekolah.CUpdater = field.NewString(tableName, "c_updater")
	_tRencanaKegiatanSekolah.CLastUpdate = field.NewTime(tableName, "c_last_update")

	_tRencanaKegiatanSekolah.fillFieldMap()

	return _tRencanaKegiatanSekolah
}

type tRencanaKegiatanSekolah struct {
	tRencanaKegiatanSekolahDo

	ALL              field.Asterisk
	CKodeKegiatan    field.String
	CIDSekolah       field.Int32
	CTargetKehadiran field.Int32
	CTargetCapaian   field.Int32
	CUpdater         field.String
	CLastUpdate      field.Time

	fieldMap map[string]field.Expr
}

func (t tRencanaKegiatanSekolah) Table(newTableName string) *tRencanaKegiatanSekolah {
	t.tRencanaKegiatanSekolahDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tRencanaKegiatanSekolah) As(alias string) *tRencanaKegiatanSekolah {
	t.tRencanaKegiatanSekolahDo.DO = *(t.tRencanaKegiatanSekolahDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tRencanaKegiatanSekolah) updateTableName(table string) *tRencanaKegiatanSekolah {
	t.ALL = field.NewAsterisk(table)
	t.CKodeKegiatan = field.NewString(table, "c_kode_kegiatan")
	t.CIDSekolah = field.NewInt32(table, "c_id_sekolah")
	t.CTargetKehadiran = field.NewInt32(table, "c_target_kehadiran")
	t.CTargetCapaian = field.NewInt32(table, "c_target_capaian")
	t.CUpdater = field.NewString(table, "c_updater")
	t.CLastUpdate = field.NewTime(table, "c_last_update")

	t.fillFieldMap()

	return t
}

func (t *tRencanaKegiatanSekolah) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tRencanaKegiatanSekolah) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 6)
	t.fieldMap["c_kode_kegiatan"] = t.CKodeKegiatan
	t.fieldMap["c_id_sekolah"] = t.CIDSekolah
	t.fieldMap["c_target_kehadiran"] = t.CTargetKehadiran
	t.fieldMap["c_target_capaian"] = t.CTargetCapaian
	t.fieldMap["c_updater"] = t.CUpdater
	t.fieldMap["c_last_update"] = t.CLastUpdate
}

func (t tRencanaKegiatanSekolah) clone(db *gorm.DB) tRencanaKegiatanSekolah {
	t.tRencanaKegiatanSekolahDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tRencanaKegiatanSekolah) replaceDB(db *gorm.DB) tRencanaKegiatanSekolah {
	t.tRencanaKegiatanSekolahDo.ReplaceDB(db)
	return t
}

type tRencanaKegiatanSekolahDo struct{ gen.DO }

type ITRencanaKegiatanSekolahDo interface {
	gen.SubQuery
	Debug() ITRencanaKegiatanSekolahDo
	WithContext(ctx context.Context) ITRencanaKegiatanSekolahDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITRencanaKegiatanSekolahDo
	WriteDB() ITRencanaKegiatanSekolahDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITRencanaKegiatanSekolahDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITRencanaKegiatanSekolahDo
	Not(conds ...gen.Condition) ITRencanaKegiatanSekolahDo
	Or(conds ...gen.Condition) ITRencanaKegiatanSekolahDo
	Select(conds ...field.Expr) ITRencanaKegiatanSekolahDo
	Where(conds ...gen.Condition) ITRencanaKegiatanSekolahDo
	Order(conds ...field.Expr) ITRencanaKegiatanSekolahDo
	Distinct(cols ...field.Expr) ITRencanaKegiatanSekolahDo
	Omit(cols ...field.Expr) ITRencanaKegiatanSekolahDo
	Join(table schema.Tabler, on ...field.Expr) ITRencanaKegiatanSekolahDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITRencanaKegiatanSekolahDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITRencanaKegiatanSekolahDo
	Group(cols ...field.Expr) ITRencanaKegiatanSekolahDo
	Having(conds ...gen.Condition) ITRencanaKegiatanSekolahDo
	Limit(limit int) ITRencanaKegiatanSekolahDo
	Offset(offset int) ITRencanaKegiatanSekolahDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITRencanaKegiatanSekolahDo
	Unscoped() ITRencanaKegiatanSekolahDo
	Create(values ...*model.TRencanaKegiatanSekolah) error
	CreateInBatches(values []*model.TRencanaKegiatanSekolah, batchSize int) error
	Save(values ...*model.TRencanaKegiatanSekolah) error
	First() (*model.TRencanaKegiatanSekolah, error)
	Take() (*model.TRencanaKegiatanSekolah, error)
	Last() (*model.TRencanaKegiatanSekolah, error)
	Find() ([]*model.TRencanaKegiatanSekolah, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TRencanaKegiatanSekolah, err error)
	FindInBatches(result *[]*model.TRencanaKegiatanSekolah, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TRencanaKegiatanSekolah) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITRencanaKegiatanSekolahDo
	Assign(attrs ...field.AssignExpr) ITRencanaKegiatanSekolahDo
	Joins(fields ...field.RelationField) ITRencanaKegiatanSekolahDo
	Preload(fields ...field.RelationField) ITRencanaKegiatanSekolahDo
	FirstOrInit() (*model.TRencanaKegiatanSekolah, error)
	FirstOrCreate() (*model.TRencanaKegiatanSekolah, error)
	FindByPage(offset int, limit int) (result []*model.TRencanaKegiatanSekolah, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITRencanaKegiatanSekolahDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tRencanaKegiatanSekolahDo) Debug() ITRencanaKegiatanSekolahDo {
	return t.withDO(t.DO.Debug())
}

func (t tRencanaKegiatanSekolahDo) WithContext(ctx context.Context) ITRencanaKegiatanSekolahDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tRencanaKegiatanSekolahDo) ReadDB() ITRencanaKegiatanSekolahDo {
	return t.Clauses(dbresolver.Read)
}

func (t tRencanaKegiatanSekolahDo) WriteDB() ITRencanaKegiatanSekolahDo {
	return t.Clauses(dbresolver.Write)
}

func (t tRencanaKegiatanSekolahDo) Session(config *gorm.Session) ITRencanaKegiatanSekolahDo {
	return t.withDO(t.DO.Session(config))
}

func (t tRencanaKegiatanSekolahDo) Clauses(conds ...clause.Expression) ITRencanaKegiatanSekolahDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tRencanaKegiatanSekolahDo) Returning(value interface{}, columns ...string) ITRencanaKegiatanSekolahDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tRencanaKegiatanSekolahDo) Not(conds ...gen.Condition) ITRencanaKegiatanSekolahDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tRencanaKegiatanSekolahDo) Or(conds ...gen.Condition) ITRencanaKegiatanSekolahDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tRencanaKegiatanSekolahDo) Select(conds ...field.Expr) ITRencanaKegiatanSekolahDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tRencanaKegiatanSekolahDo) Where(conds ...gen.Condition) ITRencanaKegiatanSekolahDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tRencanaKegiatanSekolahDo) Order(conds ...field.Expr) ITRencanaKegiatanSekolahDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tRencanaKegiatanSekolahDo) Distinct(cols ...field.Expr) ITRencanaKegiatanSekolahDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tRencanaKegiatanSekolahDo) Omit(cols ...field.Expr) ITRencanaKegiatanSekolahDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tRencanaKegiatanSekolahDo) Join(table schema.Tabler, on ...field.Expr) ITRencanaKegiatanSekolahDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tRencanaKegiatanSekolahDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITRencanaKegiatanSekolahDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tRencanaKegiatanSekolahDo) RightJoin(table schema.Tabler, on ...field.Expr) ITRencanaKegiatanSekolahDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tRencanaKegiatanSekolahDo) Group(cols ...field.Expr) ITRencanaKegiatanSekolahDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tRencanaKegiatanSekolahDo) Having(conds ...gen.Condition) ITRencanaKegiatanSekolahDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tRencanaKegiatanSekolahDo) Limit(limit int) ITRencanaKegiatanSekolahDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tRencanaKegiatanSekolahDo) Offset(offset int) ITRencanaKegiatanSekolahDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tRencanaKegiatanSekolahDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITRencanaKegiatanSekolahDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tRencanaKegiatanSekolahDo) Unscoped() ITRencanaKegiatanSekolahDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tRencanaKegiatanSekolahDo) Create(values ...*model.TRencanaKegiatanSekolah) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tRencanaKegiatanSekolahDo) CreateInBatches(values []*model.TRencanaKegiatanSekolah, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tRencanaKegiatanSekolahDo) Save(values ...*model.TRencanaKegiatanSekolah) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tRencanaKegiatanSekolahDo) First() (*model.TRencanaKegiatanSekolah, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TRencanaKegiatanSekolah), nil
	}
}

func (t tRencanaKegiatanSekolahDo) Take() (*model.TRencanaKegiatanSekolah, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TRencanaKegiatanSekolah), nil
	}
}

func (t tRencanaKegiatanSekolahDo) Last() (*model.TRencanaKegiatanSekolah, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TRencanaKegiatanSekolah), nil
	}
}

func (t tRencanaKegiatanSekolahDo) Find() ([]*model.TRencanaKegiatanSekolah, error) {
	result, err := t.DO.Find()
	return result.([]*model.TRencanaKegiatanSekolah), err
}

func (t tRencanaKegiatanSekolahDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TRencanaKegiatanSekolah, err error) {
	buf := make([]*model.TRencanaKegiatanSekolah, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tRencanaKegiatanSekolahDo) FindInBatches(result *[]*model.TRencanaKegiatanSekolah, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tRencanaKegiatanSekolahDo) Attrs(attrs ...field.AssignExpr) ITRencanaKegiatanSekolahDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tRencanaKegiatanSekolahDo) Assign(attrs ...field.AssignExpr) ITRencanaKegiatanSekolahDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tRencanaKegiatanSekolahDo) Joins(fields ...field.RelationField) ITRencanaKegiatanSekolahDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tRencanaKegiatanSekolahDo) Preload(fields ...field.RelationField) ITRencanaKegiatanSekolahDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tRencanaKegiatanSekolahDo) FirstOrInit() (*model.TRencanaKegiatanSekolah, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TRencanaKegiatanSekolah), nil
	}
}

func (t tRencanaKegiatanSekolahDo) FirstOrCreate() (*model.TRencanaKegiatanSekolah, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TRencanaKegiatanSekolah), nil
	}
}

func (t tRencanaKegiatanSekolahDo) FindByPage(offset int, limit int) (result []*model.TRencanaKegiatanSekolah, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tRencanaKegiatanSekolahDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tRencanaKegiatanSekolahDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tRencanaKegiatanSekolahDo) Delete(models ...*model.TRencanaKegiatanSekolah) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tRencanaKegiatanSekolahDo) withDO(do gen.Dao) *tRencanaKegiatanSekolahDo {
	t.DO = *do.(*gen.DO)
	return t
}
