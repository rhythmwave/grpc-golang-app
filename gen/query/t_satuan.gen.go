// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-bponline/m/gen/model"
)

func newTSatuan(db *gorm.DB, opts ...gen.DOOption) tSatuan {
	_tSatuan := tSatuan{}

	_tSatuan.tSatuanDo.UseDB(db, opts...)
	_tSatuan.tSatuanDo.UseModel(&model.TSatuan{})

	tableName := _tSatuan.tSatuanDo.TableName()
	_tSatuan.ALL = field.NewAsterisk(tableName)
	_tSatuan.CIDSatuan = field.NewInt32(tableName, "c_id_satuan")
	_tSatuan.CSatuan = field.NewString(tableName, "c_satuan")
	_tSatuan.CStatus = field.NewString(tableName, "c_status")
	_tSatuan.CUpdater = field.NewString(tableName, "c_updater")
	_tSatuan.CLastUpdate = field.NewTime(tableName, "c_last_update")

	_tSatuan.fillFieldMap()

	return _tSatuan
}

type tSatuan struct {
	tSatuanDo

	ALL         field.Asterisk
	CIDSatuan   field.Int32
	CSatuan     field.String
	CStatus     field.String
	CUpdater    field.String
	CLastUpdate field.Time

	fieldMap map[string]field.Expr
}

func (t tSatuan) Table(newTableName string) *tSatuan {
	t.tSatuanDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tSatuan) As(alias string) *tSatuan {
	t.tSatuanDo.DO = *(t.tSatuanDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tSatuan) updateTableName(table string) *tSatuan {
	t.ALL = field.NewAsterisk(table)
	t.CIDSatuan = field.NewInt32(table, "c_id_satuan")
	t.CSatuan = field.NewString(table, "c_satuan")
	t.CStatus = field.NewString(table, "c_status")
	t.CUpdater = field.NewString(table, "c_updater")
	t.CLastUpdate = field.NewTime(table, "c_last_update")

	t.fillFieldMap()

	return t
}

func (t *tSatuan) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tSatuan) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 5)
	t.fieldMap["c_id_satuan"] = t.CIDSatuan
	t.fieldMap["c_satuan"] = t.CSatuan
	t.fieldMap["c_status"] = t.CStatus
	t.fieldMap["c_updater"] = t.CUpdater
	t.fieldMap["c_last_update"] = t.CLastUpdate
}

func (t tSatuan) clone(db *gorm.DB) tSatuan {
	t.tSatuanDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tSatuan) replaceDB(db *gorm.DB) tSatuan {
	t.tSatuanDo.ReplaceDB(db)
	return t
}

type tSatuanDo struct{ gen.DO }

type ITSatuanDo interface {
	gen.SubQuery
	Debug() ITSatuanDo
	WithContext(ctx context.Context) ITSatuanDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITSatuanDo
	WriteDB() ITSatuanDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITSatuanDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITSatuanDo
	Not(conds ...gen.Condition) ITSatuanDo
	Or(conds ...gen.Condition) ITSatuanDo
	Select(conds ...field.Expr) ITSatuanDo
	Where(conds ...gen.Condition) ITSatuanDo
	Order(conds ...field.Expr) ITSatuanDo
	Distinct(cols ...field.Expr) ITSatuanDo
	Omit(cols ...field.Expr) ITSatuanDo
	Join(table schema.Tabler, on ...field.Expr) ITSatuanDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITSatuanDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITSatuanDo
	Group(cols ...field.Expr) ITSatuanDo
	Having(conds ...gen.Condition) ITSatuanDo
	Limit(limit int) ITSatuanDo
	Offset(offset int) ITSatuanDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITSatuanDo
	Unscoped() ITSatuanDo
	Create(values ...*model.TSatuan) error
	CreateInBatches(values []*model.TSatuan, batchSize int) error
	Save(values ...*model.TSatuan) error
	First() (*model.TSatuan, error)
	Take() (*model.TSatuan, error)
	Last() (*model.TSatuan, error)
	Find() ([]*model.TSatuan, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TSatuan, err error)
	FindInBatches(result *[]*model.TSatuan, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TSatuan) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITSatuanDo
	Assign(attrs ...field.AssignExpr) ITSatuanDo
	Joins(fields ...field.RelationField) ITSatuanDo
	Preload(fields ...field.RelationField) ITSatuanDo
	FirstOrInit() (*model.TSatuan, error)
	FirstOrCreate() (*model.TSatuan, error)
	FindByPage(offset int, limit int) (result []*model.TSatuan, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITSatuanDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tSatuanDo) Debug() ITSatuanDo {
	return t.withDO(t.DO.Debug())
}

func (t tSatuanDo) WithContext(ctx context.Context) ITSatuanDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tSatuanDo) ReadDB() ITSatuanDo {
	return t.Clauses(dbresolver.Read)
}

func (t tSatuanDo) WriteDB() ITSatuanDo {
	return t.Clauses(dbresolver.Write)
}

func (t tSatuanDo) Session(config *gorm.Session) ITSatuanDo {
	return t.withDO(t.DO.Session(config))
}

func (t tSatuanDo) Clauses(conds ...clause.Expression) ITSatuanDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tSatuanDo) Returning(value interface{}, columns ...string) ITSatuanDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tSatuanDo) Not(conds ...gen.Condition) ITSatuanDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tSatuanDo) Or(conds ...gen.Condition) ITSatuanDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tSatuanDo) Select(conds ...field.Expr) ITSatuanDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tSatuanDo) Where(conds ...gen.Condition) ITSatuanDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tSatuanDo) Order(conds ...field.Expr) ITSatuanDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tSatuanDo) Distinct(cols ...field.Expr) ITSatuanDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tSatuanDo) Omit(cols ...field.Expr) ITSatuanDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tSatuanDo) Join(table schema.Tabler, on ...field.Expr) ITSatuanDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tSatuanDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITSatuanDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tSatuanDo) RightJoin(table schema.Tabler, on ...field.Expr) ITSatuanDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tSatuanDo) Group(cols ...field.Expr) ITSatuanDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tSatuanDo) Having(conds ...gen.Condition) ITSatuanDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tSatuanDo) Limit(limit int) ITSatuanDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tSatuanDo) Offset(offset int) ITSatuanDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tSatuanDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITSatuanDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tSatuanDo) Unscoped() ITSatuanDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tSatuanDo) Create(values ...*model.TSatuan) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tSatuanDo) CreateInBatches(values []*model.TSatuan, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tSatuanDo) Save(values ...*model.TSatuan) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tSatuanDo) First() (*model.TSatuan, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSatuan), nil
	}
}

func (t tSatuanDo) Take() (*model.TSatuan, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSatuan), nil
	}
}

func (t tSatuanDo) Last() (*model.TSatuan, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSatuan), nil
	}
}

func (t tSatuanDo) Find() ([]*model.TSatuan, error) {
	result, err := t.DO.Find()
	return result.([]*model.TSatuan), err
}

func (t tSatuanDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TSatuan, err error) {
	buf := make([]*model.TSatuan, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tSatuanDo) FindInBatches(result *[]*model.TSatuan, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tSatuanDo) Attrs(attrs ...field.AssignExpr) ITSatuanDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tSatuanDo) Assign(attrs ...field.AssignExpr) ITSatuanDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tSatuanDo) Joins(fields ...field.RelationField) ITSatuanDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tSatuanDo) Preload(fields ...field.RelationField) ITSatuanDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tSatuanDo) FirstOrInit() (*model.TSatuan, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSatuan), nil
	}
}

func (t tSatuanDo) FirstOrCreate() (*model.TSatuan, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSatuan), nil
	}
}

func (t tSatuanDo) FindByPage(offset int, limit int) (result []*model.TSatuan, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tSatuanDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tSatuanDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tSatuanDo) Delete(models ...*model.TSatuan) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tSatuanDo) withDO(do gen.Dao) *tSatuanDo {
	t.DO = *do.(*gen.DO)
	return t
}
