// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-bponline/m/gen/model"
)

func newTSatuanBarang(db *gorm.DB, opts ...gen.DOOption) tSatuanBarang {
	_tSatuanBarang := tSatuanBarang{}

	_tSatuanBarang.tSatuanBarangDo.UseDB(db, opts...)
	_tSatuanBarang.tSatuanBarangDo.UseModel(&model.TSatuanBarang{})

	tableName := _tSatuanBarang.tSatuanBarangDo.TableName()
	_tSatuanBarang.ALL = field.NewAsterisk(tableName)
	_tSatuanBarang.CKodeBarang = field.NewString(tableName, "c_kode_barang")
	_tSatuanBarang.CIDSatuan = field.NewInt32(tableName, "c_id_satuan")
	_tSatuanBarang.CUpdater = field.NewString(tableName, "c_updater")
	_tSatuanBarang.CLastUpdate = field.NewTime(tableName, "c_last_update")

	_tSatuanBarang.fillFieldMap()

	return _tSatuanBarang
}

type tSatuanBarang struct {
	tSatuanBarangDo

	ALL         field.Asterisk
	CKodeBarang field.String
	CIDSatuan   field.Int32
	CUpdater    field.String
	CLastUpdate field.Time

	fieldMap map[string]field.Expr
}

func (t tSatuanBarang) Table(newTableName string) *tSatuanBarang {
	t.tSatuanBarangDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tSatuanBarang) As(alias string) *tSatuanBarang {
	t.tSatuanBarangDo.DO = *(t.tSatuanBarangDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tSatuanBarang) updateTableName(table string) *tSatuanBarang {
	t.ALL = field.NewAsterisk(table)
	t.CKodeBarang = field.NewString(table, "c_kode_barang")
	t.CIDSatuan = field.NewInt32(table, "c_id_satuan")
	t.CUpdater = field.NewString(table, "c_updater")
	t.CLastUpdate = field.NewTime(table, "c_last_update")

	t.fillFieldMap()

	return t
}

func (t *tSatuanBarang) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tSatuanBarang) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 4)
	t.fieldMap["c_kode_barang"] = t.CKodeBarang
	t.fieldMap["c_id_satuan"] = t.CIDSatuan
	t.fieldMap["c_updater"] = t.CUpdater
	t.fieldMap["c_last_update"] = t.CLastUpdate
}

func (t tSatuanBarang) clone(db *gorm.DB) tSatuanBarang {
	t.tSatuanBarangDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tSatuanBarang) replaceDB(db *gorm.DB) tSatuanBarang {
	t.tSatuanBarangDo.ReplaceDB(db)
	return t
}

type tSatuanBarangDo struct{ gen.DO }

type ITSatuanBarangDo interface {
	gen.SubQuery
	Debug() ITSatuanBarangDo
	WithContext(ctx context.Context) ITSatuanBarangDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITSatuanBarangDo
	WriteDB() ITSatuanBarangDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITSatuanBarangDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITSatuanBarangDo
	Not(conds ...gen.Condition) ITSatuanBarangDo
	Or(conds ...gen.Condition) ITSatuanBarangDo
	Select(conds ...field.Expr) ITSatuanBarangDo
	Where(conds ...gen.Condition) ITSatuanBarangDo
	Order(conds ...field.Expr) ITSatuanBarangDo
	Distinct(cols ...field.Expr) ITSatuanBarangDo
	Omit(cols ...field.Expr) ITSatuanBarangDo
	Join(table schema.Tabler, on ...field.Expr) ITSatuanBarangDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITSatuanBarangDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITSatuanBarangDo
	Group(cols ...field.Expr) ITSatuanBarangDo
	Having(conds ...gen.Condition) ITSatuanBarangDo
	Limit(limit int) ITSatuanBarangDo
	Offset(offset int) ITSatuanBarangDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITSatuanBarangDo
	Unscoped() ITSatuanBarangDo
	Create(values ...*model.TSatuanBarang) error
	CreateInBatches(values []*model.TSatuanBarang, batchSize int) error
	Save(values ...*model.TSatuanBarang) error
	First() (*model.TSatuanBarang, error)
	Take() (*model.TSatuanBarang, error)
	Last() (*model.TSatuanBarang, error)
	Find() ([]*model.TSatuanBarang, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TSatuanBarang, err error)
	FindInBatches(result *[]*model.TSatuanBarang, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TSatuanBarang) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITSatuanBarangDo
	Assign(attrs ...field.AssignExpr) ITSatuanBarangDo
	Joins(fields ...field.RelationField) ITSatuanBarangDo
	Preload(fields ...field.RelationField) ITSatuanBarangDo
	FirstOrInit() (*model.TSatuanBarang, error)
	FirstOrCreate() (*model.TSatuanBarang, error)
	FindByPage(offset int, limit int) (result []*model.TSatuanBarang, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITSatuanBarangDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tSatuanBarangDo) Debug() ITSatuanBarangDo {
	return t.withDO(t.DO.Debug())
}

func (t tSatuanBarangDo) WithContext(ctx context.Context) ITSatuanBarangDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tSatuanBarangDo) ReadDB() ITSatuanBarangDo {
	return t.Clauses(dbresolver.Read)
}

func (t tSatuanBarangDo) WriteDB() ITSatuanBarangDo {
	return t.Clauses(dbresolver.Write)
}

func (t tSatuanBarangDo) Session(config *gorm.Session) ITSatuanBarangDo {
	return t.withDO(t.DO.Session(config))
}

func (t tSatuanBarangDo) Clauses(conds ...clause.Expression) ITSatuanBarangDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tSatuanBarangDo) Returning(value interface{}, columns ...string) ITSatuanBarangDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tSatuanBarangDo) Not(conds ...gen.Condition) ITSatuanBarangDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tSatuanBarangDo) Or(conds ...gen.Condition) ITSatuanBarangDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tSatuanBarangDo) Select(conds ...field.Expr) ITSatuanBarangDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tSatuanBarangDo) Where(conds ...gen.Condition) ITSatuanBarangDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tSatuanBarangDo) Order(conds ...field.Expr) ITSatuanBarangDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tSatuanBarangDo) Distinct(cols ...field.Expr) ITSatuanBarangDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tSatuanBarangDo) Omit(cols ...field.Expr) ITSatuanBarangDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tSatuanBarangDo) Join(table schema.Tabler, on ...field.Expr) ITSatuanBarangDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tSatuanBarangDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITSatuanBarangDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tSatuanBarangDo) RightJoin(table schema.Tabler, on ...field.Expr) ITSatuanBarangDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tSatuanBarangDo) Group(cols ...field.Expr) ITSatuanBarangDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tSatuanBarangDo) Having(conds ...gen.Condition) ITSatuanBarangDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tSatuanBarangDo) Limit(limit int) ITSatuanBarangDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tSatuanBarangDo) Offset(offset int) ITSatuanBarangDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tSatuanBarangDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITSatuanBarangDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tSatuanBarangDo) Unscoped() ITSatuanBarangDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tSatuanBarangDo) Create(values ...*model.TSatuanBarang) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tSatuanBarangDo) CreateInBatches(values []*model.TSatuanBarang, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tSatuanBarangDo) Save(values ...*model.TSatuanBarang) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tSatuanBarangDo) First() (*model.TSatuanBarang, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSatuanBarang), nil
	}
}

func (t tSatuanBarangDo) Take() (*model.TSatuanBarang, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSatuanBarang), nil
	}
}

func (t tSatuanBarangDo) Last() (*model.TSatuanBarang, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSatuanBarang), nil
	}
}

func (t tSatuanBarangDo) Find() ([]*model.TSatuanBarang, error) {
	result, err := t.DO.Find()
	return result.([]*model.TSatuanBarang), err
}

func (t tSatuanBarangDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TSatuanBarang, err error) {
	buf := make([]*model.TSatuanBarang, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tSatuanBarangDo) FindInBatches(result *[]*model.TSatuanBarang, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tSatuanBarangDo) Attrs(attrs ...field.AssignExpr) ITSatuanBarangDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tSatuanBarangDo) Assign(attrs ...field.AssignExpr) ITSatuanBarangDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tSatuanBarangDo) Joins(fields ...field.RelationField) ITSatuanBarangDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tSatuanBarangDo) Preload(fields ...field.RelationField) ITSatuanBarangDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tSatuanBarangDo) FirstOrInit() (*model.TSatuanBarang, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSatuanBarang), nil
	}
}

func (t tSatuanBarangDo) FirstOrCreate() (*model.TSatuanBarang, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSatuanBarang), nil
	}
}

func (t tSatuanBarangDo) FindByPage(offset int, limit int) (result []*model.TSatuanBarang, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tSatuanBarangDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tSatuanBarangDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tSatuanBarangDo) Delete(models ...*model.TSatuanBarang) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tSatuanBarangDo) withDO(do gen.Dao) *tSatuanBarangDo {
	t.DO = *do.(*gen.DO)
	return t
}
