// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-bponline/m/gen/model"
)

func newTSekolahCakupan(db *gorm.DB, opts ...gen.DOOption) tSekolahCakupan {
	_tSekolahCakupan := tSekolahCakupan{}

	_tSekolahCakupan.tSekolahCakupanDo.UseDB(db, opts...)
	_tSekolahCakupan.tSekolahCakupanDo.UseModel(&model.TSekolahCakupan{})

	tableName := _tSekolahCakupan.tSekolahCakupanDo.TableName()
	_tSekolahCakupan.ALL = field.NewAsterisk(tableName)
	_tSekolahCakupan.CIDCakupan = field.NewInt32(tableName, "c_id_cakupan")
	_tSekolahCakupan.CIDSekolah = field.NewInt32(tableName, "c_id_sekolah")
	_tSekolahCakupan.CIDGedung = field.NewInt32(tableName, "c_id_gedung")
	_tSekolahCakupan.CStatus = field.NewString(tableName, "c_status")
	_tSekolahCakupan.CUpdater = field.NewString(tableName, "c_updater")
	_tSekolahCakupan.CLastUpdate = field.NewTime(tableName, "c_last_update")

	_tSekolahCakupan.fillFieldMap()

	return _tSekolahCakupan
}

type tSekolahCakupan struct {
	tSekolahCakupanDo

	ALL         field.Asterisk
	CIDCakupan  field.Int32
	CIDSekolah  field.Int32
	CIDGedung   field.Int32
	CStatus     field.String
	CUpdater    field.String
	CLastUpdate field.Time

	fieldMap map[string]field.Expr
}

func (t tSekolahCakupan) Table(newTableName string) *tSekolahCakupan {
	t.tSekolahCakupanDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tSekolahCakupan) As(alias string) *tSekolahCakupan {
	t.tSekolahCakupanDo.DO = *(t.tSekolahCakupanDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tSekolahCakupan) updateTableName(table string) *tSekolahCakupan {
	t.ALL = field.NewAsterisk(table)
	t.CIDCakupan = field.NewInt32(table, "c_id_cakupan")
	t.CIDSekolah = field.NewInt32(table, "c_id_sekolah")
	t.CIDGedung = field.NewInt32(table, "c_id_gedung")
	t.CStatus = field.NewString(table, "c_status")
	t.CUpdater = field.NewString(table, "c_updater")
	t.CLastUpdate = field.NewTime(table, "c_last_update")

	t.fillFieldMap()

	return t
}

func (t *tSekolahCakupan) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tSekolahCakupan) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 6)
	t.fieldMap["c_id_cakupan"] = t.CIDCakupan
	t.fieldMap["c_id_sekolah"] = t.CIDSekolah
	t.fieldMap["c_id_gedung"] = t.CIDGedung
	t.fieldMap["c_status"] = t.CStatus
	t.fieldMap["c_updater"] = t.CUpdater
	t.fieldMap["c_last_update"] = t.CLastUpdate
}

func (t tSekolahCakupan) clone(db *gorm.DB) tSekolahCakupan {
	t.tSekolahCakupanDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tSekolahCakupan) replaceDB(db *gorm.DB) tSekolahCakupan {
	t.tSekolahCakupanDo.ReplaceDB(db)
	return t
}

type tSekolahCakupanDo struct{ gen.DO }

type ITSekolahCakupanDo interface {
	gen.SubQuery
	Debug() ITSekolahCakupanDo
	WithContext(ctx context.Context) ITSekolahCakupanDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITSekolahCakupanDo
	WriteDB() ITSekolahCakupanDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITSekolahCakupanDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITSekolahCakupanDo
	Not(conds ...gen.Condition) ITSekolahCakupanDo
	Or(conds ...gen.Condition) ITSekolahCakupanDo
	Select(conds ...field.Expr) ITSekolahCakupanDo
	Where(conds ...gen.Condition) ITSekolahCakupanDo
	Order(conds ...field.Expr) ITSekolahCakupanDo
	Distinct(cols ...field.Expr) ITSekolahCakupanDo
	Omit(cols ...field.Expr) ITSekolahCakupanDo
	Join(table schema.Tabler, on ...field.Expr) ITSekolahCakupanDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITSekolahCakupanDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITSekolahCakupanDo
	Group(cols ...field.Expr) ITSekolahCakupanDo
	Having(conds ...gen.Condition) ITSekolahCakupanDo
	Limit(limit int) ITSekolahCakupanDo
	Offset(offset int) ITSekolahCakupanDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITSekolahCakupanDo
	Unscoped() ITSekolahCakupanDo
	Create(values ...*model.TSekolahCakupan) error
	CreateInBatches(values []*model.TSekolahCakupan, batchSize int) error
	Save(values ...*model.TSekolahCakupan) error
	First() (*model.TSekolahCakupan, error)
	Take() (*model.TSekolahCakupan, error)
	Last() (*model.TSekolahCakupan, error)
	Find() ([]*model.TSekolahCakupan, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TSekolahCakupan, err error)
	FindInBatches(result *[]*model.TSekolahCakupan, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TSekolahCakupan) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITSekolahCakupanDo
	Assign(attrs ...field.AssignExpr) ITSekolahCakupanDo
	Joins(fields ...field.RelationField) ITSekolahCakupanDo
	Preload(fields ...field.RelationField) ITSekolahCakupanDo
	FirstOrInit() (*model.TSekolahCakupan, error)
	FirstOrCreate() (*model.TSekolahCakupan, error)
	FindByPage(offset int, limit int) (result []*model.TSekolahCakupan, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITSekolahCakupanDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tSekolahCakupanDo) Debug() ITSekolahCakupanDo {
	return t.withDO(t.DO.Debug())
}

func (t tSekolahCakupanDo) WithContext(ctx context.Context) ITSekolahCakupanDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tSekolahCakupanDo) ReadDB() ITSekolahCakupanDo {
	return t.Clauses(dbresolver.Read)
}

func (t tSekolahCakupanDo) WriteDB() ITSekolahCakupanDo {
	return t.Clauses(dbresolver.Write)
}

func (t tSekolahCakupanDo) Session(config *gorm.Session) ITSekolahCakupanDo {
	return t.withDO(t.DO.Session(config))
}

func (t tSekolahCakupanDo) Clauses(conds ...clause.Expression) ITSekolahCakupanDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tSekolahCakupanDo) Returning(value interface{}, columns ...string) ITSekolahCakupanDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tSekolahCakupanDo) Not(conds ...gen.Condition) ITSekolahCakupanDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tSekolahCakupanDo) Or(conds ...gen.Condition) ITSekolahCakupanDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tSekolahCakupanDo) Select(conds ...field.Expr) ITSekolahCakupanDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tSekolahCakupanDo) Where(conds ...gen.Condition) ITSekolahCakupanDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tSekolahCakupanDo) Order(conds ...field.Expr) ITSekolahCakupanDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tSekolahCakupanDo) Distinct(cols ...field.Expr) ITSekolahCakupanDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tSekolahCakupanDo) Omit(cols ...field.Expr) ITSekolahCakupanDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tSekolahCakupanDo) Join(table schema.Tabler, on ...field.Expr) ITSekolahCakupanDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tSekolahCakupanDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITSekolahCakupanDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tSekolahCakupanDo) RightJoin(table schema.Tabler, on ...field.Expr) ITSekolahCakupanDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tSekolahCakupanDo) Group(cols ...field.Expr) ITSekolahCakupanDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tSekolahCakupanDo) Having(conds ...gen.Condition) ITSekolahCakupanDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tSekolahCakupanDo) Limit(limit int) ITSekolahCakupanDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tSekolahCakupanDo) Offset(offset int) ITSekolahCakupanDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tSekolahCakupanDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITSekolahCakupanDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tSekolahCakupanDo) Unscoped() ITSekolahCakupanDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tSekolahCakupanDo) Create(values ...*model.TSekolahCakupan) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tSekolahCakupanDo) CreateInBatches(values []*model.TSekolahCakupan, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tSekolahCakupanDo) Save(values ...*model.TSekolahCakupan) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tSekolahCakupanDo) First() (*model.TSekolahCakupan, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSekolahCakupan), nil
	}
}

func (t tSekolahCakupanDo) Take() (*model.TSekolahCakupan, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSekolahCakupan), nil
	}
}

func (t tSekolahCakupanDo) Last() (*model.TSekolahCakupan, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSekolahCakupan), nil
	}
}

func (t tSekolahCakupanDo) Find() ([]*model.TSekolahCakupan, error) {
	result, err := t.DO.Find()
	return result.([]*model.TSekolahCakupan), err
}

func (t tSekolahCakupanDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TSekolahCakupan, err error) {
	buf := make([]*model.TSekolahCakupan, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tSekolahCakupanDo) FindInBatches(result *[]*model.TSekolahCakupan, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tSekolahCakupanDo) Attrs(attrs ...field.AssignExpr) ITSekolahCakupanDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tSekolahCakupanDo) Assign(attrs ...field.AssignExpr) ITSekolahCakupanDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tSekolahCakupanDo) Joins(fields ...field.RelationField) ITSekolahCakupanDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tSekolahCakupanDo) Preload(fields ...field.RelationField) ITSekolahCakupanDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tSekolahCakupanDo) FirstOrInit() (*model.TSekolahCakupan, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSekolahCakupan), nil
	}
}

func (t tSekolahCakupanDo) FirstOrCreate() (*model.TSekolahCakupan, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSekolahCakupan), nil
	}
}

func (t tSekolahCakupanDo) FindByPage(offset int, limit int) (result []*model.TSekolahCakupan, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tSekolahCakupanDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tSekolahCakupanDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tSekolahCakupanDo) Delete(models ...*model.TSekolahCakupan) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tSekolahCakupanDo) withDO(do gen.Dao) *tSekolahCakupanDo {
	t.DO = *do.(*gen.DO)
	return t
}
