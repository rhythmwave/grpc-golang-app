// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-bponline/m/gen/model"
)

func newTSekolahPerProgram(db *gorm.DB, opts ...gen.DOOption) tSekolahPerProgram {
	_tSekolahPerProgram := tSekolahPerProgram{}

	_tSekolahPerProgram.tSekolahPerProgramDo.UseDB(db, opts...)
	_tSekolahPerProgram.tSekolahPerProgramDo.UseModel(&model.TSekolahPerProgram{})

	tableName := _tSekolahPerProgram.tSekolahPerProgramDo.TableName()
	_tSekolahPerProgram.ALL = field.NewAsterisk(tableName)
	_tSekolahPerProgram.CIDJenisKelas = field.NewInt32(tableName, "c_id_jenis_kelas")
	_tSekolahPerProgram.CTahunAjaran = field.NewString(tableName, "c_tahun_ajaran")
	_tSekolahPerProgram.CIDSekolah = field.NewInt32(tableName, "c_id_sekolah")
	_tSekolahPerProgram.CIDGedung = field.NewInt32(tableName, "c_id_gedung")
	_tSekolahPerProgram.CIDTingkat = field.NewInt32(tableName, "c_id_tingkat")
	_tSekolahPerProgram.CJumlahTargetProgram = field.NewInt32(tableName, "c_jumlah_target_program")
	_tSekolahPerProgram.CWaktu = field.NewString(tableName, "c_waktu")
	_tSekolahPerProgram.CUpdater = field.NewString(tableName, "c_updater")
	_tSekolahPerProgram.CLastUpdate = field.NewTime(tableName, "c_last_update")
	_tSekolahPerProgram.CIsKerjaSama = field.NewString(tableName, "c_is_kerja_sama")
	_tSekolahPerProgram.CStatus = field.NewString(tableName, "c_status")
	_tSekolahPerProgram.CIsOnline = field.NewString(tableName, "c_is_online")
	_tSekolahPerProgram.CHargaBp = field.NewFloat64(tableName, "c_harga_bp")

	_tSekolahPerProgram.fillFieldMap()

	return _tSekolahPerProgram
}

type tSekolahPerProgram struct {
	tSekolahPerProgramDo

	ALL                  field.Asterisk
	CIDJenisKelas        field.Int32
	CTahunAjaran         field.String
	CIDSekolah           field.Int32
	CIDGedung            field.Int32
	CIDTingkat           field.Int32
	CJumlahTargetProgram field.Int32
	CWaktu               field.String
	CUpdater             field.String
	CLastUpdate          field.Time
	CIsKerjaSama         field.String
	CStatus              field.String
	CIsOnline            field.String
	CHargaBp             field.Float64

	fieldMap map[string]field.Expr
}

func (t tSekolahPerProgram) Table(newTableName string) *tSekolahPerProgram {
	t.tSekolahPerProgramDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tSekolahPerProgram) As(alias string) *tSekolahPerProgram {
	t.tSekolahPerProgramDo.DO = *(t.tSekolahPerProgramDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tSekolahPerProgram) updateTableName(table string) *tSekolahPerProgram {
	t.ALL = field.NewAsterisk(table)
	t.CIDJenisKelas = field.NewInt32(table, "c_id_jenis_kelas")
	t.CTahunAjaran = field.NewString(table, "c_tahun_ajaran")
	t.CIDSekolah = field.NewInt32(table, "c_id_sekolah")
	t.CIDGedung = field.NewInt32(table, "c_id_gedung")
	t.CIDTingkat = field.NewInt32(table, "c_id_tingkat")
	t.CJumlahTargetProgram = field.NewInt32(table, "c_jumlah_target_program")
	t.CWaktu = field.NewString(table, "c_waktu")
	t.CUpdater = field.NewString(table, "c_updater")
	t.CLastUpdate = field.NewTime(table, "c_last_update")
	t.CIsKerjaSama = field.NewString(table, "c_is_kerja_sama")
	t.CStatus = field.NewString(table, "c_status")
	t.CIsOnline = field.NewString(table, "c_is_online")
	t.CHargaBp = field.NewFloat64(table, "c_harga_bp")

	t.fillFieldMap()

	return t
}

func (t *tSekolahPerProgram) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tSekolahPerProgram) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 13)
	t.fieldMap["c_id_jenis_kelas"] = t.CIDJenisKelas
	t.fieldMap["c_tahun_ajaran"] = t.CTahunAjaran
	t.fieldMap["c_id_sekolah"] = t.CIDSekolah
	t.fieldMap["c_id_gedung"] = t.CIDGedung
	t.fieldMap["c_id_tingkat"] = t.CIDTingkat
	t.fieldMap["c_jumlah_target_program"] = t.CJumlahTargetProgram
	t.fieldMap["c_waktu"] = t.CWaktu
	t.fieldMap["c_updater"] = t.CUpdater
	t.fieldMap["c_last_update"] = t.CLastUpdate
	t.fieldMap["c_is_kerja_sama"] = t.CIsKerjaSama
	t.fieldMap["c_status"] = t.CStatus
	t.fieldMap["c_is_online"] = t.CIsOnline
	t.fieldMap["c_harga_bp"] = t.CHargaBp
}

func (t tSekolahPerProgram) clone(db *gorm.DB) tSekolahPerProgram {
	t.tSekolahPerProgramDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tSekolahPerProgram) replaceDB(db *gorm.DB) tSekolahPerProgram {
	t.tSekolahPerProgramDo.ReplaceDB(db)
	return t
}

type tSekolahPerProgramDo struct{ gen.DO }

type ITSekolahPerProgramDo interface {
	gen.SubQuery
	Debug() ITSekolahPerProgramDo
	WithContext(ctx context.Context) ITSekolahPerProgramDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITSekolahPerProgramDo
	WriteDB() ITSekolahPerProgramDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITSekolahPerProgramDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITSekolahPerProgramDo
	Not(conds ...gen.Condition) ITSekolahPerProgramDo
	Or(conds ...gen.Condition) ITSekolahPerProgramDo
	Select(conds ...field.Expr) ITSekolahPerProgramDo
	Where(conds ...gen.Condition) ITSekolahPerProgramDo
	Order(conds ...field.Expr) ITSekolahPerProgramDo
	Distinct(cols ...field.Expr) ITSekolahPerProgramDo
	Omit(cols ...field.Expr) ITSekolahPerProgramDo
	Join(table schema.Tabler, on ...field.Expr) ITSekolahPerProgramDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITSekolahPerProgramDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITSekolahPerProgramDo
	Group(cols ...field.Expr) ITSekolahPerProgramDo
	Having(conds ...gen.Condition) ITSekolahPerProgramDo
	Limit(limit int) ITSekolahPerProgramDo
	Offset(offset int) ITSekolahPerProgramDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITSekolahPerProgramDo
	Unscoped() ITSekolahPerProgramDo
	Create(values ...*model.TSekolahPerProgram) error
	CreateInBatches(values []*model.TSekolahPerProgram, batchSize int) error
	Save(values ...*model.TSekolahPerProgram) error
	First() (*model.TSekolahPerProgram, error)
	Take() (*model.TSekolahPerProgram, error)
	Last() (*model.TSekolahPerProgram, error)
	Find() ([]*model.TSekolahPerProgram, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TSekolahPerProgram, err error)
	FindInBatches(result *[]*model.TSekolahPerProgram, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TSekolahPerProgram) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITSekolahPerProgramDo
	Assign(attrs ...field.AssignExpr) ITSekolahPerProgramDo
	Joins(fields ...field.RelationField) ITSekolahPerProgramDo
	Preload(fields ...field.RelationField) ITSekolahPerProgramDo
	FirstOrInit() (*model.TSekolahPerProgram, error)
	FirstOrCreate() (*model.TSekolahPerProgram, error)
	FindByPage(offset int, limit int) (result []*model.TSekolahPerProgram, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITSekolahPerProgramDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tSekolahPerProgramDo) Debug() ITSekolahPerProgramDo {
	return t.withDO(t.DO.Debug())
}

func (t tSekolahPerProgramDo) WithContext(ctx context.Context) ITSekolahPerProgramDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tSekolahPerProgramDo) ReadDB() ITSekolahPerProgramDo {
	return t.Clauses(dbresolver.Read)
}

func (t tSekolahPerProgramDo) WriteDB() ITSekolahPerProgramDo {
	return t.Clauses(dbresolver.Write)
}

func (t tSekolahPerProgramDo) Session(config *gorm.Session) ITSekolahPerProgramDo {
	return t.withDO(t.DO.Session(config))
}

func (t tSekolahPerProgramDo) Clauses(conds ...clause.Expression) ITSekolahPerProgramDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tSekolahPerProgramDo) Returning(value interface{}, columns ...string) ITSekolahPerProgramDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tSekolahPerProgramDo) Not(conds ...gen.Condition) ITSekolahPerProgramDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tSekolahPerProgramDo) Or(conds ...gen.Condition) ITSekolahPerProgramDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tSekolahPerProgramDo) Select(conds ...field.Expr) ITSekolahPerProgramDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tSekolahPerProgramDo) Where(conds ...gen.Condition) ITSekolahPerProgramDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tSekolahPerProgramDo) Order(conds ...field.Expr) ITSekolahPerProgramDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tSekolahPerProgramDo) Distinct(cols ...field.Expr) ITSekolahPerProgramDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tSekolahPerProgramDo) Omit(cols ...field.Expr) ITSekolahPerProgramDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tSekolahPerProgramDo) Join(table schema.Tabler, on ...field.Expr) ITSekolahPerProgramDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tSekolahPerProgramDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITSekolahPerProgramDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tSekolahPerProgramDo) RightJoin(table schema.Tabler, on ...field.Expr) ITSekolahPerProgramDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tSekolahPerProgramDo) Group(cols ...field.Expr) ITSekolahPerProgramDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tSekolahPerProgramDo) Having(conds ...gen.Condition) ITSekolahPerProgramDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tSekolahPerProgramDo) Limit(limit int) ITSekolahPerProgramDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tSekolahPerProgramDo) Offset(offset int) ITSekolahPerProgramDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tSekolahPerProgramDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITSekolahPerProgramDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tSekolahPerProgramDo) Unscoped() ITSekolahPerProgramDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tSekolahPerProgramDo) Create(values ...*model.TSekolahPerProgram) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tSekolahPerProgramDo) CreateInBatches(values []*model.TSekolahPerProgram, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tSekolahPerProgramDo) Save(values ...*model.TSekolahPerProgram) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tSekolahPerProgramDo) First() (*model.TSekolahPerProgram, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSekolahPerProgram), nil
	}
}

func (t tSekolahPerProgramDo) Take() (*model.TSekolahPerProgram, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSekolahPerProgram), nil
	}
}

func (t tSekolahPerProgramDo) Last() (*model.TSekolahPerProgram, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSekolahPerProgram), nil
	}
}

func (t tSekolahPerProgramDo) Find() ([]*model.TSekolahPerProgram, error) {
	result, err := t.DO.Find()
	return result.([]*model.TSekolahPerProgram), err
}

func (t tSekolahPerProgramDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TSekolahPerProgram, err error) {
	buf := make([]*model.TSekolahPerProgram, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tSekolahPerProgramDo) FindInBatches(result *[]*model.TSekolahPerProgram, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tSekolahPerProgramDo) Attrs(attrs ...field.AssignExpr) ITSekolahPerProgramDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tSekolahPerProgramDo) Assign(attrs ...field.AssignExpr) ITSekolahPerProgramDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tSekolahPerProgramDo) Joins(fields ...field.RelationField) ITSekolahPerProgramDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tSekolahPerProgramDo) Preload(fields ...field.RelationField) ITSekolahPerProgramDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tSekolahPerProgramDo) FirstOrInit() (*model.TSekolahPerProgram, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSekolahPerProgram), nil
	}
}

func (t tSekolahPerProgramDo) FirstOrCreate() (*model.TSekolahPerProgram, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSekolahPerProgram), nil
	}
}

func (t tSekolahPerProgramDo) FindByPage(offset int, limit int) (result []*model.TSekolahPerProgram, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tSekolahPerProgramDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tSekolahPerProgramDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tSekolahPerProgramDo) Delete(models ...*model.TSekolahPerProgram) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tSekolahPerProgramDo) withDO(do gen.Dao) *tSekolahPerProgramDo {
	t.DO = *do.(*gen.DO)
	return t
}
