// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-bponline/m/gen/model"
)

func newTSekolahTargetKegiatan(db *gorm.DB, opts ...gen.DOOption) tSekolahTargetKegiatan {
	_tSekolahTargetKegiatan := tSekolahTargetKegiatan{}

	_tSekolahTargetKegiatan.tSekolahTargetKegiatanDo.UseDB(db, opts...)
	_tSekolahTargetKegiatan.tSekolahTargetKegiatanDo.UseModel(&model.TSekolahTargetKegiatan{})

	tableName := _tSekolahTargetKegiatan.tSekolahTargetKegiatanDo.TableName()
	_tSekolahTargetKegiatan.ALL = field.NewAsterisk(tableName)
	_tSekolahTargetKegiatan.CIDSekolah = field.NewInt32(tableName, "c_id_sekolah")
	_tSekolahTargetKegiatan.CIDTingkat = field.NewInt16(tableName, "c_id_tingkat")
	_tSekolahTargetKegiatan.CIDKegiatan = field.NewInt32(tableName, "c_id_kegiatan")
	_tSekolahTargetKegiatan.CTargetEvent = field.NewInt16(tableName, "c_target_event")
	_tSekolahTargetKegiatan.CTargetKehadiran = field.NewInt16(tableName, "c_target_kehadiran")

	_tSekolahTargetKegiatan.fillFieldMap()

	return _tSekolahTargetKegiatan
}

type tSekolahTargetKegiatan struct {
	tSekolahTargetKegiatanDo

	ALL              field.Asterisk
	CIDSekolah       field.Int32
	CIDTingkat       field.Int16
	CIDKegiatan      field.Int32
	CTargetEvent     field.Int16
	CTargetKehadiran field.Int16

	fieldMap map[string]field.Expr
}

func (t tSekolahTargetKegiatan) Table(newTableName string) *tSekolahTargetKegiatan {
	t.tSekolahTargetKegiatanDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tSekolahTargetKegiatan) As(alias string) *tSekolahTargetKegiatan {
	t.tSekolahTargetKegiatanDo.DO = *(t.tSekolahTargetKegiatanDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tSekolahTargetKegiatan) updateTableName(table string) *tSekolahTargetKegiatan {
	t.ALL = field.NewAsterisk(table)
	t.CIDSekolah = field.NewInt32(table, "c_id_sekolah")
	t.CIDTingkat = field.NewInt16(table, "c_id_tingkat")
	t.CIDKegiatan = field.NewInt32(table, "c_id_kegiatan")
	t.CTargetEvent = field.NewInt16(table, "c_target_event")
	t.CTargetKehadiran = field.NewInt16(table, "c_target_kehadiran")

	t.fillFieldMap()

	return t
}

func (t *tSekolahTargetKegiatan) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tSekolahTargetKegiatan) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 5)
	t.fieldMap["c_id_sekolah"] = t.CIDSekolah
	t.fieldMap["c_id_tingkat"] = t.CIDTingkat
	t.fieldMap["c_id_kegiatan"] = t.CIDKegiatan
	t.fieldMap["c_target_event"] = t.CTargetEvent
	t.fieldMap["c_target_kehadiran"] = t.CTargetKehadiran
}

func (t tSekolahTargetKegiatan) clone(db *gorm.DB) tSekolahTargetKegiatan {
	t.tSekolahTargetKegiatanDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tSekolahTargetKegiatan) replaceDB(db *gorm.DB) tSekolahTargetKegiatan {
	t.tSekolahTargetKegiatanDo.ReplaceDB(db)
	return t
}

type tSekolahTargetKegiatanDo struct{ gen.DO }

type ITSekolahTargetKegiatanDo interface {
	gen.SubQuery
	Debug() ITSekolahTargetKegiatanDo
	WithContext(ctx context.Context) ITSekolahTargetKegiatanDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITSekolahTargetKegiatanDo
	WriteDB() ITSekolahTargetKegiatanDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITSekolahTargetKegiatanDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITSekolahTargetKegiatanDo
	Not(conds ...gen.Condition) ITSekolahTargetKegiatanDo
	Or(conds ...gen.Condition) ITSekolahTargetKegiatanDo
	Select(conds ...field.Expr) ITSekolahTargetKegiatanDo
	Where(conds ...gen.Condition) ITSekolahTargetKegiatanDo
	Order(conds ...field.Expr) ITSekolahTargetKegiatanDo
	Distinct(cols ...field.Expr) ITSekolahTargetKegiatanDo
	Omit(cols ...field.Expr) ITSekolahTargetKegiatanDo
	Join(table schema.Tabler, on ...field.Expr) ITSekolahTargetKegiatanDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITSekolahTargetKegiatanDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITSekolahTargetKegiatanDo
	Group(cols ...field.Expr) ITSekolahTargetKegiatanDo
	Having(conds ...gen.Condition) ITSekolahTargetKegiatanDo
	Limit(limit int) ITSekolahTargetKegiatanDo
	Offset(offset int) ITSekolahTargetKegiatanDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITSekolahTargetKegiatanDo
	Unscoped() ITSekolahTargetKegiatanDo
	Create(values ...*model.TSekolahTargetKegiatan) error
	CreateInBatches(values []*model.TSekolahTargetKegiatan, batchSize int) error
	Save(values ...*model.TSekolahTargetKegiatan) error
	First() (*model.TSekolahTargetKegiatan, error)
	Take() (*model.TSekolahTargetKegiatan, error)
	Last() (*model.TSekolahTargetKegiatan, error)
	Find() ([]*model.TSekolahTargetKegiatan, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TSekolahTargetKegiatan, err error)
	FindInBatches(result *[]*model.TSekolahTargetKegiatan, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TSekolahTargetKegiatan) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITSekolahTargetKegiatanDo
	Assign(attrs ...field.AssignExpr) ITSekolahTargetKegiatanDo
	Joins(fields ...field.RelationField) ITSekolahTargetKegiatanDo
	Preload(fields ...field.RelationField) ITSekolahTargetKegiatanDo
	FirstOrInit() (*model.TSekolahTargetKegiatan, error)
	FirstOrCreate() (*model.TSekolahTargetKegiatan, error)
	FindByPage(offset int, limit int) (result []*model.TSekolahTargetKegiatan, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITSekolahTargetKegiatanDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tSekolahTargetKegiatanDo) Debug() ITSekolahTargetKegiatanDo {
	return t.withDO(t.DO.Debug())
}

func (t tSekolahTargetKegiatanDo) WithContext(ctx context.Context) ITSekolahTargetKegiatanDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tSekolahTargetKegiatanDo) ReadDB() ITSekolahTargetKegiatanDo {
	return t.Clauses(dbresolver.Read)
}

func (t tSekolahTargetKegiatanDo) WriteDB() ITSekolahTargetKegiatanDo {
	return t.Clauses(dbresolver.Write)
}

func (t tSekolahTargetKegiatanDo) Session(config *gorm.Session) ITSekolahTargetKegiatanDo {
	return t.withDO(t.DO.Session(config))
}

func (t tSekolahTargetKegiatanDo) Clauses(conds ...clause.Expression) ITSekolahTargetKegiatanDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tSekolahTargetKegiatanDo) Returning(value interface{}, columns ...string) ITSekolahTargetKegiatanDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tSekolahTargetKegiatanDo) Not(conds ...gen.Condition) ITSekolahTargetKegiatanDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tSekolahTargetKegiatanDo) Or(conds ...gen.Condition) ITSekolahTargetKegiatanDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tSekolahTargetKegiatanDo) Select(conds ...field.Expr) ITSekolahTargetKegiatanDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tSekolahTargetKegiatanDo) Where(conds ...gen.Condition) ITSekolahTargetKegiatanDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tSekolahTargetKegiatanDo) Order(conds ...field.Expr) ITSekolahTargetKegiatanDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tSekolahTargetKegiatanDo) Distinct(cols ...field.Expr) ITSekolahTargetKegiatanDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tSekolahTargetKegiatanDo) Omit(cols ...field.Expr) ITSekolahTargetKegiatanDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tSekolahTargetKegiatanDo) Join(table schema.Tabler, on ...field.Expr) ITSekolahTargetKegiatanDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tSekolahTargetKegiatanDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITSekolahTargetKegiatanDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tSekolahTargetKegiatanDo) RightJoin(table schema.Tabler, on ...field.Expr) ITSekolahTargetKegiatanDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tSekolahTargetKegiatanDo) Group(cols ...field.Expr) ITSekolahTargetKegiatanDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tSekolahTargetKegiatanDo) Having(conds ...gen.Condition) ITSekolahTargetKegiatanDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tSekolahTargetKegiatanDo) Limit(limit int) ITSekolahTargetKegiatanDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tSekolahTargetKegiatanDo) Offset(offset int) ITSekolahTargetKegiatanDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tSekolahTargetKegiatanDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITSekolahTargetKegiatanDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tSekolahTargetKegiatanDo) Unscoped() ITSekolahTargetKegiatanDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tSekolahTargetKegiatanDo) Create(values ...*model.TSekolahTargetKegiatan) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tSekolahTargetKegiatanDo) CreateInBatches(values []*model.TSekolahTargetKegiatan, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tSekolahTargetKegiatanDo) Save(values ...*model.TSekolahTargetKegiatan) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tSekolahTargetKegiatanDo) First() (*model.TSekolahTargetKegiatan, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSekolahTargetKegiatan), nil
	}
}

func (t tSekolahTargetKegiatanDo) Take() (*model.TSekolahTargetKegiatan, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSekolahTargetKegiatan), nil
	}
}

func (t tSekolahTargetKegiatanDo) Last() (*model.TSekolahTargetKegiatan, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSekolahTargetKegiatan), nil
	}
}

func (t tSekolahTargetKegiatanDo) Find() ([]*model.TSekolahTargetKegiatan, error) {
	result, err := t.DO.Find()
	return result.([]*model.TSekolahTargetKegiatan), err
}

func (t tSekolahTargetKegiatanDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TSekolahTargetKegiatan, err error) {
	buf := make([]*model.TSekolahTargetKegiatan, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tSekolahTargetKegiatanDo) FindInBatches(result *[]*model.TSekolahTargetKegiatan, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tSekolahTargetKegiatanDo) Attrs(attrs ...field.AssignExpr) ITSekolahTargetKegiatanDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tSekolahTargetKegiatanDo) Assign(attrs ...field.AssignExpr) ITSekolahTargetKegiatanDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tSekolahTargetKegiatanDo) Joins(fields ...field.RelationField) ITSekolahTargetKegiatanDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tSekolahTargetKegiatanDo) Preload(fields ...field.RelationField) ITSekolahTargetKegiatanDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tSekolahTargetKegiatanDo) FirstOrInit() (*model.TSekolahTargetKegiatan, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSekolahTargetKegiatan), nil
	}
}

func (t tSekolahTargetKegiatanDo) FirstOrCreate() (*model.TSekolahTargetKegiatan, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSekolahTargetKegiatan), nil
	}
}

func (t tSekolahTargetKegiatanDo) FindByPage(offset int, limit int) (result []*model.TSekolahTargetKegiatan, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tSekolahTargetKegiatanDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tSekolahTargetKegiatanDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tSekolahTargetKegiatanDo) Delete(models ...*model.TSekolahTargetKegiatan) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tSekolahTargetKegiatanDo) withDO(do gen.Dao) *tSekolahTargetKegiatanDo {
	t.DO = *do.(*gen.DO)
	return t
}
