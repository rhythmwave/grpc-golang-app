// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-bponline/m/gen/model"
)

func newTStrategiBersaing(db *gorm.DB, opts ...gen.DOOption) tStrategiBersaing {
	_tStrategiBersaing := tStrategiBersaing{}

	_tStrategiBersaing.tStrategiBersaingDo.UseDB(db, opts...)
	_tStrategiBersaing.tStrategiBersaingDo.UseModel(&model.TStrategiBersaing{})

	tableName := _tStrategiBersaing.tStrategiBersaingDo.TableName()
	_tStrategiBersaing.ALL = field.NewAsterisk(tableName)
	_tStrategiBersaing.CIDPesaing = field.NewInt32(tableName, "c_id_pesaing")
	_tStrategiBersaing.CIDGedung = field.NewInt32(tableName, "c_id_gedung")
	_tStrategiBersaing.CIDBersaing = field.NewInt32(tableName, "c_id_bersaing")
	_tStrategiBersaing.CImageKeunggulan = field.NewString(tableName, "c_image_keunggulan")
	_tStrategiBersaing.CMethodePengubahanImage = field.NewString(tableName, "c_methode_pengubahan_image")
	_tStrategiBersaing.CIsFollowUp = field.NewString(tableName, "c_is_follow_up")
	_tStrategiBersaing.CUpdater = field.NewString(tableName, "c_updater")
	_tStrategiBersaing.CLastUpdate = field.NewTime(tableName, "c_last_update")
	_tStrategiBersaing.CPenanggungJawab = field.NewString(tableName, "c_penanggung_jawab")

	_tStrategiBersaing.fillFieldMap()

	return _tStrategiBersaing
}

type tStrategiBersaing struct {
	tStrategiBersaingDo

	ALL                     field.Asterisk
	CIDPesaing              field.Int32
	CIDGedung               field.Int32
	CIDBersaing             field.Int32
	CImageKeunggulan        field.String
	CMethodePengubahanImage field.String
	CIsFollowUp             field.String
	CUpdater                field.String
	CLastUpdate             field.Time
	CPenanggungJawab        field.String

	fieldMap map[string]field.Expr
}

func (t tStrategiBersaing) Table(newTableName string) *tStrategiBersaing {
	t.tStrategiBersaingDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tStrategiBersaing) As(alias string) *tStrategiBersaing {
	t.tStrategiBersaingDo.DO = *(t.tStrategiBersaingDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tStrategiBersaing) updateTableName(table string) *tStrategiBersaing {
	t.ALL = field.NewAsterisk(table)
	t.CIDPesaing = field.NewInt32(table, "c_id_pesaing")
	t.CIDGedung = field.NewInt32(table, "c_id_gedung")
	t.CIDBersaing = field.NewInt32(table, "c_id_bersaing")
	t.CImageKeunggulan = field.NewString(table, "c_image_keunggulan")
	t.CMethodePengubahanImage = field.NewString(table, "c_methode_pengubahan_image")
	t.CIsFollowUp = field.NewString(table, "c_is_follow_up")
	t.CUpdater = field.NewString(table, "c_updater")
	t.CLastUpdate = field.NewTime(table, "c_last_update")
	t.CPenanggungJawab = field.NewString(table, "c_penanggung_jawab")

	t.fillFieldMap()

	return t
}

func (t *tStrategiBersaing) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tStrategiBersaing) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 9)
	t.fieldMap["c_id_pesaing"] = t.CIDPesaing
	t.fieldMap["c_id_gedung"] = t.CIDGedung
	t.fieldMap["c_id_bersaing"] = t.CIDBersaing
	t.fieldMap["c_image_keunggulan"] = t.CImageKeunggulan
	t.fieldMap["c_methode_pengubahan_image"] = t.CMethodePengubahanImage
	t.fieldMap["c_is_follow_up"] = t.CIsFollowUp
	t.fieldMap["c_updater"] = t.CUpdater
	t.fieldMap["c_last_update"] = t.CLastUpdate
	t.fieldMap["c_penanggung_jawab"] = t.CPenanggungJawab
}

func (t tStrategiBersaing) clone(db *gorm.DB) tStrategiBersaing {
	t.tStrategiBersaingDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tStrategiBersaing) replaceDB(db *gorm.DB) tStrategiBersaing {
	t.tStrategiBersaingDo.ReplaceDB(db)
	return t
}

type tStrategiBersaingDo struct{ gen.DO }

type ITStrategiBersaingDo interface {
	gen.SubQuery
	Debug() ITStrategiBersaingDo
	WithContext(ctx context.Context) ITStrategiBersaingDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITStrategiBersaingDo
	WriteDB() ITStrategiBersaingDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITStrategiBersaingDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITStrategiBersaingDo
	Not(conds ...gen.Condition) ITStrategiBersaingDo
	Or(conds ...gen.Condition) ITStrategiBersaingDo
	Select(conds ...field.Expr) ITStrategiBersaingDo
	Where(conds ...gen.Condition) ITStrategiBersaingDo
	Order(conds ...field.Expr) ITStrategiBersaingDo
	Distinct(cols ...field.Expr) ITStrategiBersaingDo
	Omit(cols ...field.Expr) ITStrategiBersaingDo
	Join(table schema.Tabler, on ...field.Expr) ITStrategiBersaingDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITStrategiBersaingDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITStrategiBersaingDo
	Group(cols ...field.Expr) ITStrategiBersaingDo
	Having(conds ...gen.Condition) ITStrategiBersaingDo
	Limit(limit int) ITStrategiBersaingDo
	Offset(offset int) ITStrategiBersaingDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITStrategiBersaingDo
	Unscoped() ITStrategiBersaingDo
	Create(values ...*model.TStrategiBersaing) error
	CreateInBatches(values []*model.TStrategiBersaing, batchSize int) error
	Save(values ...*model.TStrategiBersaing) error
	First() (*model.TStrategiBersaing, error)
	Take() (*model.TStrategiBersaing, error)
	Last() (*model.TStrategiBersaing, error)
	Find() ([]*model.TStrategiBersaing, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TStrategiBersaing, err error)
	FindInBatches(result *[]*model.TStrategiBersaing, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TStrategiBersaing) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITStrategiBersaingDo
	Assign(attrs ...field.AssignExpr) ITStrategiBersaingDo
	Joins(fields ...field.RelationField) ITStrategiBersaingDo
	Preload(fields ...field.RelationField) ITStrategiBersaingDo
	FirstOrInit() (*model.TStrategiBersaing, error)
	FirstOrCreate() (*model.TStrategiBersaing, error)
	FindByPage(offset int, limit int) (result []*model.TStrategiBersaing, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITStrategiBersaingDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tStrategiBersaingDo) Debug() ITStrategiBersaingDo {
	return t.withDO(t.DO.Debug())
}

func (t tStrategiBersaingDo) WithContext(ctx context.Context) ITStrategiBersaingDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tStrategiBersaingDo) ReadDB() ITStrategiBersaingDo {
	return t.Clauses(dbresolver.Read)
}

func (t tStrategiBersaingDo) WriteDB() ITStrategiBersaingDo {
	return t.Clauses(dbresolver.Write)
}

func (t tStrategiBersaingDo) Session(config *gorm.Session) ITStrategiBersaingDo {
	return t.withDO(t.DO.Session(config))
}

func (t tStrategiBersaingDo) Clauses(conds ...clause.Expression) ITStrategiBersaingDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tStrategiBersaingDo) Returning(value interface{}, columns ...string) ITStrategiBersaingDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tStrategiBersaingDo) Not(conds ...gen.Condition) ITStrategiBersaingDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tStrategiBersaingDo) Or(conds ...gen.Condition) ITStrategiBersaingDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tStrategiBersaingDo) Select(conds ...field.Expr) ITStrategiBersaingDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tStrategiBersaingDo) Where(conds ...gen.Condition) ITStrategiBersaingDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tStrategiBersaingDo) Order(conds ...field.Expr) ITStrategiBersaingDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tStrategiBersaingDo) Distinct(cols ...field.Expr) ITStrategiBersaingDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tStrategiBersaingDo) Omit(cols ...field.Expr) ITStrategiBersaingDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tStrategiBersaingDo) Join(table schema.Tabler, on ...field.Expr) ITStrategiBersaingDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tStrategiBersaingDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITStrategiBersaingDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tStrategiBersaingDo) RightJoin(table schema.Tabler, on ...field.Expr) ITStrategiBersaingDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tStrategiBersaingDo) Group(cols ...field.Expr) ITStrategiBersaingDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tStrategiBersaingDo) Having(conds ...gen.Condition) ITStrategiBersaingDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tStrategiBersaingDo) Limit(limit int) ITStrategiBersaingDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tStrategiBersaingDo) Offset(offset int) ITStrategiBersaingDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tStrategiBersaingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITStrategiBersaingDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tStrategiBersaingDo) Unscoped() ITStrategiBersaingDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tStrategiBersaingDo) Create(values ...*model.TStrategiBersaing) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tStrategiBersaingDo) CreateInBatches(values []*model.TStrategiBersaing, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tStrategiBersaingDo) Save(values ...*model.TStrategiBersaing) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tStrategiBersaingDo) First() (*model.TStrategiBersaing, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TStrategiBersaing), nil
	}
}

func (t tStrategiBersaingDo) Take() (*model.TStrategiBersaing, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TStrategiBersaing), nil
	}
}

func (t tStrategiBersaingDo) Last() (*model.TStrategiBersaing, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TStrategiBersaing), nil
	}
}

func (t tStrategiBersaingDo) Find() ([]*model.TStrategiBersaing, error) {
	result, err := t.DO.Find()
	return result.([]*model.TStrategiBersaing), err
}

func (t tStrategiBersaingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TStrategiBersaing, err error) {
	buf := make([]*model.TStrategiBersaing, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tStrategiBersaingDo) FindInBatches(result *[]*model.TStrategiBersaing, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tStrategiBersaingDo) Attrs(attrs ...field.AssignExpr) ITStrategiBersaingDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tStrategiBersaingDo) Assign(attrs ...field.AssignExpr) ITStrategiBersaingDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tStrategiBersaingDo) Joins(fields ...field.RelationField) ITStrategiBersaingDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tStrategiBersaingDo) Preload(fields ...field.RelationField) ITStrategiBersaingDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tStrategiBersaingDo) FirstOrInit() (*model.TStrategiBersaing, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TStrategiBersaing), nil
	}
}

func (t tStrategiBersaingDo) FirstOrCreate() (*model.TStrategiBersaing, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TStrategiBersaing), nil
	}
}

func (t tStrategiBersaingDo) FindByPage(offset int, limit int) (result []*model.TStrategiBersaing, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tStrategiBersaingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tStrategiBersaingDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tStrategiBersaingDo) Delete(models ...*model.TStrategiBersaing) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tStrategiBersaingDo) withDO(do gen.Dao) *tStrategiBersaingDo {
	t.DO = *do.(*gen.DO)
	return t
}
