// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-bponline/m/gen/model"
)

func newTStrategiGo(db *gorm.DB, opts ...gen.DOOption) tStrategiGo {
	_tStrategiGo := tStrategiGo{}

	_tStrategiGo.tStrategiGoDo.UseDB(db, opts...)
	_tStrategiGo.tStrategiGoDo.UseModel(&model.TStrategiGo{})

	tableName := _tStrategiGo.tStrategiGoDo.TableName()
	_tStrategiGo.ALL = field.NewAsterisk(tableName)
	_tStrategiGo.CIDPenanda = field.NewInt32(tableName, "c_id_penanda")
	_tStrategiGo.CIDJudul = field.NewInt32(tableName, "c_id_judul")
	_tStrategiGo.CPrioritas = field.NewInt32(tableName, "c_prioritas")
	_tStrategiGo.CNilai = field.NewInt32(tableName, "c_nilai")
	_tStrategiGo.CUpdater = field.NewString(tableName, "c_updater")
	_tStrategiGo.CLastUpdate = field.NewTime(tableName, "c_last_update")

	_tStrategiGo.fillFieldMap()

	return _tStrategiGo
}

type tStrategiGo struct {
	tStrategiGoDo

	ALL         field.Asterisk
	CIDPenanda  field.Int32 // Kota GO
	CIDJudul    field.Int32
	CPrioritas  field.Int32
	CNilai      field.Int32  // 1 sd 10
	CUpdater    field.String // nik
	CLastUpdate field.Time

	fieldMap map[string]field.Expr
}

func (t tStrategiGo) Table(newTableName string) *tStrategiGo {
	t.tStrategiGoDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tStrategiGo) As(alias string) *tStrategiGo {
	t.tStrategiGoDo.DO = *(t.tStrategiGoDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tStrategiGo) updateTableName(table string) *tStrategiGo {
	t.ALL = field.NewAsterisk(table)
	t.CIDPenanda = field.NewInt32(table, "c_id_penanda")
	t.CIDJudul = field.NewInt32(table, "c_id_judul")
	t.CPrioritas = field.NewInt32(table, "c_prioritas")
	t.CNilai = field.NewInt32(table, "c_nilai")
	t.CUpdater = field.NewString(table, "c_updater")
	t.CLastUpdate = field.NewTime(table, "c_last_update")

	t.fillFieldMap()

	return t
}

func (t *tStrategiGo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tStrategiGo) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 6)
	t.fieldMap["c_id_penanda"] = t.CIDPenanda
	t.fieldMap["c_id_judul"] = t.CIDJudul
	t.fieldMap["c_prioritas"] = t.CPrioritas
	t.fieldMap["c_nilai"] = t.CNilai
	t.fieldMap["c_updater"] = t.CUpdater
	t.fieldMap["c_last_update"] = t.CLastUpdate
}

func (t tStrategiGo) clone(db *gorm.DB) tStrategiGo {
	t.tStrategiGoDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tStrategiGo) replaceDB(db *gorm.DB) tStrategiGo {
	t.tStrategiGoDo.ReplaceDB(db)
	return t
}

type tStrategiGoDo struct{ gen.DO }

type ITStrategiGoDo interface {
	gen.SubQuery
	Debug() ITStrategiGoDo
	WithContext(ctx context.Context) ITStrategiGoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITStrategiGoDo
	WriteDB() ITStrategiGoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITStrategiGoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITStrategiGoDo
	Not(conds ...gen.Condition) ITStrategiGoDo
	Or(conds ...gen.Condition) ITStrategiGoDo
	Select(conds ...field.Expr) ITStrategiGoDo
	Where(conds ...gen.Condition) ITStrategiGoDo
	Order(conds ...field.Expr) ITStrategiGoDo
	Distinct(cols ...field.Expr) ITStrategiGoDo
	Omit(cols ...field.Expr) ITStrategiGoDo
	Join(table schema.Tabler, on ...field.Expr) ITStrategiGoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITStrategiGoDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITStrategiGoDo
	Group(cols ...field.Expr) ITStrategiGoDo
	Having(conds ...gen.Condition) ITStrategiGoDo
	Limit(limit int) ITStrategiGoDo
	Offset(offset int) ITStrategiGoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITStrategiGoDo
	Unscoped() ITStrategiGoDo
	Create(values ...*model.TStrategiGo) error
	CreateInBatches(values []*model.TStrategiGo, batchSize int) error
	Save(values ...*model.TStrategiGo) error
	First() (*model.TStrategiGo, error)
	Take() (*model.TStrategiGo, error)
	Last() (*model.TStrategiGo, error)
	Find() ([]*model.TStrategiGo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TStrategiGo, err error)
	FindInBatches(result *[]*model.TStrategiGo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TStrategiGo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITStrategiGoDo
	Assign(attrs ...field.AssignExpr) ITStrategiGoDo
	Joins(fields ...field.RelationField) ITStrategiGoDo
	Preload(fields ...field.RelationField) ITStrategiGoDo
	FirstOrInit() (*model.TStrategiGo, error)
	FirstOrCreate() (*model.TStrategiGo, error)
	FindByPage(offset int, limit int) (result []*model.TStrategiGo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITStrategiGoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tStrategiGoDo) Debug() ITStrategiGoDo {
	return t.withDO(t.DO.Debug())
}

func (t tStrategiGoDo) WithContext(ctx context.Context) ITStrategiGoDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tStrategiGoDo) ReadDB() ITStrategiGoDo {
	return t.Clauses(dbresolver.Read)
}

func (t tStrategiGoDo) WriteDB() ITStrategiGoDo {
	return t.Clauses(dbresolver.Write)
}

func (t tStrategiGoDo) Session(config *gorm.Session) ITStrategiGoDo {
	return t.withDO(t.DO.Session(config))
}

func (t tStrategiGoDo) Clauses(conds ...clause.Expression) ITStrategiGoDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tStrategiGoDo) Returning(value interface{}, columns ...string) ITStrategiGoDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tStrategiGoDo) Not(conds ...gen.Condition) ITStrategiGoDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tStrategiGoDo) Or(conds ...gen.Condition) ITStrategiGoDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tStrategiGoDo) Select(conds ...field.Expr) ITStrategiGoDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tStrategiGoDo) Where(conds ...gen.Condition) ITStrategiGoDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tStrategiGoDo) Order(conds ...field.Expr) ITStrategiGoDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tStrategiGoDo) Distinct(cols ...field.Expr) ITStrategiGoDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tStrategiGoDo) Omit(cols ...field.Expr) ITStrategiGoDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tStrategiGoDo) Join(table schema.Tabler, on ...field.Expr) ITStrategiGoDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tStrategiGoDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITStrategiGoDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tStrategiGoDo) RightJoin(table schema.Tabler, on ...field.Expr) ITStrategiGoDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tStrategiGoDo) Group(cols ...field.Expr) ITStrategiGoDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tStrategiGoDo) Having(conds ...gen.Condition) ITStrategiGoDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tStrategiGoDo) Limit(limit int) ITStrategiGoDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tStrategiGoDo) Offset(offset int) ITStrategiGoDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tStrategiGoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITStrategiGoDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tStrategiGoDo) Unscoped() ITStrategiGoDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tStrategiGoDo) Create(values ...*model.TStrategiGo) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tStrategiGoDo) CreateInBatches(values []*model.TStrategiGo, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tStrategiGoDo) Save(values ...*model.TStrategiGo) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tStrategiGoDo) First() (*model.TStrategiGo, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TStrategiGo), nil
	}
}

func (t tStrategiGoDo) Take() (*model.TStrategiGo, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TStrategiGo), nil
	}
}

func (t tStrategiGoDo) Last() (*model.TStrategiGo, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TStrategiGo), nil
	}
}

func (t tStrategiGoDo) Find() ([]*model.TStrategiGo, error) {
	result, err := t.DO.Find()
	return result.([]*model.TStrategiGo), err
}

func (t tStrategiGoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TStrategiGo, err error) {
	buf := make([]*model.TStrategiGo, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tStrategiGoDo) FindInBatches(result *[]*model.TStrategiGo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tStrategiGoDo) Attrs(attrs ...field.AssignExpr) ITStrategiGoDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tStrategiGoDo) Assign(attrs ...field.AssignExpr) ITStrategiGoDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tStrategiGoDo) Joins(fields ...field.RelationField) ITStrategiGoDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tStrategiGoDo) Preload(fields ...field.RelationField) ITStrategiGoDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tStrategiGoDo) FirstOrInit() (*model.TStrategiGo, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TStrategiGo), nil
	}
}

func (t tStrategiGoDo) FirstOrCreate() (*model.TStrategiGo, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TStrategiGo), nil
	}
}

func (t tStrategiGoDo) FindByPage(offset int, limit int) (result []*model.TStrategiGo, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tStrategiGoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tStrategiGoDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tStrategiGoDo) Delete(models ...*model.TStrategiGo) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tStrategiGoDo) withDO(do gen.Dao) *tStrategiGoDo {
	t.DO = *do.(*gen.DO)
	return t
}
