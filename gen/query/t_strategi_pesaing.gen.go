// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-bponline/m/gen/model"
)

func newTStrategiPesaing(db *gorm.DB, opts ...gen.DOOption) tStrategiPesaing {
	_tStrategiPesaing := tStrategiPesaing{}

	_tStrategiPesaing.tStrategiPesaingDo.UseDB(db, opts...)
	_tStrategiPesaing.tStrategiPesaingDo.UseModel(&model.TStrategiPesaing{})

	tableName := _tStrategiPesaing.tStrategiPesaingDo.TableName()
	_tStrategiPesaing.ALL = field.NewAsterisk(tableName)
	_tStrategiPesaing.CIDPenanda = field.NewInt32(tableName, "c_id_penanda")
	_tStrategiPesaing.CIDPesaing = field.NewInt32(tableName, "c_id_pesaing")
	_tStrategiPesaing.CIDJudul = field.NewInt32(tableName, "c_id_judul")
	_tStrategiPesaing.CNilai = field.NewInt32(tableName, "c_nilai")
	_tStrategiPesaing.CUpdater = field.NewString(tableName, "c_updater")
	_tStrategiPesaing.CLastUpdate = field.NewTime(tableName, "c_last_update")

	_tStrategiPesaing.fillFieldMap()

	return _tStrategiPesaing
}

type tStrategiPesaing struct {
	tStrategiPesaingDo

	ALL         field.Asterisk
	CIDPenanda  field.Int32 // Kota GO
	CIDPesaing  field.Int32
	CIDJudul    field.Int32
	CNilai      field.Int32  // 1 sd 10
	CUpdater    field.String // nik
	CLastUpdate field.Time

	fieldMap map[string]field.Expr
}

func (t tStrategiPesaing) Table(newTableName string) *tStrategiPesaing {
	t.tStrategiPesaingDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tStrategiPesaing) As(alias string) *tStrategiPesaing {
	t.tStrategiPesaingDo.DO = *(t.tStrategiPesaingDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tStrategiPesaing) updateTableName(table string) *tStrategiPesaing {
	t.ALL = field.NewAsterisk(table)
	t.CIDPenanda = field.NewInt32(table, "c_id_penanda")
	t.CIDPesaing = field.NewInt32(table, "c_id_pesaing")
	t.CIDJudul = field.NewInt32(table, "c_id_judul")
	t.CNilai = field.NewInt32(table, "c_nilai")
	t.CUpdater = field.NewString(table, "c_updater")
	t.CLastUpdate = field.NewTime(table, "c_last_update")

	t.fillFieldMap()

	return t
}

func (t *tStrategiPesaing) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tStrategiPesaing) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 6)
	t.fieldMap["c_id_penanda"] = t.CIDPenanda
	t.fieldMap["c_id_pesaing"] = t.CIDPesaing
	t.fieldMap["c_id_judul"] = t.CIDJudul
	t.fieldMap["c_nilai"] = t.CNilai
	t.fieldMap["c_updater"] = t.CUpdater
	t.fieldMap["c_last_update"] = t.CLastUpdate
}

func (t tStrategiPesaing) clone(db *gorm.DB) tStrategiPesaing {
	t.tStrategiPesaingDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tStrategiPesaing) replaceDB(db *gorm.DB) tStrategiPesaing {
	t.tStrategiPesaingDo.ReplaceDB(db)
	return t
}

type tStrategiPesaingDo struct{ gen.DO }

type ITStrategiPesaingDo interface {
	gen.SubQuery
	Debug() ITStrategiPesaingDo
	WithContext(ctx context.Context) ITStrategiPesaingDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITStrategiPesaingDo
	WriteDB() ITStrategiPesaingDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITStrategiPesaingDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITStrategiPesaingDo
	Not(conds ...gen.Condition) ITStrategiPesaingDo
	Or(conds ...gen.Condition) ITStrategiPesaingDo
	Select(conds ...field.Expr) ITStrategiPesaingDo
	Where(conds ...gen.Condition) ITStrategiPesaingDo
	Order(conds ...field.Expr) ITStrategiPesaingDo
	Distinct(cols ...field.Expr) ITStrategiPesaingDo
	Omit(cols ...field.Expr) ITStrategiPesaingDo
	Join(table schema.Tabler, on ...field.Expr) ITStrategiPesaingDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITStrategiPesaingDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITStrategiPesaingDo
	Group(cols ...field.Expr) ITStrategiPesaingDo
	Having(conds ...gen.Condition) ITStrategiPesaingDo
	Limit(limit int) ITStrategiPesaingDo
	Offset(offset int) ITStrategiPesaingDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITStrategiPesaingDo
	Unscoped() ITStrategiPesaingDo
	Create(values ...*model.TStrategiPesaing) error
	CreateInBatches(values []*model.TStrategiPesaing, batchSize int) error
	Save(values ...*model.TStrategiPesaing) error
	First() (*model.TStrategiPesaing, error)
	Take() (*model.TStrategiPesaing, error)
	Last() (*model.TStrategiPesaing, error)
	Find() ([]*model.TStrategiPesaing, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TStrategiPesaing, err error)
	FindInBatches(result *[]*model.TStrategiPesaing, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TStrategiPesaing) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITStrategiPesaingDo
	Assign(attrs ...field.AssignExpr) ITStrategiPesaingDo
	Joins(fields ...field.RelationField) ITStrategiPesaingDo
	Preload(fields ...field.RelationField) ITStrategiPesaingDo
	FirstOrInit() (*model.TStrategiPesaing, error)
	FirstOrCreate() (*model.TStrategiPesaing, error)
	FindByPage(offset int, limit int) (result []*model.TStrategiPesaing, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITStrategiPesaingDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tStrategiPesaingDo) Debug() ITStrategiPesaingDo {
	return t.withDO(t.DO.Debug())
}

func (t tStrategiPesaingDo) WithContext(ctx context.Context) ITStrategiPesaingDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tStrategiPesaingDo) ReadDB() ITStrategiPesaingDo {
	return t.Clauses(dbresolver.Read)
}

func (t tStrategiPesaingDo) WriteDB() ITStrategiPesaingDo {
	return t.Clauses(dbresolver.Write)
}

func (t tStrategiPesaingDo) Session(config *gorm.Session) ITStrategiPesaingDo {
	return t.withDO(t.DO.Session(config))
}

func (t tStrategiPesaingDo) Clauses(conds ...clause.Expression) ITStrategiPesaingDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tStrategiPesaingDo) Returning(value interface{}, columns ...string) ITStrategiPesaingDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tStrategiPesaingDo) Not(conds ...gen.Condition) ITStrategiPesaingDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tStrategiPesaingDo) Or(conds ...gen.Condition) ITStrategiPesaingDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tStrategiPesaingDo) Select(conds ...field.Expr) ITStrategiPesaingDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tStrategiPesaingDo) Where(conds ...gen.Condition) ITStrategiPesaingDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tStrategiPesaingDo) Order(conds ...field.Expr) ITStrategiPesaingDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tStrategiPesaingDo) Distinct(cols ...field.Expr) ITStrategiPesaingDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tStrategiPesaingDo) Omit(cols ...field.Expr) ITStrategiPesaingDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tStrategiPesaingDo) Join(table schema.Tabler, on ...field.Expr) ITStrategiPesaingDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tStrategiPesaingDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITStrategiPesaingDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tStrategiPesaingDo) RightJoin(table schema.Tabler, on ...field.Expr) ITStrategiPesaingDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tStrategiPesaingDo) Group(cols ...field.Expr) ITStrategiPesaingDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tStrategiPesaingDo) Having(conds ...gen.Condition) ITStrategiPesaingDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tStrategiPesaingDo) Limit(limit int) ITStrategiPesaingDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tStrategiPesaingDo) Offset(offset int) ITStrategiPesaingDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tStrategiPesaingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITStrategiPesaingDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tStrategiPesaingDo) Unscoped() ITStrategiPesaingDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tStrategiPesaingDo) Create(values ...*model.TStrategiPesaing) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tStrategiPesaingDo) CreateInBatches(values []*model.TStrategiPesaing, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tStrategiPesaingDo) Save(values ...*model.TStrategiPesaing) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tStrategiPesaingDo) First() (*model.TStrategiPesaing, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TStrategiPesaing), nil
	}
}

func (t tStrategiPesaingDo) Take() (*model.TStrategiPesaing, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TStrategiPesaing), nil
	}
}

func (t tStrategiPesaingDo) Last() (*model.TStrategiPesaing, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TStrategiPesaing), nil
	}
}

func (t tStrategiPesaingDo) Find() ([]*model.TStrategiPesaing, error) {
	result, err := t.DO.Find()
	return result.([]*model.TStrategiPesaing), err
}

func (t tStrategiPesaingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TStrategiPesaing, err error) {
	buf := make([]*model.TStrategiPesaing, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tStrategiPesaingDo) FindInBatches(result *[]*model.TStrategiPesaing, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tStrategiPesaingDo) Attrs(attrs ...field.AssignExpr) ITStrategiPesaingDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tStrategiPesaingDo) Assign(attrs ...field.AssignExpr) ITStrategiPesaingDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tStrategiPesaingDo) Joins(fields ...field.RelationField) ITStrategiPesaingDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tStrategiPesaingDo) Preload(fields ...field.RelationField) ITStrategiPesaingDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tStrategiPesaingDo) FirstOrInit() (*model.TStrategiPesaing, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TStrategiPesaing), nil
	}
}

func (t tStrategiPesaingDo) FirstOrCreate() (*model.TStrategiPesaing, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TStrategiPesaing), nil
	}
}

func (t tStrategiPesaingDo) FindByPage(offset int, limit int) (result []*model.TStrategiPesaing, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tStrategiPesaingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tStrategiPesaingDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tStrategiPesaingDo) Delete(models ...*model.TStrategiPesaing) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tStrategiPesaingDo) withDO(do gen.Dao) *tStrategiPesaingDo {
	t.DO = *do.(*gen.DO)
	return t
}
