// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-bponline/m/gen/model"
)

func newTTahapTransferAnggaran(db *gorm.DB, opts ...gen.DOOption) tTahapTransferAnggaran {
	_tTahapTransferAnggaran := tTahapTransferAnggaran{}

	_tTahapTransferAnggaran.tTahapTransferAnggaranDo.UseDB(db, opts...)
	_tTahapTransferAnggaran.tTahapTransferAnggaranDo.UseModel(&model.TTahapTransferAnggaran{})

	tableName := _tTahapTransferAnggaran.tTahapTransferAnggaranDo.TableName()
	_tTahapTransferAnggaran.ALL = field.NewAsterisk(tableName)
	_tTahapTransferAnggaran.CIDKegiatan = field.NewInt32(tableName, "c_id_kegiatan")
	_tTahapTransferAnggaran.CIDJenisBiaya = field.NewString(tableName, "c_id_jenis_biaya")
	_tTahapTransferAnggaran.CKelompok = field.NewString(tableName, "c_kelompok")
	_tTahapTransferAnggaran.CIDDppbIsi = field.NewInt32(tableName, "c_id_dppb_isi")
	_tTahapTransferAnggaran.CTahapKe = field.NewInt32(tableName, "c_tahap_ke")
	_tTahapTransferAnggaran.CJumlahTransfer = field.NewInt32(tableName, "c_jumlah_transfer")
	_tTahapTransferAnggaran.CTanggalTransfer = field.NewTime(tableName, "c_tanggal_transfer")
	_tTahapTransferAnggaran.CUpdater = field.NewString(tableName, "c_updater")
	_tTahapTransferAnggaran.CLastUpdate = field.NewTime(tableName, "c_last_update")
	_tTahapTransferAnggaran.CSumberDana = field.NewString(tableName, "c_sumber_dana")
	_tTahapTransferAnggaran.CStatus = field.NewString(tableName, "c_status")
	_tTahapTransferAnggaran.CIsTransfer = field.NewInt16(tableName, "c_is_transfer_")

	_tTahapTransferAnggaran.fillFieldMap()

	return _tTahapTransferAnggaran
}

type tTahapTransferAnggaran struct {
	tTahapTransferAnggaranDo

	ALL              field.Asterisk
	CIDKegiatan      field.Int32
	CIDJenisBiaya    field.String
	CKelompok        field.String
	CIDDppbIsi       field.Int32
	CTahapKe         field.Int32
	CJumlahTransfer  field.Int32
	CTanggalTransfer field.Time
	CUpdater         field.String
	CLastUpdate      field.Time
	CSumberDana      field.String
	CStatus          field.String
	CIsTransfer      field.Int16

	fieldMap map[string]field.Expr
}

func (t tTahapTransferAnggaran) Table(newTableName string) *tTahapTransferAnggaran {
	t.tTahapTransferAnggaranDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tTahapTransferAnggaran) As(alias string) *tTahapTransferAnggaran {
	t.tTahapTransferAnggaranDo.DO = *(t.tTahapTransferAnggaranDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tTahapTransferAnggaran) updateTableName(table string) *tTahapTransferAnggaran {
	t.ALL = field.NewAsterisk(table)
	t.CIDKegiatan = field.NewInt32(table, "c_id_kegiatan")
	t.CIDJenisBiaya = field.NewString(table, "c_id_jenis_biaya")
	t.CKelompok = field.NewString(table, "c_kelompok")
	t.CIDDppbIsi = field.NewInt32(table, "c_id_dppb_isi")
	t.CTahapKe = field.NewInt32(table, "c_tahap_ke")
	t.CJumlahTransfer = field.NewInt32(table, "c_jumlah_transfer")
	t.CTanggalTransfer = field.NewTime(table, "c_tanggal_transfer")
	t.CUpdater = field.NewString(table, "c_updater")
	t.CLastUpdate = field.NewTime(table, "c_last_update")
	t.CSumberDana = field.NewString(table, "c_sumber_dana")
	t.CStatus = field.NewString(table, "c_status")
	t.CIsTransfer = field.NewInt16(table, "c_is_transfer_")

	t.fillFieldMap()

	return t
}

func (t *tTahapTransferAnggaran) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tTahapTransferAnggaran) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 12)
	t.fieldMap["c_id_kegiatan"] = t.CIDKegiatan
	t.fieldMap["c_id_jenis_biaya"] = t.CIDJenisBiaya
	t.fieldMap["c_kelompok"] = t.CKelompok
	t.fieldMap["c_id_dppb_isi"] = t.CIDDppbIsi
	t.fieldMap["c_tahap_ke"] = t.CTahapKe
	t.fieldMap["c_jumlah_transfer"] = t.CJumlahTransfer
	t.fieldMap["c_tanggal_transfer"] = t.CTanggalTransfer
	t.fieldMap["c_updater"] = t.CUpdater
	t.fieldMap["c_last_update"] = t.CLastUpdate
	t.fieldMap["c_sumber_dana"] = t.CSumberDana
	t.fieldMap["c_status"] = t.CStatus
	t.fieldMap["c_is_transfer_"] = t.CIsTransfer
}

func (t tTahapTransferAnggaran) clone(db *gorm.DB) tTahapTransferAnggaran {
	t.tTahapTransferAnggaranDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tTahapTransferAnggaran) replaceDB(db *gorm.DB) tTahapTransferAnggaran {
	t.tTahapTransferAnggaranDo.ReplaceDB(db)
	return t
}

type tTahapTransferAnggaranDo struct{ gen.DO }

type ITTahapTransferAnggaranDo interface {
	gen.SubQuery
	Debug() ITTahapTransferAnggaranDo
	WithContext(ctx context.Context) ITTahapTransferAnggaranDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITTahapTransferAnggaranDo
	WriteDB() ITTahapTransferAnggaranDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITTahapTransferAnggaranDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITTahapTransferAnggaranDo
	Not(conds ...gen.Condition) ITTahapTransferAnggaranDo
	Or(conds ...gen.Condition) ITTahapTransferAnggaranDo
	Select(conds ...field.Expr) ITTahapTransferAnggaranDo
	Where(conds ...gen.Condition) ITTahapTransferAnggaranDo
	Order(conds ...field.Expr) ITTahapTransferAnggaranDo
	Distinct(cols ...field.Expr) ITTahapTransferAnggaranDo
	Omit(cols ...field.Expr) ITTahapTransferAnggaranDo
	Join(table schema.Tabler, on ...field.Expr) ITTahapTransferAnggaranDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITTahapTransferAnggaranDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITTahapTransferAnggaranDo
	Group(cols ...field.Expr) ITTahapTransferAnggaranDo
	Having(conds ...gen.Condition) ITTahapTransferAnggaranDo
	Limit(limit int) ITTahapTransferAnggaranDo
	Offset(offset int) ITTahapTransferAnggaranDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITTahapTransferAnggaranDo
	Unscoped() ITTahapTransferAnggaranDo
	Create(values ...*model.TTahapTransferAnggaran) error
	CreateInBatches(values []*model.TTahapTransferAnggaran, batchSize int) error
	Save(values ...*model.TTahapTransferAnggaran) error
	First() (*model.TTahapTransferAnggaran, error)
	Take() (*model.TTahapTransferAnggaran, error)
	Last() (*model.TTahapTransferAnggaran, error)
	Find() ([]*model.TTahapTransferAnggaran, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TTahapTransferAnggaran, err error)
	FindInBatches(result *[]*model.TTahapTransferAnggaran, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TTahapTransferAnggaran) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITTahapTransferAnggaranDo
	Assign(attrs ...field.AssignExpr) ITTahapTransferAnggaranDo
	Joins(fields ...field.RelationField) ITTahapTransferAnggaranDo
	Preload(fields ...field.RelationField) ITTahapTransferAnggaranDo
	FirstOrInit() (*model.TTahapTransferAnggaran, error)
	FirstOrCreate() (*model.TTahapTransferAnggaran, error)
	FindByPage(offset int, limit int) (result []*model.TTahapTransferAnggaran, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITTahapTransferAnggaranDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tTahapTransferAnggaranDo) Debug() ITTahapTransferAnggaranDo {
	return t.withDO(t.DO.Debug())
}

func (t tTahapTransferAnggaranDo) WithContext(ctx context.Context) ITTahapTransferAnggaranDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tTahapTransferAnggaranDo) ReadDB() ITTahapTransferAnggaranDo {
	return t.Clauses(dbresolver.Read)
}

func (t tTahapTransferAnggaranDo) WriteDB() ITTahapTransferAnggaranDo {
	return t.Clauses(dbresolver.Write)
}

func (t tTahapTransferAnggaranDo) Session(config *gorm.Session) ITTahapTransferAnggaranDo {
	return t.withDO(t.DO.Session(config))
}

func (t tTahapTransferAnggaranDo) Clauses(conds ...clause.Expression) ITTahapTransferAnggaranDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tTahapTransferAnggaranDo) Returning(value interface{}, columns ...string) ITTahapTransferAnggaranDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tTahapTransferAnggaranDo) Not(conds ...gen.Condition) ITTahapTransferAnggaranDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tTahapTransferAnggaranDo) Or(conds ...gen.Condition) ITTahapTransferAnggaranDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tTahapTransferAnggaranDo) Select(conds ...field.Expr) ITTahapTransferAnggaranDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tTahapTransferAnggaranDo) Where(conds ...gen.Condition) ITTahapTransferAnggaranDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tTahapTransferAnggaranDo) Order(conds ...field.Expr) ITTahapTransferAnggaranDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tTahapTransferAnggaranDo) Distinct(cols ...field.Expr) ITTahapTransferAnggaranDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tTahapTransferAnggaranDo) Omit(cols ...field.Expr) ITTahapTransferAnggaranDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tTahapTransferAnggaranDo) Join(table schema.Tabler, on ...field.Expr) ITTahapTransferAnggaranDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tTahapTransferAnggaranDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITTahapTransferAnggaranDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tTahapTransferAnggaranDo) RightJoin(table schema.Tabler, on ...field.Expr) ITTahapTransferAnggaranDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tTahapTransferAnggaranDo) Group(cols ...field.Expr) ITTahapTransferAnggaranDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tTahapTransferAnggaranDo) Having(conds ...gen.Condition) ITTahapTransferAnggaranDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tTahapTransferAnggaranDo) Limit(limit int) ITTahapTransferAnggaranDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tTahapTransferAnggaranDo) Offset(offset int) ITTahapTransferAnggaranDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tTahapTransferAnggaranDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITTahapTransferAnggaranDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tTahapTransferAnggaranDo) Unscoped() ITTahapTransferAnggaranDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tTahapTransferAnggaranDo) Create(values ...*model.TTahapTransferAnggaran) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tTahapTransferAnggaranDo) CreateInBatches(values []*model.TTahapTransferAnggaran, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tTahapTransferAnggaranDo) Save(values ...*model.TTahapTransferAnggaran) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tTahapTransferAnggaranDo) First() (*model.TTahapTransferAnggaran, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TTahapTransferAnggaran), nil
	}
}

func (t tTahapTransferAnggaranDo) Take() (*model.TTahapTransferAnggaran, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TTahapTransferAnggaran), nil
	}
}

func (t tTahapTransferAnggaranDo) Last() (*model.TTahapTransferAnggaran, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TTahapTransferAnggaran), nil
	}
}

func (t tTahapTransferAnggaranDo) Find() ([]*model.TTahapTransferAnggaran, error) {
	result, err := t.DO.Find()
	return result.([]*model.TTahapTransferAnggaran), err
}

func (t tTahapTransferAnggaranDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TTahapTransferAnggaran, err error) {
	buf := make([]*model.TTahapTransferAnggaran, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tTahapTransferAnggaranDo) FindInBatches(result *[]*model.TTahapTransferAnggaran, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tTahapTransferAnggaranDo) Attrs(attrs ...field.AssignExpr) ITTahapTransferAnggaranDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tTahapTransferAnggaranDo) Assign(attrs ...field.AssignExpr) ITTahapTransferAnggaranDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tTahapTransferAnggaranDo) Joins(fields ...field.RelationField) ITTahapTransferAnggaranDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tTahapTransferAnggaranDo) Preload(fields ...field.RelationField) ITTahapTransferAnggaranDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tTahapTransferAnggaranDo) FirstOrInit() (*model.TTahapTransferAnggaran, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TTahapTransferAnggaran), nil
	}
}

func (t tTahapTransferAnggaranDo) FirstOrCreate() (*model.TTahapTransferAnggaran, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TTahapTransferAnggaran), nil
	}
}

func (t tTahapTransferAnggaranDo) FindByPage(offset int, limit int) (result []*model.TTahapTransferAnggaran, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tTahapTransferAnggaranDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tTahapTransferAnggaranDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tTahapTransferAnggaranDo) Delete(models ...*model.TTahapTransferAnggaran) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tTahapTransferAnggaranDo) withDO(do gen.Dao) *tTahapTransferAnggaranDo {
	t.DO = *do.(*gen.DO)
	return t
}
