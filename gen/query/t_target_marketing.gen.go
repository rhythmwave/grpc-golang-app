// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-bponline/m/gen/model"
)

func newTTargetMarketing(db *gorm.DB, opts ...gen.DOOption) tTargetMarketing {
	_tTargetMarketing := tTargetMarketing{}

	_tTargetMarketing.tTargetMarketingDo.UseDB(db, opts...)
	_tTargetMarketing.tTargetMarketingDo.UseModel(&model.TTargetMarketing{})

	tableName := _tTargetMarketing.tTargetMarketingDo.TableName()
	_tTargetMarketing.ALL = field.NewAsterisk(tableName)
	_tTargetMarketing.CIDPenanda = field.NewInt32(tableName, "c_id_penanda")
	_tTargetMarketing.CTahunAjaran = field.NewString(tableName, "c_tahun_ajaran")
	_tTargetMarketing.CTingkatKelas = field.NewString(tableName, "c_tingkat_kelas")
	_tTargetMarketing.CTargetBimkerOffline = field.NewInt32(tableName, "c_target_bimker_offline")
	_tTargetMarketing.CTargetNonBimkerOffline = field.NewInt32(tableName, "c_target_non_bimker_offline")
	_tTargetMarketing.CTargetBimkerOnline = field.NewInt32(tableName, "c_target_bimker_online")
	_tTargetMarketing.CTargetNonBimkerOnline = field.NewInt32(tableName, "c_target_non_bimker_online")
	_tTargetMarketing.CUpline = field.NewInt16(tableName, "c_upline")
	_tTargetMarketing.CTargetSale = field.NewFloat64(tableName, "c_target_sale")
	_tTargetMarketing.CUpdater = field.NewString(tableName, "c_updater")
	_tTargetMarketing.CLastUpdate = field.NewTime(tableName, "c_last_update")

	_tTargetMarketing.fillFieldMap()

	return _tTargetMarketing
}

type tTargetMarketing struct {
	tTargetMarketingDo

	ALL                     field.Asterisk
	CIDPenanda              field.Int32
	CTahunAjaran            field.String
	CTingkatKelas           field.String
	CTargetBimkerOffline    field.Int32
	CTargetNonBimkerOffline field.Int32
	CTargetBimkerOnline     field.Int32
	CTargetNonBimkerOnline  field.Int32
	CUpline                 field.Int16
	CTargetSale             field.Float64
	CUpdater                field.String
	CLastUpdate             field.Time

	fieldMap map[string]field.Expr
}

func (t tTargetMarketing) Table(newTableName string) *tTargetMarketing {
	t.tTargetMarketingDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tTargetMarketing) As(alias string) *tTargetMarketing {
	t.tTargetMarketingDo.DO = *(t.tTargetMarketingDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tTargetMarketing) updateTableName(table string) *tTargetMarketing {
	t.ALL = field.NewAsterisk(table)
	t.CIDPenanda = field.NewInt32(table, "c_id_penanda")
	t.CTahunAjaran = field.NewString(table, "c_tahun_ajaran")
	t.CTingkatKelas = field.NewString(table, "c_tingkat_kelas")
	t.CTargetBimkerOffline = field.NewInt32(table, "c_target_bimker_offline")
	t.CTargetNonBimkerOffline = field.NewInt32(table, "c_target_non_bimker_offline")
	t.CTargetBimkerOnline = field.NewInt32(table, "c_target_bimker_online")
	t.CTargetNonBimkerOnline = field.NewInt32(table, "c_target_non_bimker_online")
	t.CUpline = field.NewInt16(table, "c_upline")
	t.CTargetSale = field.NewFloat64(table, "c_target_sale")
	t.CUpdater = field.NewString(table, "c_updater")
	t.CLastUpdate = field.NewTime(table, "c_last_update")

	t.fillFieldMap()

	return t
}

func (t *tTargetMarketing) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tTargetMarketing) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 11)
	t.fieldMap["c_id_penanda"] = t.CIDPenanda
	t.fieldMap["c_tahun_ajaran"] = t.CTahunAjaran
	t.fieldMap["c_tingkat_kelas"] = t.CTingkatKelas
	t.fieldMap["c_target_bimker_offline"] = t.CTargetBimkerOffline
	t.fieldMap["c_target_non_bimker_offline"] = t.CTargetNonBimkerOffline
	t.fieldMap["c_target_bimker_online"] = t.CTargetBimkerOnline
	t.fieldMap["c_target_non_bimker_online"] = t.CTargetNonBimkerOnline
	t.fieldMap["c_upline"] = t.CUpline
	t.fieldMap["c_target_sale"] = t.CTargetSale
	t.fieldMap["c_updater"] = t.CUpdater
	t.fieldMap["c_last_update"] = t.CLastUpdate
}

func (t tTargetMarketing) clone(db *gorm.DB) tTargetMarketing {
	t.tTargetMarketingDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tTargetMarketing) replaceDB(db *gorm.DB) tTargetMarketing {
	t.tTargetMarketingDo.ReplaceDB(db)
	return t
}

type tTargetMarketingDo struct{ gen.DO }

type ITTargetMarketingDo interface {
	gen.SubQuery
	Debug() ITTargetMarketingDo
	WithContext(ctx context.Context) ITTargetMarketingDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITTargetMarketingDo
	WriteDB() ITTargetMarketingDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITTargetMarketingDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITTargetMarketingDo
	Not(conds ...gen.Condition) ITTargetMarketingDo
	Or(conds ...gen.Condition) ITTargetMarketingDo
	Select(conds ...field.Expr) ITTargetMarketingDo
	Where(conds ...gen.Condition) ITTargetMarketingDo
	Order(conds ...field.Expr) ITTargetMarketingDo
	Distinct(cols ...field.Expr) ITTargetMarketingDo
	Omit(cols ...field.Expr) ITTargetMarketingDo
	Join(table schema.Tabler, on ...field.Expr) ITTargetMarketingDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITTargetMarketingDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITTargetMarketingDo
	Group(cols ...field.Expr) ITTargetMarketingDo
	Having(conds ...gen.Condition) ITTargetMarketingDo
	Limit(limit int) ITTargetMarketingDo
	Offset(offset int) ITTargetMarketingDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITTargetMarketingDo
	Unscoped() ITTargetMarketingDo
	Create(values ...*model.TTargetMarketing) error
	CreateInBatches(values []*model.TTargetMarketing, batchSize int) error
	Save(values ...*model.TTargetMarketing) error
	First() (*model.TTargetMarketing, error)
	Take() (*model.TTargetMarketing, error)
	Last() (*model.TTargetMarketing, error)
	Find() ([]*model.TTargetMarketing, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TTargetMarketing, err error)
	FindInBatches(result *[]*model.TTargetMarketing, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TTargetMarketing) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITTargetMarketingDo
	Assign(attrs ...field.AssignExpr) ITTargetMarketingDo
	Joins(fields ...field.RelationField) ITTargetMarketingDo
	Preload(fields ...field.RelationField) ITTargetMarketingDo
	FirstOrInit() (*model.TTargetMarketing, error)
	FirstOrCreate() (*model.TTargetMarketing, error)
	FindByPage(offset int, limit int) (result []*model.TTargetMarketing, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITTargetMarketingDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tTargetMarketingDo) Debug() ITTargetMarketingDo {
	return t.withDO(t.DO.Debug())
}

func (t tTargetMarketingDo) WithContext(ctx context.Context) ITTargetMarketingDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tTargetMarketingDo) ReadDB() ITTargetMarketingDo {
	return t.Clauses(dbresolver.Read)
}

func (t tTargetMarketingDo) WriteDB() ITTargetMarketingDo {
	return t.Clauses(dbresolver.Write)
}

func (t tTargetMarketingDo) Session(config *gorm.Session) ITTargetMarketingDo {
	return t.withDO(t.DO.Session(config))
}

func (t tTargetMarketingDo) Clauses(conds ...clause.Expression) ITTargetMarketingDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tTargetMarketingDo) Returning(value interface{}, columns ...string) ITTargetMarketingDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tTargetMarketingDo) Not(conds ...gen.Condition) ITTargetMarketingDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tTargetMarketingDo) Or(conds ...gen.Condition) ITTargetMarketingDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tTargetMarketingDo) Select(conds ...field.Expr) ITTargetMarketingDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tTargetMarketingDo) Where(conds ...gen.Condition) ITTargetMarketingDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tTargetMarketingDo) Order(conds ...field.Expr) ITTargetMarketingDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tTargetMarketingDo) Distinct(cols ...field.Expr) ITTargetMarketingDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tTargetMarketingDo) Omit(cols ...field.Expr) ITTargetMarketingDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tTargetMarketingDo) Join(table schema.Tabler, on ...field.Expr) ITTargetMarketingDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tTargetMarketingDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITTargetMarketingDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tTargetMarketingDo) RightJoin(table schema.Tabler, on ...field.Expr) ITTargetMarketingDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tTargetMarketingDo) Group(cols ...field.Expr) ITTargetMarketingDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tTargetMarketingDo) Having(conds ...gen.Condition) ITTargetMarketingDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tTargetMarketingDo) Limit(limit int) ITTargetMarketingDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tTargetMarketingDo) Offset(offset int) ITTargetMarketingDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tTargetMarketingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITTargetMarketingDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tTargetMarketingDo) Unscoped() ITTargetMarketingDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tTargetMarketingDo) Create(values ...*model.TTargetMarketing) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tTargetMarketingDo) CreateInBatches(values []*model.TTargetMarketing, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tTargetMarketingDo) Save(values ...*model.TTargetMarketing) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tTargetMarketingDo) First() (*model.TTargetMarketing, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TTargetMarketing), nil
	}
}

func (t tTargetMarketingDo) Take() (*model.TTargetMarketing, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TTargetMarketing), nil
	}
}

func (t tTargetMarketingDo) Last() (*model.TTargetMarketing, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TTargetMarketing), nil
	}
}

func (t tTargetMarketingDo) Find() ([]*model.TTargetMarketing, error) {
	result, err := t.DO.Find()
	return result.([]*model.TTargetMarketing), err
}

func (t tTargetMarketingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TTargetMarketing, err error) {
	buf := make([]*model.TTargetMarketing, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tTargetMarketingDo) FindInBatches(result *[]*model.TTargetMarketing, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tTargetMarketingDo) Attrs(attrs ...field.AssignExpr) ITTargetMarketingDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tTargetMarketingDo) Assign(attrs ...field.AssignExpr) ITTargetMarketingDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tTargetMarketingDo) Joins(fields ...field.RelationField) ITTargetMarketingDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tTargetMarketingDo) Preload(fields ...field.RelationField) ITTargetMarketingDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tTargetMarketingDo) FirstOrInit() (*model.TTargetMarketing, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TTargetMarketing), nil
	}
}

func (t tTargetMarketingDo) FirstOrCreate() (*model.TTargetMarketing, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TTargetMarketing), nil
	}
}

func (t tTargetMarketingDo) FindByPage(offset int, limit int) (result []*model.TTargetMarketing, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tTargetMarketingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tTargetMarketingDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tTargetMarketingDo) Delete(models ...*model.TTargetMarketing) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tTargetMarketingDo) withDO(do gen.Dao) *tTargetMarketingDo {
	t.DO = *do.(*gen.DO)
	return t
}
