// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-bponline/m/gen/model"
)

func newTTargetSekolah(db *gorm.DB, opts ...gen.DOOption) tTargetSekolah {
	_tTargetSekolah := tTargetSekolah{}

	_tTargetSekolah.tTargetSekolahDo.UseDB(db, opts...)
	_tTargetSekolah.tTargetSekolahDo.UseModel(&model.TTargetSekolah{})

	tableName := _tTargetSekolah.tTargetSekolahDo.TableName()
	_tTargetSekolah.ALL = field.NewAsterisk(tableName)
	_tTargetSekolah.CIDSekolah = field.NewInt32(tableName, "c_id_sekolah")
	_tTargetSekolah.CIDGedung = field.NewInt32(tableName, "c_id_gedung")
	_tTargetSekolah.CTahunAjaran = field.NewString(tableName, "c_tahun_ajaran")
	_tTargetSekolah.CIDTingkat = field.NewInt32(tableName, "c_id_tingkat")
	_tTargetSekolah.CJumlahKelas = field.NewInt32(tableName, "c_jumlah_kelas")
	_tTargetSekolah.CJmlSiswaSekolah = field.NewInt32(tableName, "c_jml_siswa_sekolah")
	_tTargetSekolah.CJmlSiswaGo = field.NewInt32(tableName, "c_jml_siswa_go")
	_tTargetSekolah.CPotensi = field.NewInt32(tableName, "c_potensi")
	_tTargetSekolah.CTargetSiswa = field.NewInt32(tableName, "c_target_siswa")
	_tTargetSekolah.CTargetRangking = field.NewInt32(tableName, "c_target_rangking")
	_tTargetSekolah.CKurikulum = field.NewString(tableName, "c_kurikulum")
	_tTargetSekolah.CIsKerjaSama = field.NewString(tableName, "c_is_kerja_sama")
	_tTargetSekolah.CUpdater = field.NewString(tableName, "c_updater")
	_tTargetSekolah.CLastUpdate = field.NewTime(tableName, "c_last_update")
	_tTargetSekolah.CStatus = field.NewString(tableName, "c_status")
	_tTargetSekolah.CIsOnline = field.NewString(tableName, "c_is_online")
	_tTargetSekolah.CPareto = field.NewInt32(tableName, "c_pareto")

	_tTargetSekolah.fillFieldMap()

	return _tTargetSekolah
}

type tTargetSekolah struct {
	tTargetSekolahDo

	ALL              field.Asterisk
	CIDSekolah       field.Int32
	CIDGedung        field.Int32
	CTahunAjaran     field.String
	CIDTingkat       field.Int32
	CJumlahKelas     field.Int32
	CJmlSiswaSekolah field.Int32
	CJmlSiswaGo      field.Int32
	CPotensi         field.Int32
	CTargetSiswa     field.Int32
	CTargetRangking  field.Int32
	CKurikulum       field.String
	CIsKerjaSama     field.String
	CUpdater         field.String
	CLastUpdate      field.Time
	CStatus          field.String
	CIsOnline        field.String
	CPareto          field.Int32

	fieldMap map[string]field.Expr
}

func (t tTargetSekolah) Table(newTableName string) *tTargetSekolah {
	t.tTargetSekolahDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tTargetSekolah) As(alias string) *tTargetSekolah {
	t.tTargetSekolahDo.DO = *(t.tTargetSekolahDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tTargetSekolah) updateTableName(table string) *tTargetSekolah {
	t.ALL = field.NewAsterisk(table)
	t.CIDSekolah = field.NewInt32(table, "c_id_sekolah")
	t.CIDGedung = field.NewInt32(table, "c_id_gedung")
	t.CTahunAjaran = field.NewString(table, "c_tahun_ajaran")
	t.CIDTingkat = field.NewInt32(table, "c_id_tingkat")
	t.CJumlahKelas = field.NewInt32(table, "c_jumlah_kelas")
	t.CJmlSiswaSekolah = field.NewInt32(table, "c_jml_siswa_sekolah")
	t.CJmlSiswaGo = field.NewInt32(table, "c_jml_siswa_go")
	t.CPotensi = field.NewInt32(table, "c_potensi")
	t.CTargetSiswa = field.NewInt32(table, "c_target_siswa")
	t.CTargetRangking = field.NewInt32(table, "c_target_rangking")
	t.CKurikulum = field.NewString(table, "c_kurikulum")
	t.CIsKerjaSama = field.NewString(table, "c_is_kerja_sama")
	t.CUpdater = field.NewString(table, "c_updater")
	t.CLastUpdate = field.NewTime(table, "c_last_update")
	t.CStatus = field.NewString(table, "c_status")
	t.CIsOnline = field.NewString(table, "c_is_online")
	t.CPareto = field.NewInt32(table, "c_pareto")

	t.fillFieldMap()

	return t
}

func (t *tTargetSekolah) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tTargetSekolah) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 17)
	t.fieldMap["c_id_sekolah"] = t.CIDSekolah
	t.fieldMap["c_id_gedung"] = t.CIDGedung
	t.fieldMap["c_tahun_ajaran"] = t.CTahunAjaran
	t.fieldMap["c_id_tingkat"] = t.CIDTingkat
	t.fieldMap["c_jumlah_kelas"] = t.CJumlahKelas
	t.fieldMap["c_jml_siswa_sekolah"] = t.CJmlSiswaSekolah
	t.fieldMap["c_jml_siswa_go"] = t.CJmlSiswaGo
	t.fieldMap["c_potensi"] = t.CPotensi
	t.fieldMap["c_target_siswa"] = t.CTargetSiswa
	t.fieldMap["c_target_rangking"] = t.CTargetRangking
	t.fieldMap["c_kurikulum"] = t.CKurikulum
	t.fieldMap["c_is_kerja_sama"] = t.CIsKerjaSama
	t.fieldMap["c_updater"] = t.CUpdater
	t.fieldMap["c_last_update"] = t.CLastUpdate
	t.fieldMap["c_status"] = t.CStatus
	t.fieldMap["c_is_online"] = t.CIsOnline
	t.fieldMap["c_pareto"] = t.CPareto
}

func (t tTargetSekolah) clone(db *gorm.DB) tTargetSekolah {
	t.tTargetSekolahDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tTargetSekolah) replaceDB(db *gorm.DB) tTargetSekolah {
	t.tTargetSekolahDo.ReplaceDB(db)
	return t
}

type tTargetSekolahDo struct{ gen.DO }

type ITTargetSekolahDo interface {
	gen.SubQuery
	Debug() ITTargetSekolahDo
	WithContext(ctx context.Context) ITTargetSekolahDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITTargetSekolahDo
	WriteDB() ITTargetSekolahDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITTargetSekolahDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITTargetSekolahDo
	Not(conds ...gen.Condition) ITTargetSekolahDo
	Or(conds ...gen.Condition) ITTargetSekolahDo
	Select(conds ...field.Expr) ITTargetSekolahDo
	Where(conds ...gen.Condition) ITTargetSekolahDo
	Order(conds ...field.Expr) ITTargetSekolahDo
	Distinct(cols ...field.Expr) ITTargetSekolahDo
	Omit(cols ...field.Expr) ITTargetSekolahDo
	Join(table schema.Tabler, on ...field.Expr) ITTargetSekolahDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITTargetSekolahDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITTargetSekolahDo
	Group(cols ...field.Expr) ITTargetSekolahDo
	Having(conds ...gen.Condition) ITTargetSekolahDo
	Limit(limit int) ITTargetSekolahDo
	Offset(offset int) ITTargetSekolahDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITTargetSekolahDo
	Unscoped() ITTargetSekolahDo
	Create(values ...*model.TTargetSekolah) error
	CreateInBatches(values []*model.TTargetSekolah, batchSize int) error
	Save(values ...*model.TTargetSekolah) error
	First() (*model.TTargetSekolah, error)
	Take() (*model.TTargetSekolah, error)
	Last() (*model.TTargetSekolah, error)
	Find() ([]*model.TTargetSekolah, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TTargetSekolah, err error)
	FindInBatches(result *[]*model.TTargetSekolah, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TTargetSekolah) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITTargetSekolahDo
	Assign(attrs ...field.AssignExpr) ITTargetSekolahDo
	Joins(fields ...field.RelationField) ITTargetSekolahDo
	Preload(fields ...field.RelationField) ITTargetSekolahDo
	FirstOrInit() (*model.TTargetSekolah, error)
	FirstOrCreate() (*model.TTargetSekolah, error)
	FindByPage(offset int, limit int) (result []*model.TTargetSekolah, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITTargetSekolahDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tTargetSekolahDo) Debug() ITTargetSekolahDo {
	return t.withDO(t.DO.Debug())
}

func (t tTargetSekolahDo) WithContext(ctx context.Context) ITTargetSekolahDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tTargetSekolahDo) ReadDB() ITTargetSekolahDo {
	return t.Clauses(dbresolver.Read)
}

func (t tTargetSekolahDo) WriteDB() ITTargetSekolahDo {
	return t.Clauses(dbresolver.Write)
}

func (t tTargetSekolahDo) Session(config *gorm.Session) ITTargetSekolahDo {
	return t.withDO(t.DO.Session(config))
}

func (t tTargetSekolahDo) Clauses(conds ...clause.Expression) ITTargetSekolahDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tTargetSekolahDo) Returning(value interface{}, columns ...string) ITTargetSekolahDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tTargetSekolahDo) Not(conds ...gen.Condition) ITTargetSekolahDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tTargetSekolahDo) Or(conds ...gen.Condition) ITTargetSekolahDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tTargetSekolahDo) Select(conds ...field.Expr) ITTargetSekolahDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tTargetSekolahDo) Where(conds ...gen.Condition) ITTargetSekolahDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tTargetSekolahDo) Order(conds ...field.Expr) ITTargetSekolahDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tTargetSekolahDo) Distinct(cols ...field.Expr) ITTargetSekolahDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tTargetSekolahDo) Omit(cols ...field.Expr) ITTargetSekolahDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tTargetSekolahDo) Join(table schema.Tabler, on ...field.Expr) ITTargetSekolahDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tTargetSekolahDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITTargetSekolahDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tTargetSekolahDo) RightJoin(table schema.Tabler, on ...field.Expr) ITTargetSekolahDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tTargetSekolahDo) Group(cols ...field.Expr) ITTargetSekolahDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tTargetSekolahDo) Having(conds ...gen.Condition) ITTargetSekolahDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tTargetSekolahDo) Limit(limit int) ITTargetSekolahDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tTargetSekolahDo) Offset(offset int) ITTargetSekolahDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tTargetSekolahDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITTargetSekolahDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tTargetSekolahDo) Unscoped() ITTargetSekolahDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tTargetSekolahDo) Create(values ...*model.TTargetSekolah) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tTargetSekolahDo) CreateInBatches(values []*model.TTargetSekolah, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tTargetSekolahDo) Save(values ...*model.TTargetSekolah) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tTargetSekolahDo) First() (*model.TTargetSekolah, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TTargetSekolah), nil
	}
}

func (t tTargetSekolahDo) Take() (*model.TTargetSekolah, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TTargetSekolah), nil
	}
}

func (t tTargetSekolahDo) Last() (*model.TTargetSekolah, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TTargetSekolah), nil
	}
}

func (t tTargetSekolahDo) Find() ([]*model.TTargetSekolah, error) {
	result, err := t.DO.Find()
	return result.([]*model.TTargetSekolah), err
}

func (t tTargetSekolahDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TTargetSekolah, err error) {
	buf := make([]*model.TTargetSekolah, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tTargetSekolahDo) FindInBatches(result *[]*model.TTargetSekolah, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tTargetSekolahDo) Attrs(attrs ...field.AssignExpr) ITTargetSekolahDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tTargetSekolahDo) Assign(attrs ...field.AssignExpr) ITTargetSekolahDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tTargetSekolahDo) Joins(fields ...field.RelationField) ITTargetSekolahDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tTargetSekolahDo) Preload(fields ...field.RelationField) ITTargetSekolahDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tTargetSekolahDo) FirstOrInit() (*model.TTargetSekolah, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TTargetSekolah), nil
	}
}

func (t tTargetSekolahDo) FirstOrCreate() (*model.TTargetSekolah, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TTargetSekolah), nil
	}
}

func (t tTargetSekolahDo) FindByPage(offset int, limit int) (result []*model.TTargetSekolah, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tTargetSekolahDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tTargetSekolahDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tTargetSekolahDo) Delete(models ...*model.TTargetSekolah) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tTargetSekolahDo) withDO(do gen.Dao) *tTargetSekolahDo {
	t.DO = *do.(*gen.DO)
	return t
}
