// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-bponline/m/gen/model"
)

func newTTargetSekolahTahunLalu(db *gorm.DB, opts ...gen.DOOption) tTargetSekolahTahunLalu {
	_tTargetSekolahTahunLalu := tTargetSekolahTahunLalu{}

	_tTargetSekolahTahunLalu.tTargetSekolahTahunLaluDo.UseDB(db, opts...)
	_tTargetSekolahTahunLalu.tTargetSekolahTahunLaluDo.UseModel(&model.TTargetSekolahTahunLalu{})

	tableName := _tTargetSekolahTahunLalu.tTargetSekolahTahunLaluDo.TableName()
	_tTargetSekolahTahunLalu.ALL = field.NewAsterisk(tableName)
	_tTargetSekolahTahunLalu.CNis = field.NewString(tableName, "c_nis")
	_tTargetSekolahTahunLalu.CIDDikDasMen = field.NewInt32(tableName, "c_id_dik_das_men")
	_tTargetSekolahTahunLalu.CIDBundling = field.NewInt32(tableName, "c_id_bundling")
	_tTargetSekolahTahunLalu.CNamaBundling = field.NewString(tableName, "c_nama_bundling")
	_tTargetSekolahTahunLalu.CIDJenisKelas = field.NewInt32(tableName, "c_id_jenis_kelas")
	_tTargetSekolahTahunLalu.CTahunAjaran = field.NewString(tableName, "c_tahun_ajaran")
	_tTargetSekolahTahunLalu.CIDSekolahKelas = field.NewInt32(tableName, "c_id_sekolah_kelas")
	_tTargetSekolahTahunLalu.CIDGedung = field.NewInt32(tableName, "c_id_gedung")

	_tTargetSekolahTahunLalu.fillFieldMap()

	return _tTargetSekolahTahunLalu
}

type tTargetSekolahTahunLalu struct {
	tTargetSekolahTahunLaluDo

	ALL             field.Asterisk
	CNis            field.String
	CIDDikDasMen    field.Int32
	CIDBundling     field.Int32
	CNamaBundling   field.String
	CIDJenisKelas   field.Int32
	CTahunAjaran    field.String
	CIDSekolahKelas field.Int32
	CIDGedung       field.Int32

	fieldMap map[string]field.Expr
}

func (t tTargetSekolahTahunLalu) Table(newTableName string) *tTargetSekolahTahunLalu {
	t.tTargetSekolahTahunLaluDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tTargetSekolahTahunLalu) As(alias string) *tTargetSekolahTahunLalu {
	t.tTargetSekolahTahunLaluDo.DO = *(t.tTargetSekolahTahunLaluDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tTargetSekolahTahunLalu) updateTableName(table string) *tTargetSekolahTahunLalu {
	t.ALL = field.NewAsterisk(table)
	t.CNis = field.NewString(table, "c_nis")
	t.CIDDikDasMen = field.NewInt32(table, "c_id_dik_das_men")
	t.CIDBundling = field.NewInt32(table, "c_id_bundling")
	t.CNamaBundling = field.NewString(table, "c_nama_bundling")
	t.CIDJenisKelas = field.NewInt32(table, "c_id_jenis_kelas")
	t.CTahunAjaran = field.NewString(table, "c_tahun_ajaran")
	t.CIDSekolahKelas = field.NewInt32(table, "c_id_sekolah_kelas")
	t.CIDGedung = field.NewInt32(table, "c_id_gedung")

	t.fillFieldMap()

	return t
}

func (t *tTargetSekolahTahunLalu) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tTargetSekolahTahunLalu) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 8)
	t.fieldMap["c_nis"] = t.CNis
	t.fieldMap["c_id_dik_das_men"] = t.CIDDikDasMen
	t.fieldMap["c_id_bundling"] = t.CIDBundling
	t.fieldMap["c_nama_bundling"] = t.CNamaBundling
	t.fieldMap["c_id_jenis_kelas"] = t.CIDJenisKelas
	t.fieldMap["c_tahun_ajaran"] = t.CTahunAjaran
	t.fieldMap["c_id_sekolah_kelas"] = t.CIDSekolahKelas
	t.fieldMap["c_id_gedung"] = t.CIDGedung
}

func (t tTargetSekolahTahunLalu) clone(db *gorm.DB) tTargetSekolahTahunLalu {
	t.tTargetSekolahTahunLaluDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tTargetSekolahTahunLalu) replaceDB(db *gorm.DB) tTargetSekolahTahunLalu {
	t.tTargetSekolahTahunLaluDo.ReplaceDB(db)
	return t
}

type tTargetSekolahTahunLaluDo struct{ gen.DO }

type ITTargetSekolahTahunLaluDo interface {
	gen.SubQuery
	Debug() ITTargetSekolahTahunLaluDo
	WithContext(ctx context.Context) ITTargetSekolahTahunLaluDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITTargetSekolahTahunLaluDo
	WriteDB() ITTargetSekolahTahunLaluDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITTargetSekolahTahunLaluDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITTargetSekolahTahunLaluDo
	Not(conds ...gen.Condition) ITTargetSekolahTahunLaluDo
	Or(conds ...gen.Condition) ITTargetSekolahTahunLaluDo
	Select(conds ...field.Expr) ITTargetSekolahTahunLaluDo
	Where(conds ...gen.Condition) ITTargetSekolahTahunLaluDo
	Order(conds ...field.Expr) ITTargetSekolahTahunLaluDo
	Distinct(cols ...field.Expr) ITTargetSekolahTahunLaluDo
	Omit(cols ...field.Expr) ITTargetSekolahTahunLaluDo
	Join(table schema.Tabler, on ...field.Expr) ITTargetSekolahTahunLaluDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITTargetSekolahTahunLaluDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITTargetSekolahTahunLaluDo
	Group(cols ...field.Expr) ITTargetSekolahTahunLaluDo
	Having(conds ...gen.Condition) ITTargetSekolahTahunLaluDo
	Limit(limit int) ITTargetSekolahTahunLaluDo
	Offset(offset int) ITTargetSekolahTahunLaluDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITTargetSekolahTahunLaluDo
	Unscoped() ITTargetSekolahTahunLaluDo
	Create(values ...*model.TTargetSekolahTahunLalu) error
	CreateInBatches(values []*model.TTargetSekolahTahunLalu, batchSize int) error
	Save(values ...*model.TTargetSekolahTahunLalu) error
	First() (*model.TTargetSekolahTahunLalu, error)
	Take() (*model.TTargetSekolahTahunLalu, error)
	Last() (*model.TTargetSekolahTahunLalu, error)
	Find() ([]*model.TTargetSekolahTahunLalu, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TTargetSekolahTahunLalu, err error)
	FindInBatches(result *[]*model.TTargetSekolahTahunLalu, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TTargetSekolahTahunLalu) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITTargetSekolahTahunLaluDo
	Assign(attrs ...field.AssignExpr) ITTargetSekolahTahunLaluDo
	Joins(fields ...field.RelationField) ITTargetSekolahTahunLaluDo
	Preload(fields ...field.RelationField) ITTargetSekolahTahunLaluDo
	FirstOrInit() (*model.TTargetSekolahTahunLalu, error)
	FirstOrCreate() (*model.TTargetSekolahTahunLalu, error)
	FindByPage(offset int, limit int) (result []*model.TTargetSekolahTahunLalu, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITTargetSekolahTahunLaluDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tTargetSekolahTahunLaluDo) Debug() ITTargetSekolahTahunLaluDo {
	return t.withDO(t.DO.Debug())
}

func (t tTargetSekolahTahunLaluDo) WithContext(ctx context.Context) ITTargetSekolahTahunLaluDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tTargetSekolahTahunLaluDo) ReadDB() ITTargetSekolahTahunLaluDo {
	return t.Clauses(dbresolver.Read)
}

func (t tTargetSekolahTahunLaluDo) WriteDB() ITTargetSekolahTahunLaluDo {
	return t.Clauses(dbresolver.Write)
}

func (t tTargetSekolahTahunLaluDo) Session(config *gorm.Session) ITTargetSekolahTahunLaluDo {
	return t.withDO(t.DO.Session(config))
}

func (t tTargetSekolahTahunLaluDo) Clauses(conds ...clause.Expression) ITTargetSekolahTahunLaluDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tTargetSekolahTahunLaluDo) Returning(value interface{}, columns ...string) ITTargetSekolahTahunLaluDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tTargetSekolahTahunLaluDo) Not(conds ...gen.Condition) ITTargetSekolahTahunLaluDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tTargetSekolahTahunLaluDo) Or(conds ...gen.Condition) ITTargetSekolahTahunLaluDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tTargetSekolahTahunLaluDo) Select(conds ...field.Expr) ITTargetSekolahTahunLaluDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tTargetSekolahTahunLaluDo) Where(conds ...gen.Condition) ITTargetSekolahTahunLaluDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tTargetSekolahTahunLaluDo) Order(conds ...field.Expr) ITTargetSekolahTahunLaluDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tTargetSekolahTahunLaluDo) Distinct(cols ...field.Expr) ITTargetSekolahTahunLaluDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tTargetSekolahTahunLaluDo) Omit(cols ...field.Expr) ITTargetSekolahTahunLaluDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tTargetSekolahTahunLaluDo) Join(table schema.Tabler, on ...field.Expr) ITTargetSekolahTahunLaluDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tTargetSekolahTahunLaluDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITTargetSekolahTahunLaluDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tTargetSekolahTahunLaluDo) RightJoin(table schema.Tabler, on ...field.Expr) ITTargetSekolahTahunLaluDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tTargetSekolahTahunLaluDo) Group(cols ...field.Expr) ITTargetSekolahTahunLaluDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tTargetSekolahTahunLaluDo) Having(conds ...gen.Condition) ITTargetSekolahTahunLaluDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tTargetSekolahTahunLaluDo) Limit(limit int) ITTargetSekolahTahunLaluDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tTargetSekolahTahunLaluDo) Offset(offset int) ITTargetSekolahTahunLaluDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tTargetSekolahTahunLaluDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITTargetSekolahTahunLaluDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tTargetSekolahTahunLaluDo) Unscoped() ITTargetSekolahTahunLaluDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tTargetSekolahTahunLaluDo) Create(values ...*model.TTargetSekolahTahunLalu) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tTargetSekolahTahunLaluDo) CreateInBatches(values []*model.TTargetSekolahTahunLalu, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tTargetSekolahTahunLaluDo) Save(values ...*model.TTargetSekolahTahunLalu) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tTargetSekolahTahunLaluDo) First() (*model.TTargetSekolahTahunLalu, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TTargetSekolahTahunLalu), nil
	}
}

func (t tTargetSekolahTahunLaluDo) Take() (*model.TTargetSekolahTahunLalu, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TTargetSekolahTahunLalu), nil
	}
}

func (t tTargetSekolahTahunLaluDo) Last() (*model.TTargetSekolahTahunLalu, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TTargetSekolahTahunLalu), nil
	}
}

func (t tTargetSekolahTahunLaluDo) Find() ([]*model.TTargetSekolahTahunLalu, error) {
	result, err := t.DO.Find()
	return result.([]*model.TTargetSekolahTahunLalu), err
}

func (t tTargetSekolahTahunLaluDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TTargetSekolahTahunLalu, err error) {
	buf := make([]*model.TTargetSekolahTahunLalu, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tTargetSekolahTahunLaluDo) FindInBatches(result *[]*model.TTargetSekolahTahunLalu, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tTargetSekolahTahunLaluDo) Attrs(attrs ...field.AssignExpr) ITTargetSekolahTahunLaluDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tTargetSekolahTahunLaluDo) Assign(attrs ...field.AssignExpr) ITTargetSekolahTahunLaluDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tTargetSekolahTahunLaluDo) Joins(fields ...field.RelationField) ITTargetSekolahTahunLaluDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tTargetSekolahTahunLaluDo) Preload(fields ...field.RelationField) ITTargetSekolahTahunLaluDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tTargetSekolahTahunLaluDo) FirstOrInit() (*model.TTargetSekolahTahunLalu, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TTargetSekolahTahunLalu), nil
	}
}

func (t tTargetSekolahTahunLaluDo) FirstOrCreate() (*model.TTargetSekolahTahunLalu, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TTargetSekolahTahunLalu), nil
	}
}

func (t tTargetSekolahTahunLaluDo) FindByPage(offset int, limit int) (result []*model.TTargetSekolahTahunLalu, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tTargetSekolahTahunLaluDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tTargetSekolahTahunLaluDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tTargetSekolahTahunLaluDo) Delete(models ...*model.TTargetSekolahTahunLalu) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tTargetSekolahTahunLaluDo) withDO(do gen.Dao) *tTargetSekolahTahunLaluDo {
	t.DO = *do.(*gen.DO)
	return t
}
