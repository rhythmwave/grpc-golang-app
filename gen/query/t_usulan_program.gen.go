// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-bponline/m/gen/model"
)

func newTUsulanProgram(db *gorm.DB, opts ...gen.DOOption) tUsulanProgram {
	_tUsulanProgram := tUsulanProgram{}

	_tUsulanProgram.tUsulanProgramDo.UseDB(db, opts...)
	_tUsulanProgram.tUsulanProgramDo.UseModel(&model.TUsulanProgram{})

	tableName := _tUsulanProgram.tUsulanProgramDo.TableName()
	_tUsulanProgram.ALL = field.NewAsterisk(tableName)
	_tUsulanProgram.CIDUsulan = field.NewInt32(tableName, "c_id_usulan")
	_tUsulanProgram.CIDPenanda = field.NewInt32(tableName, "c_id_penanda")
	_tUsulanProgram.CNamaProduk = field.NewString(tableName, "c_nama_produk")
	_tUsulanProgram.CDeskripsi = field.NewString(tableName, "c_deskripsi")
	_tUsulanProgram.CJumlahTarget = field.NewFloat64(tableName, "c_jumlah_target")
	_tUsulanProgram.CJumlahSiswaPerKelas = field.NewFloat64(tableName, "c_jumlah_siswa_per_kelas")
	_tUsulanProgram.CFasilitas = field.NewString(tableName, "c_fasilitas")
	_tUsulanProgram.CFitur = field.NewString(tableName, "c_fitur")
	_tUsulanProgram.CHargaMin = field.NewFloat64(tableName, "c_harga_min")
	_tUsulanProgram.CHargaMax = field.NewFloat64(tableName, "c_harga_max")
	_tUsulanProgram.CJenisLayanan = field.NewString(tableName, "c_jenis_layanan")
	_tUsulanProgram.CStatus = field.NewString(tableName, "c_status")
	_tUsulanProgram.CUpdater = field.NewString(tableName, "c_updater")
	_tUsulanProgram.CLastUpdate = field.NewTime(tableName, "c_last_update")
	_tUsulanProgram.CTahunAjaran = field.NewString(tableName, "c_tahun_ajaran")

	_tUsulanProgram.fillFieldMap()

	return _tUsulanProgram
}

type tUsulanProgram struct {
	tUsulanProgramDo

	ALL                  field.Asterisk
	CIDUsulan            field.Int32
	CIDPenanda           field.Int32
	CNamaProduk          field.String
	CDeskripsi           field.String
	CJumlahTarget        field.Float64
	CJumlahSiswaPerKelas field.Float64
	CFasilitas           field.String
	CFitur               field.String
	CHargaMin            field.Float64
	CHargaMax            field.Float64
	CJenisLayanan        field.String
	CStatus              field.String
	CUpdater             field.String
	CLastUpdate          field.Time
	CTahunAjaran         field.String

	fieldMap map[string]field.Expr
}

func (t tUsulanProgram) Table(newTableName string) *tUsulanProgram {
	t.tUsulanProgramDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tUsulanProgram) As(alias string) *tUsulanProgram {
	t.tUsulanProgramDo.DO = *(t.tUsulanProgramDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tUsulanProgram) updateTableName(table string) *tUsulanProgram {
	t.ALL = field.NewAsterisk(table)
	t.CIDUsulan = field.NewInt32(table, "c_id_usulan")
	t.CIDPenanda = field.NewInt32(table, "c_id_penanda")
	t.CNamaProduk = field.NewString(table, "c_nama_produk")
	t.CDeskripsi = field.NewString(table, "c_deskripsi")
	t.CJumlahTarget = field.NewFloat64(table, "c_jumlah_target")
	t.CJumlahSiswaPerKelas = field.NewFloat64(table, "c_jumlah_siswa_per_kelas")
	t.CFasilitas = field.NewString(table, "c_fasilitas")
	t.CFitur = field.NewString(table, "c_fitur")
	t.CHargaMin = field.NewFloat64(table, "c_harga_min")
	t.CHargaMax = field.NewFloat64(table, "c_harga_max")
	t.CJenisLayanan = field.NewString(table, "c_jenis_layanan")
	t.CStatus = field.NewString(table, "c_status")
	t.CUpdater = field.NewString(table, "c_updater")
	t.CLastUpdate = field.NewTime(table, "c_last_update")
	t.CTahunAjaran = field.NewString(table, "c_tahun_ajaran")

	t.fillFieldMap()

	return t
}

func (t *tUsulanProgram) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tUsulanProgram) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 15)
	t.fieldMap["c_id_usulan"] = t.CIDUsulan
	t.fieldMap["c_id_penanda"] = t.CIDPenanda
	t.fieldMap["c_nama_produk"] = t.CNamaProduk
	t.fieldMap["c_deskripsi"] = t.CDeskripsi
	t.fieldMap["c_jumlah_target"] = t.CJumlahTarget
	t.fieldMap["c_jumlah_siswa_per_kelas"] = t.CJumlahSiswaPerKelas
	t.fieldMap["c_fasilitas"] = t.CFasilitas
	t.fieldMap["c_fitur"] = t.CFitur
	t.fieldMap["c_harga_min"] = t.CHargaMin
	t.fieldMap["c_harga_max"] = t.CHargaMax
	t.fieldMap["c_jenis_layanan"] = t.CJenisLayanan
	t.fieldMap["c_status"] = t.CStatus
	t.fieldMap["c_updater"] = t.CUpdater
	t.fieldMap["c_last_update"] = t.CLastUpdate
	t.fieldMap["c_tahun_ajaran"] = t.CTahunAjaran
}

func (t tUsulanProgram) clone(db *gorm.DB) tUsulanProgram {
	t.tUsulanProgramDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tUsulanProgram) replaceDB(db *gorm.DB) tUsulanProgram {
	t.tUsulanProgramDo.ReplaceDB(db)
	return t
}

type tUsulanProgramDo struct{ gen.DO }

type ITUsulanProgramDo interface {
	gen.SubQuery
	Debug() ITUsulanProgramDo
	WithContext(ctx context.Context) ITUsulanProgramDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITUsulanProgramDo
	WriteDB() ITUsulanProgramDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITUsulanProgramDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITUsulanProgramDo
	Not(conds ...gen.Condition) ITUsulanProgramDo
	Or(conds ...gen.Condition) ITUsulanProgramDo
	Select(conds ...field.Expr) ITUsulanProgramDo
	Where(conds ...gen.Condition) ITUsulanProgramDo
	Order(conds ...field.Expr) ITUsulanProgramDo
	Distinct(cols ...field.Expr) ITUsulanProgramDo
	Omit(cols ...field.Expr) ITUsulanProgramDo
	Join(table schema.Tabler, on ...field.Expr) ITUsulanProgramDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITUsulanProgramDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITUsulanProgramDo
	Group(cols ...field.Expr) ITUsulanProgramDo
	Having(conds ...gen.Condition) ITUsulanProgramDo
	Limit(limit int) ITUsulanProgramDo
	Offset(offset int) ITUsulanProgramDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITUsulanProgramDo
	Unscoped() ITUsulanProgramDo
	Create(values ...*model.TUsulanProgram) error
	CreateInBatches(values []*model.TUsulanProgram, batchSize int) error
	Save(values ...*model.TUsulanProgram) error
	First() (*model.TUsulanProgram, error)
	Take() (*model.TUsulanProgram, error)
	Last() (*model.TUsulanProgram, error)
	Find() ([]*model.TUsulanProgram, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TUsulanProgram, err error)
	FindInBatches(result *[]*model.TUsulanProgram, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TUsulanProgram) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITUsulanProgramDo
	Assign(attrs ...field.AssignExpr) ITUsulanProgramDo
	Joins(fields ...field.RelationField) ITUsulanProgramDo
	Preload(fields ...field.RelationField) ITUsulanProgramDo
	FirstOrInit() (*model.TUsulanProgram, error)
	FirstOrCreate() (*model.TUsulanProgram, error)
	FindByPage(offset int, limit int) (result []*model.TUsulanProgram, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITUsulanProgramDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tUsulanProgramDo) Debug() ITUsulanProgramDo {
	return t.withDO(t.DO.Debug())
}

func (t tUsulanProgramDo) WithContext(ctx context.Context) ITUsulanProgramDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tUsulanProgramDo) ReadDB() ITUsulanProgramDo {
	return t.Clauses(dbresolver.Read)
}

func (t tUsulanProgramDo) WriteDB() ITUsulanProgramDo {
	return t.Clauses(dbresolver.Write)
}

func (t tUsulanProgramDo) Session(config *gorm.Session) ITUsulanProgramDo {
	return t.withDO(t.DO.Session(config))
}

func (t tUsulanProgramDo) Clauses(conds ...clause.Expression) ITUsulanProgramDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tUsulanProgramDo) Returning(value interface{}, columns ...string) ITUsulanProgramDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tUsulanProgramDo) Not(conds ...gen.Condition) ITUsulanProgramDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tUsulanProgramDo) Or(conds ...gen.Condition) ITUsulanProgramDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tUsulanProgramDo) Select(conds ...field.Expr) ITUsulanProgramDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tUsulanProgramDo) Where(conds ...gen.Condition) ITUsulanProgramDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tUsulanProgramDo) Order(conds ...field.Expr) ITUsulanProgramDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tUsulanProgramDo) Distinct(cols ...field.Expr) ITUsulanProgramDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tUsulanProgramDo) Omit(cols ...field.Expr) ITUsulanProgramDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tUsulanProgramDo) Join(table schema.Tabler, on ...field.Expr) ITUsulanProgramDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tUsulanProgramDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITUsulanProgramDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tUsulanProgramDo) RightJoin(table schema.Tabler, on ...field.Expr) ITUsulanProgramDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tUsulanProgramDo) Group(cols ...field.Expr) ITUsulanProgramDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tUsulanProgramDo) Having(conds ...gen.Condition) ITUsulanProgramDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tUsulanProgramDo) Limit(limit int) ITUsulanProgramDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tUsulanProgramDo) Offset(offset int) ITUsulanProgramDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tUsulanProgramDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITUsulanProgramDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tUsulanProgramDo) Unscoped() ITUsulanProgramDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tUsulanProgramDo) Create(values ...*model.TUsulanProgram) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tUsulanProgramDo) CreateInBatches(values []*model.TUsulanProgram, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tUsulanProgramDo) Save(values ...*model.TUsulanProgram) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tUsulanProgramDo) First() (*model.TUsulanProgram, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUsulanProgram), nil
	}
}

func (t tUsulanProgramDo) Take() (*model.TUsulanProgram, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUsulanProgram), nil
	}
}

func (t tUsulanProgramDo) Last() (*model.TUsulanProgram, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUsulanProgram), nil
	}
}

func (t tUsulanProgramDo) Find() ([]*model.TUsulanProgram, error) {
	result, err := t.DO.Find()
	return result.([]*model.TUsulanProgram), err
}

func (t tUsulanProgramDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TUsulanProgram, err error) {
	buf := make([]*model.TUsulanProgram, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tUsulanProgramDo) FindInBatches(result *[]*model.TUsulanProgram, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tUsulanProgramDo) Attrs(attrs ...field.AssignExpr) ITUsulanProgramDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tUsulanProgramDo) Assign(attrs ...field.AssignExpr) ITUsulanProgramDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tUsulanProgramDo) Joins(fields ...field.RelationField) ITUsulanProgramDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tUsulanProgramDo) Preload(fields ...field.RelationField) ITUsulanProgramDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tUsulanProgramDo) FirstOrInit() (*model.TUsulanProgram, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUsulanProgram), nil
	}
}

func (t tUsulanProgramDo) FirstOrCreate() (*model.TUsulanProgram, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUsulanProgram), nil
	}
}

func (t tUsulanProgramDo) FindByPage(offset int, limit int) (result []*model.TUsulanProgram, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tUsulanProgramDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tUsulanProgramDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tUsulanProgramDo) Delete(models ...*model.TUsulanProgram) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tUsulanProgramDo) withDO(do gen.Dao) *tUsulanProgramDo {
	t.DO = *do.(*gen.DO)
	return t
}
