// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-bponline/m/gen/model"
)

func newTUtbkDetail(db *gorm.DB, opts ...gen.DOOption) tUtbkDetail {
	_tUtbkDetail := tUtbkDetail{}

	_tUtbkDetail.tUtbkDetailDo.UseDB(db, opts...)
	_tUtbkDetail.tUtbkDetailDo.UseModel(&model.TUtbkDetail{})

	tableName := _tUtbkDetail.tUtbkDetailDo.TableName()
	_tUtbkDetail.ALL = field.NewAsterisk(tableName)
	_tUtbkDetail.CNoUtbk = field.NewString(tableName, "c_no_utbk")
	_tUtbkDetail.CKodePilihan = field.NewString(tableName, "c_kode_pilihan")
	_tUtbkDetail.CTglUpload = field.NewTime(tableName, "c_tgl_upload")
	_tUtbkDetail.CUpdater = field.NewString(tableName, "c_updater")
	_tUtbkDetail.CEditPilihan = field.NewString(tableName, "c_edit_pilihan")

	_tUtbkDetail.fillFieldMap()

	return _tUtbkDetail
}

type tUtbkDetail struct {
	tUtbkDetailDo

	ALL          field.Asterisk
	CNoUtbk      field.String
	CKodePilihan field.String
	CTglUpload   field.Time
	CUpdater     field.String
	CEditPilihan field.String

	fieldMap map[string]field.Expr
}

func (t tUtbkDetail) Table(newTableName string) *tUtbkDetail {
	t.tUtbkDetailDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tUtbkDetail) As(alias string) *tUtbkDetail {
	t.tUtbkDetailDo.DO = *(t.tUtbkDetailDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tUtbkDetail) updateTableName(table string) *tUtbkDetail {
	t.ALL = field.NewAsterisk(table)
	t.CNoUtbk = field.NewString(table, "c_no_utbk")
	t.CKodePilihan = field.NewString(table, "c_kode_pilihan")
	t.CTglUpload = field.NewTime(table, "c_tgl_upload")
	t.CUpdater = field.NewString(table, "c_updater")
	t.CEditPilihan = field.NewString(table, "c_edit_pilihan")

	t.fillFieldMap()

	return t
}

func (t *tUtbkDetail) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tUtbkDetail) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 5)
	t.fieldMap["c_no_utbk"] = t.CNoUtbk
	t.fieldMap["c_kode_pilihan"] = t.CKodePilihan
	t.fieldMap["c_tgl_upload"] = t.CTglUpload
	t.fieldMap["c_updater"] = t.CUpdater
	t.fieldMap["c_edit_pilihan"] = t.CEditPilihan
}

func (t tUtbkDetail) clone(db *gorm.DB) tUtbkDetail {
	t.tUtbkDetailDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tUtbkDetail) replaceDB(db *gorm.DB) tUtbkDetail {
	t.tUtbkDetailDo.ReplaceDB(db)
	return t
}

type tUtbkDetailDo struct{ gen.DO }

type ITUtbkDetailDo interface {
	gen.SubQuery
	Debug() ITUtbkDetailDo
	WithContext(ctx context.Context) ITUtbkDetailDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITUtbkDetailDo
	WriteDB() ITUtbkDetailDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITUtbkDetailDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITUtbkDetailDo
	Not(conds ...gen.Condition) ITUtbkDetailDo
	Or(conds ...gen.Condition) ITUtbkDetailDo
	Select(conds ...field.Expr) ITUtbkDetailDo
	Where(conds ...gen.Condition) ITUtbkDetailDo
	Order(conds ...field.Expr) ITUtbkDetailDo
	Distinct(cols ...field.Expr) ITUtbkDetailDo
	Omit(cols ...field.Expr) ITUtbkDetailDo
	Join(table schema.Tabler, on ...field.Expr) ITUtbkDetailDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITUtbkDetailDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITUtbkDetailDo
	Group(cols ...field.Expr) ITUtbkDetailDo
	Having(conds ...gen.Condition) ITUtbkDetailDo
	Limit(limit int) ITUtbkDetailDo
	Offset(offset int) ITUtbkDetailDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITUtbkDetailDo
	Unscoped() ITUtbkDetailDo
	Create(values ...*model.TUtbkDetail) error
	CreateInBatches(values []*model.TUtbkDetail, batchSize int) error
	Save(values ...*model.TUtbkDetail) error
	First() (*model.TUtbkDetail, error)
	Take() (*model.TUtbkDetail, error)
	Last() (*model.TUtbkDetail, error)
	Find() ([]*model.TUtbkDetail, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TUtbkDetail, err error)
	FindInBatches(result *[]*model.TUtbkDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TUtbkDetail) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITUtbkDetailDo
	Assign(attrs ...field.AssignExpr) ITUtbkDetailDo
	Joins(fields ...field.RelationField) ITUtbkDetailDo
	Preload(fields ...field.RelationField) ITUtbkDetailDo
	FirstOrInit() (*model.TUtbkDetail, error)
	FirstOrCreate() (*model.TUtbkDetail, error)
	FindByPage(offset int, limit int) (result []*model.TUtbkDetail, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITUtbkDetailDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tUtbkDetailDo) Debug() ITUtbkDetailDo {
	return t.withDO(t.DO.Debug())
}

func (t tUtbkDetailDo) WithContext(ctx context.Context) ITUtbkDetailDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tUtbkDetailDo) ReadDB() ITUtbkDetailDo {
	return t.Clauses(dbresolver.Read)
}

func (t tUtbkDetailDo) WriteDB() ITUtbkDetailDo {
	return t.Clauses(dbresolver.Write)
}

func (t tUtbkDetailDo) Session(config *gorm.Session) ITUtbkDetailDo {
	return t.withDO(t.DO.Session(config))
}

func (t tUtbkDetailDo) Clauses(conds ...clause.Expression) ITUtbkDetailDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tUtbkDetailDo) Returning(value interface{}, columns ...string) ITUtbkDetailDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tUtbkDetailDo) Not(conds ...gen.Condition) ITUtbkDetailDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tUtbkDetailDo) Or(conds ...gen.Condition) ITUtbkDetailDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tUtbkDetailDo) Select(conds ...field.Expr) ITUtbkDetailDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tUtbkDetailDo) Where(conds ...gen.Condition) ITUtbkDetailDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tUtbkDetailDo) Order(conds ...field.Expr) ITUtbkDetailDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tUtbkDetailDo) Distinct(cols ...field.Expr) ITUtbkDetailDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tUtbkDetailDo) Omit(cols ...field.Expr) ITUtbkDetailDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tUtbkDetailDo) Join(table schema.Tabler, on ...field.Expr) ITUtbkDetailDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tUtbkDetailDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITUtbkDetailDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tUtbkDetailDo) RightJoin(table schema.Tabler, on ...field.Expr) ITUtbkDetailDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tUtbkDetailDo) Group(cols ...field.Expr) ITUtbkDetailDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tUtbkDetailDo) Having(conds ...gen.Condition) ITUtbkDetailDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tUtbkDetailDo) Limit(limit int) ITUtbkDetailDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tUtbkDetailDo) Offset(offset int) ITUtbkDetailDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tUtbkDetailDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITUtbkDetailDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tUtbkDetailDo) Unscoped() ITUtbkDetailDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tUtbkDetailDo) Create(values ...*model.TUtbkDetail) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tUtbkDetailDo) CreateInBatches(values []*model.TUtbkDetail, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tUtbkDetailDo) Save(values ...*model.TUtbkDetail) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tUtbkDetailDo) First() (*model.TUtbkDetail, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUtbkDetail), nil
	}
}

func (t tUtbkDetailDo) Take() (*model.TUtbkDetail, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUtbkDetail), nil
	}
}

func (t tUtbkDetailDo) Last() (*model.TUtbkDetail, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUtbkDetail), nil
	}
}

func (t tUtbkDetailDo) Find() ([]*model.TUtbkDetail, error) {
	result, err := t.DO.Find()
	return result.([]*model.TUtbkDetail), err
}

func (t tUtbkDetailDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TUtbkDetail, err error) {
	buf := make([]*model.TUtbkDetail, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tUtbkDetailDo) FindInBatches(result *[]*model.TUtbkDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tUtbkDetailDo) Attrs(attrs ...field.AssignExpr) ITUtbkDetailDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tUtbkDetailDo) Assign(attrs ...field.AssignExpr) ITUtbkDetailDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tUtbkDetailDo) Joins(fields ...field.RelationField) ITUtbkDetailDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tUtbkDetailDo) Preload(fields ...field.RelationField) ITUtbkDetailDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tUtbkDetailDo) FirstOrInit() (*model.TUtbkDetail, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUtbkDetail), nil
	}
}

func (t tUtbkDetailDo) FirstOrCreate() (*model.TUtbkDetail, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUtbkDetail), nil
	}
}

func (t tUtbkDetailDo) FindByPage(offset int, limit int) (result []*model.TUtbkDetail, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tUtbkDetailDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tUtbkDetailDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tUtbkDetailDo) Delete(models ...*model.TUtbkDetail) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tUtbkDetailDo) withDO(do gen.Dao) *tUtbkDetailDo {
	t.DO = *do.(*gen.DO)
	return t
}
