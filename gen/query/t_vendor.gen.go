// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-bponline/m/gen/model"
)

func newTVendor(db *gorm.DB, opts ...gen.DOOption) tVendor {
	_tVendor := tVendor{}

	_tVendor.tVendorDo.UseDB(db, opts...)
	_tVendor.tVendorDo.UseModel(&model.TVendor{})

	tableName := _tVendor.tVendorDo.TableName()
	_tVendor.ALL = field.NewAsterisk(tableName)
	_tVendor.CIDVendor = field.NewInt32(tableName, "c_id_vendor")
	_tVendor.CNamaVendor = field.NewString(tableName, "c_nama_vendor")
	_tVendor.CAlamatVendor = field.NewString(tableName, "c_alamat_vendor")
	_tVendor.CJenisVendor = field.NewString(tableName, "c_jenis_vendor")
	_tVendor.CContactPerson = field.NewString(tableName, "c_contact_person")
	_tVendor.CNoTelepon = field.NewString(tableName, "c_no_telepon")
	_tVendor.CIsPpkp = field.NewInt32(tableName, "c_is_ppkp")
	_tVendor.CNoNpwp = field.NewString(tableName, "c_no_npwp")
	_tVendor.CNamaNpwp = field.NewString(tableName, "c_nama_npwp")
	_tVendor.CStatus = field.NewString(tableName, "c_status")
	_tVendor.CUpdater = field.NewString(tableName, "c_updater")
	_tVendor.CLastUpdate = field.NewTime(tableName, "c_last_update")

	_tVendor.fillFieldMap()

	return _tVendor
}

type tVendor struct {
	tVendorDo

	ALL            field.Asterisk
	CIDVendor      field.Int32
	CNamaVendor    field.String
	CAlamatVendor  field.String
	CJenisVendor   field.String
	CContactPerson field.String
	CNoTelepon     field.String
	CIsPpkp        field.Int32
	CNoNpwp        field.String
	CNamaNpwp      field.String
	CStatus        field.String
	CUpdater       field.String
	CLastUpdate    field.Time

	fieldMap map[string]field.Expr
}

func (t tVendor) Table(newTableName string) *tVendor {
	t.tVendorDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tVendor) As(alias string) *tVendor {
	t.tVendorDo.DO = *(t.tVendorDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tVendor) updateTableName(table string) *tVendor {
	t.ALL = field.NewAsterisk(table)
	t.CIDVendor = field.NewInt32(table, "c_id_vendor")
	t.CNamaVendor = field.NewString(table, "c_nama_vendor")
	t.CAlamatVendor = field.NewString(table, "c_alamat_vendor")
	t.CJenisVendor = field.NewString(table, "c_jenis_vendor")
	t.CContactPerson = field.NewString(table, "c_contact_person")
	t.CNoTelepon = field.NewString(table, "c_no_telepon")
	t.CIsPpkp = field.NewInt32(table, "c_is_ppkp")
	t.CNoNpwp = field.NewString(table, "c_no_npwp")
	t.CNamaNpwp = field.NewString(table, "c_nama_npwp")
	t.CStatus = field.NewString(table, "c_status")
	t.CUpdater = field.NewString(table, "c_updater")
	t.CLastUpdate = field.NewTime(table, "c_last_update")

	t.fillFieldMap()

	return t
}

func (t *tVendor) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tVendor) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 12)
	t.fieldMap["c_id_vendor"] = t.CIDVendor
	t.fieldMap["c_nama_vendor"] = t.CNamaVendor
	t.fieldMap["c_alamat_vendor"] = t.CAlamatVendor
	t.fieldMap["c_jenis_vendor"] = t.CJenisVendor
	t.fieldMap["c_contact_person"] = t.CContactPerson
	t.fieldMap["c_no_telepon"] = t.CNoTelepon
	t.fieldMap["c_is_ppkp"] = t.CIsPpkp
	t.fieldMap["c_no_npwp"] = t.CNoNpwp
	t.fieldMap["c_nama_npwp"] = t.CNamaNpwp
	t.fieldMap["c_status"] = t.CStatus
	t.fieldMap["c_updater"] = t.CUpdater
	t.fieldMap["c_last_update"] = t.CLastUpdate
}

func (t tVendor) clone(db *gorm.DB) tVendor {
	t.tVendorDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tVendor) replaceDB(db *gorm.DB) tVendor {
	t.tVendorDo.ReplaceDB(db)
	return t
}

type tVendorDo struct{ gen.DO }

type ITVendorDo interface {
	gen.SubQuery
	Debug() ITVendorDo
	WithContext(ctx context.Context) ITVendorDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITVendorDo
	WriteDB() ITVendorDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITVendorDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITVendorDo
	Not(conds ...gen.Condition) ITVendorDo
	Or(conds ...gen.Condition) ITVendorDo
	Select(conds ...field.Expr) ITVendorDo
	Where(conds ...gen.Condition) ITVendorDo
	Order(conds ...field.Expr) ITVendorDo
	Distinct(cols ...field.Expr) ITVendorDo
	Omit(cols ...field.Expr) ITVendorDo
	Join(table schema.Tabler, on ...field.Expr) ITVendorDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITVendorDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITVendorDo
	Group(cols ...field.Expr) ITVendorDo
	Having(conds ...gen.Condition) ITVendorDo
	Limit(limit int) ITVendorDo
	Offset(offset int) ITVendorDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITVendorDo
	Unscoped() ITVendorDo
	Create(values ...*model.TVendor) error
	CreateInBatches(values []*model.TVendor, batchSize int) error
	Save(values ...*model.TVendor) error
	First() (*model.TVendor, error)
	Take() (*model.TVendor, error)
	Last() (*model.TVendor, error)
	Find() ([]*model.TVendor, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TVendor, err error)
	FindInBatches(result *[]*model.TVendor, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TVendor) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITVendorDo
	Assign(attrs ...field.AssignExpr) ITVendorDo
	Joins(fields ...field.RelationField) ITVendorDo
	Preload(fields ...field.RelationField) ITVendorDo
	FirstOrInit() (*model.TVendor, error)
	FirstOrCreate() (*model.TVendor, error)
	FindByPage(offset int, limit int) (result []*model.TVendor, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITVendorDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tVendorDo) Debug() ITVendorDo {
	return t.withDO(t.DO.Debug())
}

func (t tVendorDo) WithContext(ctx context.Context) ITVendorDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tVendorDo) ReadDB() ITVendorDo {
	return t.Clauses(dbresolver.Read)
}

func (t tVendorDo) WriteDB() ITVendorDo {
	return t.Clauses(dbresolver.Write)
}

func (t tVendorDo) Session(config *gorm.Session) ITVendorDo {
	return t.withDO(t.DO.Session(config))
}

func (t tVendorDo) Clauses(conds ...clause.Expression) ITVendorDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tVendorDo) Returning(value interface{}, columns ...string) ITVendorDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tVendorDo) Not(conds ...gen.Condition) ITVendorDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tVendorDo) Or(conds ...gen.Condition) ITVendorDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tVendorDo) Select(conds ...field.Expr) ITVendorDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tVendorDo) Where(conds ...gen.Condition) ITVendorDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tVendorDo) Order(conds ...field.Expr) ITVendorDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tVendorDo) Distinct(cols ...field.Expr) ITVendorDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tVendorDo) Omit(cols ...field.Expr) ITVendorDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tVendorDo) Join(table schema.Tabler, on ...field.Expr) ITVendorDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tVendorDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITVendorDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tVendorDo) RightJoin(table schema.Tabler, on ...field.Expr) ITVendorDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tVendorDo) Group(cols ...field.Expr) ITVendorDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tVendorDo) Having(conds ...gen.Condition) ITVendorDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tVendorDo) Limit(limit int) ITVendorDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tVendorDo) Offset(offset int) ITVendorDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tVendorDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITVendorDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tVendorDo) Unscoped() ITVendorDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tVendorDo) Create(values ...*model.TVendor) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tVendorDo) CreateInBatches(values []*model.TVendor, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tVendorDo) Save(values ...*model.TVendor) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tVendorDo) First() (*model.TVendor, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TVendor), nil
	}
}

func (t tVendorDo) Take() (*model.TVendor, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TVendor), nil
	}
}

func (t tVendorDo) Last() (*model.TVendor, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TVendor), nil
	}
}

func (t tVendorDo) Find() ([]*model.TVendor, error) {
	result, err := t.DO.Find()
	return result.([]*model.TVendor), err
}

func (t tVendorDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TVendor, err error) {
	buf := make([]*model.TVendor, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tVendorDo) FindInBatches(result *[]*model.TVendor, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tVendorDo) Attrs(attrs ...field.AssignExpr) ITVendorDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tVendorDo) Assign(attrs ...field.AssignExpr) ITVendorDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tVendorDo) Joins(fields ...field.RelationField) ITVendorDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tVendorDo) Preload(fields ...field.RelationField) ITVendorDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tVendorDo) FirstOrInit() (*model.TVendor, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TVendor), nil
	}
}

func (t tVendorDo) FirstOrCreate() (*model.TVendor, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TVendor), nil
	}
}

func (t tVendorDo) FindByPage(offset int, limit int) (result []*model.TVendor, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tVendorDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tVendorDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tVendorDo) Delete(models ...*model.TVendor) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tVendorDo) withDO(do gen.Dao) *tVendorDo {
	t.DO = *do.(*gen.DO)
	return t
}
