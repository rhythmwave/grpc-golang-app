// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-bponline/m/gen/model"
)

func newTVendorRekening(db *gorm.DB, opts ...gen.DOOption) tVendorRekening {
	_tVendorRekening := tVendorRekening{}

	_tVendorRekening.tVendorRekeningDo.UseDB(db, opts...)
	_tVendorRekening.tVendorRekeningDo.UseModel(&model.TVendorRekening{})

	tableName := _tVendorRekening.tVendorRekeningDo.TableName()
	_tVendorRekening.ALL = field.NewAsterisk(tableName)
	_tVendorRekening.CIDVendor = field.NewInt32(tableName, "c_id_vendor")
	_tVendorRekening.CNoRekening = field.NewString(tableName, "c_no_rekening")
	_tVendorRekening.CNamaBank = field.NewString(tableName, "c_nama_bank")
	_tVendorRekening.CAtasNama = field.NewString(tableName, "c_atas_nama")
	_tVendorRekening.CStatus = field.NewString(tableName, "c_status")
	_tVendorRekening.CUpdater = field.NewString(tableName, "c_updater")
	_tVendorRekening.CLastUpdate = field.NewTime(tableName, "c_last_update")

	_tVendorRekening.fillFieldMap()

	return _tVendorRekening
}

type tVendorRekening struct {
	tVendorRekeningDo

	ALL         field.Asterisk
	CIDVendor   field.Int32
	CNoRekening field.String
	CNamaBank   field.String
	CAtasNama   field.String
	CStatus     field.String
	CUpdater    field.String
	CLastUpdate field.Time

	fieldMap map[string]field.Expr
}

func (t tVendorRekening) Table(newTableName string) *tVendorRekening {
	t.tVendorRekeningDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tVendorRekening) As(alias string) *tVendorRekening {
	t.tVendorRekeningDo.DO = *(t.tVendorRekeningDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tVendorRekening) updateTableName(table string) *tVendorRekening {
	t.ALL = field.NewAsterisk(table)
	t.CIDVendor = field.NewInt32(table, "c_id_vendor")
	t.CNoRekening = field.NewString(table, "c_no_rekening")
	t.CNamaBank = field.NewString(table, "c_nama_bank")
	t.CAtasNama = field.NewString(table, "c_atas_nama")
	t.CStatus = field.NewString(table, "c_status")
	t.CUpdater = field.NewString(table, "c_updater")
	t.CLastUpdate = field.NewTime(table, "c_last_update")

	t.fillFieldMap()

	return t
}

func (t *tVendorRekening) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tVendorRekening) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 7)
	t.fieldMap["c_id_vendor"] = t.CIDVendor
	t.fieldMap["c_no_rekening"] = t.CNoRekening
	t.fieldMap["c_nama_bank"] = t.CNamaBank
	t.fieldMap["c_atas_nama"] = t.CAtasNama
	t.fieldMap["c_status"] = t.CStatus
	t.fieldMap["c_updater"] = t.CUpdater
	t.fieldMap["c_last_update"] = t.CLastUpdate
}

func (t tVendorRekening) clone(db *gorm.DB) tVendorRekening {
	t.tVendorRekeningDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tVendorRekening) replaceDB(db *gorm.DB) tVendorRekening {
	t.tVendorRekeningDo.ReplaceDB(db)
	return t
}

type tVendorRekeningDo struct{ gen.DO }

type ITVendorRekeningDo interface {
	gen.SubQuery
	Debug() ITVendorRekeningDo
	WithContext(ctx context.Context) ITVendorRekeningDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITVendorRekeningDo
	WriteDB() ITVendorRekeningDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITVendorRekeningDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITVendorRekeningDo
	Not(conds ...gen.Condition) ITVendorRekeningDo
	Or(conds ...gen.Condition) ITVendorRekeningDo
	Select(conds ...field.Expr) ITVendorRekeningDo
	Where(conds ...gen.Condition) ITVendorRekeningDo
	Order(conds ...field.Expr) ITVendorRekeningDo
	Distinct(cols ...field.Expr) ITVendorRekeningDo
	Omit(cols ...field.Expr) ITVendorRekeningDo
	Join(table schema.Tabler, on ...field.Expr) ITVendorRekeningDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITVendorRekeningDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITVendorRekeningDo
	Group(cols ...field.Expr) ITVendorRekeningDo
	Having(conds ...gen.Condition) ITVendorRekeningDo
	Limit(limit int) ITVendorRekeningDo
	Offset(offset int) ITVendorRekeningDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITVendorRekeningDo
	Unscoped() ITVendorRekeningDo
	Create(values ...*model.TVendorRekening) error
	CreateInBatches(values []*model.TVendorRekening, batchSize int) error
	Save(values ...*model.TVendorRekening) error
	First() (*model.TVendorRekening, error)
	Take() (*model.TVendorRekening, error)
	Last() (*model.TVendorRekening, error)
	Find() ([]*model.TVendorRekening, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TVendorRekening, err error)
	FindInBatches(result *[]*model.TVendorRekening, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TVendorRekening) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITVendorRekeningDo
	Assign(attrs ...field.AssignExpr) ITVendorRekeningDo
	Joins(fields ...field.RelationField) ITVendorRekeningDo
	Preload(fields ...field.RelationField) ITVendorRekeningDo
	FirstOrInit() (*model.TVendorRekening, error)
	FirstOrCreate() (*model.TVendorRekening, error)
	FindByPage(offset int, limit int) (result []*model.TVendorRekening, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITVendorRekeningDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tVendorRekeningDo) Debug() ITVendorRekeningDo {
	return t.withDO(t.DO.Debug())
}

func (t tVendorRekeningDo) WithContext(ctx context.Context) ITVendorRekeningDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tVendorRekeningDo) ReadDB() ITVendorRekeningDo {
	return t.Clauses(dbresolver.Read)
}

func (t tVendorRekeningDo) WriteDB() ITVendorRekeningDo {
	return t.Clauses(dbresolver.Write)
}

func (t tVendorRekeningDo) Session(config *gorm.Session) ITVendorRekeningDo {
	return t.withDO(t.DO.Session(config))
}

func (t tVendorRekeningDo) Clauses(conds ...clause.Expression) ITVendorRekeningDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tVendorRekeningDo) Returning(value interface{}, columns ...string) ITVendorRekeningDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tVendorRekeningDo) Not(conds ...gen.Condition) ITVendorRekeningDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tVendorRekeningDo) Or(conds ...gen.Condition) ITVendorRekeningDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tVendorRekeningDo) Select(conds ...field.Expr) ITVendorRekeningDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tVendorRekeningDo) Where(conds ...gen.Condition) ITVendorRekeningDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tVendorRekeningDo) Order(conds ...field.Expr) ITVendorRekeningDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tVendorRekeningDo) Distinct(cols ...field.Expr) ITVendorRekeningDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tVendorRekeningDo) Omit(cols ...field.Expr) ITVendorRekeningDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tVendorRekeningDo) Join(table schema.Tabler, on ...field.Expr) ITVendorRekeningDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tVendorRekeningDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITVendorRekeningDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tVendorRekeningDo) RightJoin(table schema.Tabler, on ...field.Expr) ITVendorRekeningDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tVendorRekeningDo) Group(cols ...field.Expr) ITVendorRekeningDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tVendorRekeningDo) Having(conds ...gen.Condition) ITVendorRekeningDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tVendorRekeningDo) Limit(limit int) ITVendorRekeningDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tVendorRekeningDo) Offset(offset int) ITVendorRekeningDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tVendorRekeningDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITVendorRekeningDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tVendorRekeningDo) Unscoped() ITVendorRekeningDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tVendorRekeningDo) Create(values ...*model.TVendorRekening) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tVendorRekeningDo) CreateInBatches(values []*model.TVendorRekening, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tVendorRekeningDo) Save(values ...*model.TVendorRekening) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tVendorRekeningDo) First() (*model.TVendorRekening, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TVendorRekening), nil
	}
}

func (t tVendorRekeningDo) Take() (*model.TVendorRekening, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TVendorRekening), nil
	}
}

func (t tVendorRekeningDo) Last() (*model.TVendorRekening, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TVendorRekening), nil
	}
}

func (t tVendorRekeningDo) Find() ([]*model.TVendorRekening, error) {
	result, err := t.DO.Find()
	return result.([]*model.TVendorRekening), err
}

func (t tVendorRekeningDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TVendorRekening, err error) {
	buf := make([]*model.TVendorRekening, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tVendorRekeningDo) FindInBatches(result *[]*model.TVendorRekening, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tVendorRekeningDo) Attrs(attrs ...field.AssignExpr) ITVendorRekeningDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tVendorRekeningDo) Assign(attrs ...field.AssignExpr) ITVendorRekeningDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tVendorRekeningDo) Joins(fields ...field.RelationField) ITVendorRekeningDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tVendorRekeningDo) Preload(fields ...field.RelationField) ITVendorRekeningDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tVendorRekeningDo) FirstOrInit() (*model.TVendorRekening, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TVendorRekening), nil
	}
}

func (t tVendorRekeningDo) FirstOrCreate() (*model.TVendorRekening, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TVendorRekening), nil
	}
}

func (t tVendorRekeningDo) FindByPage(offset int, limit int) (result []*model.TVendorRekening, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tVendorRekeningDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tVendorRekeningDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tVendorRekeningDo) Delete(models ...*model.TVendorRekening) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tVendorRekeningDo) withDO(do gen.Dao) *tVendorRekeningDo {
	t.DO = *do.(*gen.DO)
	return t
}
