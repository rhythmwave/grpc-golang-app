// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-bponline/m/gen/model"
)

func newTest2(db *gorm.DB, opts ...gen.DOOption) test2 {
	_test2 := test2{}

	_test2.test2Do.UseDB(db, opts...)
	_test2.test2Do.UseModel(&model.Test2{})

	tableName := _test2.test2Do.TableName()
	_test2.ALL = field.NewAsterisk(tableName)
	_test2.ID = field.NewInt32(tableName, "id")
	_test2.IDTest1 = field.NewInt32(tableName, "id_test1")

	_test2.fillFieldMap()

	return _test2
}

type test2 struct {
	test2Do

	ALL     field.Asterisk
	ID      field.Int32
	IDTest1 field.Int32

	fieldMap map[string]field.Expr
}

func (t test2) Table(newTableName string) *test2 {
	t.test2Do.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t test2) As(alias string) *test2 {
	t.test2Do.DO = *(t.test2Do.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *test2) updateTableName(table string) *test2 {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt32(table, "id")
	t.IDTest1 = field.NewInt32(table, "id_test1")

	t.fillFieldMap()

	return t
}

func (t *test2) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *test2) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 2)
	t.fieldMap["id"] = t.ID
	t.fieldMap["id_test1"] = t.IDTest1
}

func (t test2) clone(db *gorm.DB) test2 {
	t.test2Do.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t test2) replaceDB(db *gorm.DB) test2 {
	t.test2Do.ReplaceDB(db)
	return t
}

type test2Do struct{ gen.DO }

type ITest2Do interface {
	gen.SubQuery
	Debug() ITest2Do
	WithContext(ctx context.Context) ITest2Do
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITest2Do
	WriteDB() ITest2Do
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITest2Do
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITest2Do
	Not(conds ...gen.Condition) ITest2Do
	Or(conds ...gen.Condition) ITest2Do
	Select(conds ...field.Expr) ITest2Do
	Where(conds ...gen.Condition) ITest2Do
	Order(conds ...field.Expr) ITest2Do
	Distinct(cols ...field.Expr) ITest2Do
	Omit(cols ...field.Expr) ITest2Do
	Join(table schema.Tabler, on ...field.Expr) ITest2Do
	LeftJoin(table schema.Tabler, on ...field.Expr) ITest2Do
	RightJoin(table schema.Tabler, on ...field.Expr) ITest2Do
	Group(cols ...field.Expr) ITest2Do
	Having(conds ...gen.Condition) ITest2Do
	Limit(limit int) ITest2Do
	Offset(offset int) ITest2Do
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITest2Do
	Unscoped() ITest2Do
	Create(values ...*model.Test2) error
	CreateInBatches(values []*model.Test2, batchSize int) error
	Save(values ...*model.Test2) error
	First() (*model.Test2, error)
	Take() (*model.Test2, error)
	Last() (*model.Test2, error)
	Find() ([]*model.Test2, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Test2, err error)
	FindInBatches(result *[]*model.Test2, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Test2) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITest2Do
	Assign(attrs ...field.AssignExpr) ITest2Do
	Joins(fields ...field.RelationField) ITest2Do
	Preload(fields ...field.RelationField) ITest2Do
	FirstOrInit() (*model.Test2, error)
	FirstOrCreate() (*model.Test2, error)
	FindByPage(offset int, limit int) (result []*model.Test2, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITest2Do
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t test2Do) Debug() ITest2Do {
	return t.withDO(t.DO.Debug())
}

func (t test2Do) WithContext(ctx context.Context) ITest2Do {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t test2Do) ReadDB() ITest2Do {
	return t.Clauses(dbresolver.Read)
}

func (t test2Do) WriteDB() ITest2Do {
	return t.Clauses(dbresolver.Write)
}

func (t test2Do) Session(config *gorm.Session) ITest2Do {
	return t.withDO(t.DO.Session(config))
}

func (t test2Do) Clauses(conds ...clause.Expression) ITest2Do {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t test2Do) Returning(value interface{}, columns ...string) ITest2Do {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t test2Do) Not(conds ...gen.Condition) ITest2Do {
	return t.withDO(t.DO.Not(conds...))
}

func (t test2Do) Or(conds ...gen.Condition) ITest2Do {
	return t.withDO(t.DO.Or(conds...))
}

func (t test2Do) Select(conds ...field.Expr) ITest2Do {
	return t.withDO(t.DO.Select(conds...))
}

func (t test2Do) Where(conds ...gen.Condition) ITest2Do {
	return t.withDO(t.DO.Where(conds...))
}

func (t test2Do) Order(conds ...field.Expr) ITest2Do {
	return t.withDO(t.DO.Order(conds...))
}

func (t test2Do) Distinct(cols ...field.Expr) ITest2Do {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t test2Do) Omit(cols ...field.Expr) ITest2Do {
	return t.withDO(t.DO.Omit(cols...))
}

func (t test2Do) Join(table schema.Tabler, on ...field.Expr) ITest2Do {
	return t.withDO(t.DO.Join(table, on...))
}

func (t test2Do) LeftJoin(table schema.Tabler, on ...field.Expr) ITest2Do {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t test2Do) RightJoin(table schema.Tabler, on ...field.Expr) ITest2Do {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t test2Do) Group(cols ...field.Expr) ITest2Do {
	return t.withDO(t.DO.Group(cols...))
}

func (t test2Do) Having(conds ...gen.Condition) ITest2Do {
	return t.withDO(t.DO.Having(conds...))
}

func (t test2Do) Limit(limit int) ITest2Do {
	return t.withDO(t.DO.Limit(limit))
}

func (t test2Do) Offset(offset int) ITest2Do {
	return t.withDO(t.DO.Offset(offset))
}

func (t test2Do) Scopes(funcs ...func(gen.Dao) gen.Dao) ITest2Do {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t test2Do) Unscoped() ITest2Do {
	return t.withDO(t.DO.Unscoped())
}

func (t test2Do) Create(values ...*model.Test2) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t test2Do) CreateInBatches(values []*model.Test2, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t test2Do) Save(values ...*model.Test2) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t test2Do) First() (*model.Test2, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Test2), nil
	}
}

func (t test2Do) Take() (*model.Test2, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Test2), nil
	}
}

func (t test2Do) Last() (*model.Test2, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Test2), nil
	}
}

func (t test2Do) Find() ([]*model.Test2, error) {
	result, err := t.DO.Find()
	return result.([]*model.Test2), err
}

func (t test2Do) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Test2, err error) {
	buf := make([]*model.Test2, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t test2Do) FindInBatches(result *[]*model.Test2, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t test2Do) Attrs(attrs ...field.AssignExpr) ITest2Do {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t test2Do) Assign(attrs ...field.AssignExpr) ITest2Do {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t test2Do) Joins(fields ...field.RelationField) ITest2Do {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t test2Do) Preload(fields ...field.RelationField) ITest2Do {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t test2Do) FirstOrInit() (*model.Test2, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Test2), nil
	}
}

func (t test2Do) FirstOrCreate() (*model.Test2, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Test2), nil
	}
}

func (t test2Do) FindByPage(offset int, limit int) (result []*model.Test2, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t test2Do) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t test2Do) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t test2Do) Delete(models ...*model.Test2) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *test2Do) withDO(do gen.Dao) *test2Do {
	t.DO = *do.(*gen.DO)
	return t
}
