// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: proto/anggaran.proto

package anggaran

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AnggaranService_GetKegiatan_FullMethodName            = "/proto.AnggaranService/GetKegiatan"
	AnggaranService_GetAcuanHargadanStatus_FullMethodName = "/proto.AnggaranService/GetAcuanHargadanStatus"
	AnggaranService_Getkegiatanikut_FullMethodName        = "/proto.AnggaranService/Getkegiatanikut"
	AnggaranService_Getkepanitiaan_FullMethodName         = "/proto.AnggaranService/Getkepanitiaan"
	AnggaranService_Setkepanitiaan_FullMethodName         = "/proto.AnggaranService/Setkepanitiaan"
	AnggaranService_Getitemanggaran_FullMethodName        = "/proto.AnggaranService/Getitemanggaran"
	AnggaranService_Getbarang_FullMethodName              = "/proto.AnggaranService/Getbarang"
	AnggaranService_Uploaddokumen_FullMethodName          = "/proto.AnggaranService/Uploaddokumen"
	AnggaranService_Setbiayakegiatan_FullMethodName       = "/proto.AnggaranService/Setbiayakegiatan"
)

// AnggaranServiceClient is the client API for AnggaranService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnggaranServiceClient interface {
	GetKegiatan(ctx context.Context, in *KegiatanRequest, opts ...grpc.CallOption) (*KegiatanResponse, error)
	GetAcuanHargadanStatus(ctx context.Context, in *AcuanHargaDanStatusRequest, opts ...grpc.CallOption) (*AcuanHargaDanStatusResponse, error)
	Getkegiatanikut(ctx context.Context, in *KegiatanIkutRequest, opts ...grpc.CallOption) (*KegiatanIkutResponse, error)
	Getkepanitiaan(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	Setkepanitiaan(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	Getitemanggaran(ctx context.Context, in *ItemAnggaranRequest, opts ...grpc.CallOption) (*ItemAnggaranResponse, error)
	Getbarang(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	Uploaddokumen(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	Setbiayakegiatan(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type anggaranServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAnggaranServiceClient(cc grpc.ClientConnInterface) AnggaranServiceClient {
	return &anggaranServiceClient{cc}
}

func (c *anggaranServiceClient) GetKegiatan(ctx context.Context, in *KegiatanRequest, opts ...grpc.CallOption) (*KegiatanResponse, error) {
	out := new(KegiatanResponse)
	err := c.cc.Invoke(ctx, AnggaranService_GetKegiatan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anggaranServiceClient) GetAcuanHargadanStatus(ctx context.Context, in *AcuanHargaDanStatusRequest, opts ...grpc.CallOption) (*AcuanHargaDanStatusResponse, error) {
	out := new(AcuanHargaDanStatusResponse)
	err := c.cc.Invoke(ctx, AnggaranService_GetAcuanHargadanStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anggaranServiceClient) Getkegiatanikut(ctx context.Context, in *KegiatanIkutRequest, opts ...grpc.CallOption) (*KegiatanIkutResponse, error) {
	out := new(KegiatanIkutResponse)
	err := c.cc.Invoke(ctx, AnggaranService_Getkegiatanikut_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anggaranServiceClient) Getkepanitiaan(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, AnggaranService_Getkepanitiaan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anggaranServiceClient) Setkepanitiaan(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, AnggaranService_Setkepanitiaan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anggaranServiceClient) Getitemanggaran(ctx context.Context, in *ItemAnggaranRequest, opts ...grpc.CallOption) (*ItemAnggaranResponse, error) {
	out := new(ItemAnggaranResponse)
	err := c.cc.Invoke(ctx, AnggaranService_Getitemanggaran_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anggaranServiceClient) Getbarang(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, AnggaranService_Getbarang_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anggaranServiceClient) Uploaddokumen(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, AnggaranService_Uploaddokumen_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anggaranServiceClient) Setbiayakegiatan(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, AnggaranService_Setbiayakegiatan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnggaranServiceServer is the server API for AnggaranService service.
// All implementations must embed UnimplementedAnggaranServiceServer
// for forward compatibility
type AnggaranServiceServer interface {
	GetKegiatan(context.Context, *KegiatanRequest) (*KegiatanResponse, error)
	GetAcuanHargadanStatus(context.Context, *AcuanHargaDanStatusRequest) (*AcuanHargaDanStatusResponse, error)
	Getkegiatanikut(context.Context, *KegiatanIkutRequest) (*KegiatanIkutResponse, error)
	Getkepanitiaan(context.Context, *Empty) (*Empty, error)
	Setkepanitiaan(context.Context, *Empty) (*Empty, error)
	Getitemanggaran(context.Context, *ItemAnggaranRequest) (*ItemAnggaranResponse, error)
	Getbarang(context.Context, *Empty) (*Empty, error)
	Uploaddokumen(context.Context, *Empty) (*Empty, error)
	Setbiayakegiatan(context.Context, *Empty) (*Empty, error)
	mustEmbedUnimplementedAnggaranServiceServer()
}

// UnimplementedAnggaranServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAnggaranServiceServer struct {
}

func (UnimplementedAnggaranServiceServer) GetKegiatan(context.Context, *KegiatanRequest) (*KegiatanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKegiatan not implemented")
}
func (UnimplementedAnggaranServiceServer) GetAcuanHargadanStatus(context.Context, *AcuanHargaDanStatusRequest) (*AcuanHargaDanStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAcuanHargadanStatus not implemented")
}
func (UnimplementedAnggaranServiceServer) Getkegiatanikut(context.Context, *KegiatanIkutRequest) (*KegiatanIkutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Getkegiatanikut not implemented")
}
func (UnimplementedAnggaranServiceServer) Getkepanitiaan(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Getkepanitiaan not implemented")
}
func (UnimplementedAnggaranServiceServer) Setkepanitiaan(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Setkepanitiaan not implemented")
}
func (UnimplementedAnggaranServiceServer) Getitemanggaran(context.Context, *ItemAnggaranRequest) (*ItemAnggaranResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Getitemanggaran not implemented")
}
func (UnimplementedAnggaranServiceServer) Getbarang(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Getbarang not implemented")
}
func (UnimplementedAnggaranServiceServer) Uploaddokumen(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Uploaddokumen not implemented")
}
func (UnimplementedAnggaranServiceServer) Setbiayakegiatan(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Setbiayakegiatan not implemented")
}
func (UnimplementedAnggaranServiceServer) mustEmbedUnimplementedAnggaranServiceServer() {}

// UnsafeAnggaranServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnggaranServiceServer will
// result in compilation errors.
type UnsafeAnggaranServiceServer interface {
	mustEmbedUnimplementedAnggaranServiceServer()
}

func RegisterAnggaranServiceServer(s grpc.ServiceRegistrar, srv AnggaranServiceServer) {
	s.RegisterService(&AnggaranService_ServiceDesc, srv)
}

func _AnggaranService_GetKegiatan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KegiatanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnggaranServiceServer).GetKegiatan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnggaranService_GetKegiatan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnggaranServiceServer).GetKegiatan(ctx, req.(*KegiatanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnggaranService_GetAcuanHargadanStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcuanHargaDanStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnggaranServiceServer).GetAcuanHargadanStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnggaranService_GetAcuanHargadanStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnggaranServiceServer).GetAcuanHargadanStatus(ctx, req.(*AcuanHargaDanStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnggaranService_Getkegiatanikut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KegiatanIkutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnggaranServiceServer).Getkegiatanikut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnggaranService_Getkegiatanikut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnggaranServiceServer).Getkegiatanikut(ctx, req.(*KegiatanIkutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnggaranService_Getkepanitiaan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnggaranServiceServer).Getkepanitiaan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnggaranService_Getkepanitiaan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnggaranServiceServer).Getkepanitiaan(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnggaranService_Setkepanitiaan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnggaranServiceServer).Setkepanitiaan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnggaranService_Setkepanitiaan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnggaranServiceServer).Setkepanitiaan(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnggaranService_Getitemanggaran_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemAnggaranRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnggaranServiceServer).Getitemanggaran(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnggaranService_Getitemanggaran_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnggaranServiceServer).Getitemanggaran(ctx, req.(*ItemAnggaranRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnggaranService_Getbarang_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnggaranServiceServer).Getbarang(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnggaranService_Getbarang_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnggaranServiceServer).Getbarang(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnggaranService_Uploaddokumen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnggaranServiceServer).Uploaddokumen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnggaranService_Uploaddokumen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnggaranServiceServer).Uploaddokumen(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnggaranService_Setbiayakegiatan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnggaranServiceServer).Setbiayakegiatan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnggaranService_Setbiayakegiatan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnggaranServiceServer).Setbiayakegiatan(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// AnggaranService_ServiceDesc is the grpc.ServiceDesc for AnggaranService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnggaranService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AnggaranService",
	HandlerType: (*AnggaranServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetKegiatan",
			Handler:    _AnggaranService_GetKegiatan_Handler,
		},
		{
			MethodName: "GetAcuanHargadanStatus",
			Handler:    _AnggaranService_GetAcuanHargadanStatus_Handler,
		},
		{
			MethodName: "Getkegiatanikut",
			Handler:    _AnggaranService_Getkegiatanikut_Handler,
		},
		{
			MethodName: "Getkepanitiaan",
			Handler:    _AnggaranService_Getkepanitiaan_Handler,
		},
		{
			MethodName: "Setkepanitiaan",
			Handler:    _AnggaranService_Setkepanitiaan_Handler,
		},
		{
			MethodName: "Getitemanggaran",
			Handler:    _AnggaranService_Getitemanggaran_Handler,
		},
		{
			MethodName: "Getbarang",
			Handler:    _AnggaranService_Getbarang_Handler,
		},
		{
			MethodName: "Uploaddokumen",
			Handler:    _AnggaranService_Uploaddokumen_Handler,
		},
		{
			MethodName: "Setbiayakegiatan",
			Handler:    _AnggaranService_Setbiayakegiatan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/anggaran.proto",
}
